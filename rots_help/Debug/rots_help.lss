
rots_help.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002462  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009a  00800060  00002462  000024f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000050  008000fa  008000fa  00002590  2**0
                  ALLOC
  3 .stab         00003258  00000000  00000000  00002590  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001b3e  00000000  00000000  000057e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 57 03 	jmp	0x6ae	; 0x6ae <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 0d 10 	jmp	0x201a	; 0x201a <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 1d 10 	jmp	0x203a	; 0x203a <__vector_15>
      40:	0c 94 a0 0d 	jmp	0x1b40	; 0x1b40 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e6       	ldi	r30, 0x62	; 98
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3f       	cpi	r26, 0xFA	; 250
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa ef       	ldi	r26, 0xFA	; 250
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 34       	cpi	r26, 0x4A	; 74
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 92 11 	call	0x2324	; 0x2324 <main>
      8a:	0c 94 2f 12 	jmp	0x245e	; 0x245e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC>:
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	00 d0       	rcall	.+0      	; 0x98 <ADC+0x6>
      98:	0f 92       	push	r0
      9a:	cd b7       	in	r28, 0x3d	; 61
      9c:	de b7       	in	r29, 0x3e	; 62
      9e:	89 83       	std	Y+1, r24	; 0x01
      a0:	89 81       	ldd	r24, Y+1	; 0x01
      a2:	28 2f       	mov	r18, r24
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	3b 83       	std	Y+3, r19	; 0x03
      a8:	2a 83       	std	Y+2, r18	; 0x02
      aa:	8a 81       	ldd	r24, Y+2	; 0x02
      ac:	9b 81       	ldd	r25, Y+3	; 0x03
      ae:	00 97       	sbiw	r24, 0x00	; 0
      b0:	31 f0       	breq	.+12     	; 0xbe <ADC+0x2c>
      b2:	2a 81       	ldd	r18, Y+2	; 0x02
      b4:	3b 81       	ldd	r19, Y+3	; 0x03
      b6:	21 30       	cpi	r18, 0x01	; 1
      b8:	31 05       	cpc	r19, r1
      ba:	49 f0       	breq	.+18     	; 0xce <ADC+0x3c>
      bc:	0f c0       	rjmp	.+30     	; 0xdc <ADC+0x4a>
      be:	a6 e2       	ldi	r26, 0x26	; 38
      c0:	b0 e0       	ldi	r27, 0x00	; 0
      c2:	e6 e2       	ldi	r30, 0x26	; 38
      c4:	f0 e0       	ldi	r31, 0x00	; 0
      c6:	80 81       	ld	r24, Z
      c8:	80 68       	ori	r24, 0x80	; 128
      ca:	8c 93       	st	X, r24
      cc:	07 c0       	rjmp	.+14     	; 0xdc <ADC+0x4a>
      ce:	a6 e2       	ldi	r26, 0x26	; 38
      d0:	b0 e0       	ldi	r27, 0x00	; 0
      d2:	e6 e2       	ldi	r30, 0x26	; 38
      d4:	f0 e0       	ldi	r31, 0x00	; 0
      d6:	80 81       	ld	r24, Z
      d8:	8f 77       	andi	r24, 0x7F	; 127
      da:	8c 93       	st	X, r24
      dc:	0f 90       	pop	r0
      de:	0f 90       	pop	r0
      e0:	0f 90       	pop	r0
      e2:	cf 91       	pop	r28
      e4:	df 91       	pop	r29
      e6:	08 95       	ret

000000e8 <ADC_Conversion>:
		CLEAR_BIT(ADCSRA, 7);
		break;
	}
}
/****************************************************************************/
void ADC_Conversion(const CONV_MODE_t MODE, const ADC_CH_t ADC_CH) {
      e8:	df 93       	push	r29
      ea:	cf 93       	push	r28
      ec:	00 d0       	rcall	.+0      	; 0xee <ADC_Conversion+0x6>
      ee:	00 d0       	rcall	.+0      	; 0xf0 <ADC_Conversion+0x8>
      f0:	cd b7       	in	r28, 0x3d	; 61
      f2:	de b7       	in	r29, 0x3e	; 62
      f4:	89 83       	std	Y+1, r24	; 0x01
      f6:	6a 83       	std	Y+2, r22	; 0x02
	ADMUX &= 0XF0;		/* Clear First 4 Bits */
      f8:	a7 e2       	ldi	r26, 0x27	; 39
      fa:	b0 e0       	ldi	r27, 0x00	; 0
      fc:	e7 e2       	ldi	r30, 0x27	; 39
      fe:	f0 e0       	ldi	r31, 0x00	; 0
     100:	80 81       	ld	r24, Z
     102:	80 7f       	andi	r24, 0xF0	; 240
     104:	8c 93       	st	X, r24
	ADMUX |= ADC_CH;	/* Select Required Channel */
     106:	a7 e2       	ldi	r26, 0x27	; 39
     108:	b0 e0       	ldi	r27, 0x00	; 0
     10a:	e7 e2       	ldi	r30, 0x27	; 39
     10c:	f0 e0       	ldi	r31, 0x00	; 0
     10e:	90 81       	ld	r25, Z
     110:	8a 81       	ldd	r24, Y+2	; 0x02
     112:	89 2b       	or	r24, r25
     114:	8c 93       	st	X, r24
	switch (MODE) {
     116:	89 81       	ldd	r24, Y+1	; 0x01
     118:	28 2f       	mov	r18, r24
     11a:	30 e0       	ldi	r19, 0x00	; 0
     11c:	3c 83       	std	Y+4, r19	; 0x04
     11e:	2b 83       	std	Y+3, r18	; 0x03
     120:	8b 81       	ldd	r24, Y+3	; 0x03
     122:	9c 81       	ldd	r25, Y+4	; 0x04
     124:	00 97       	sbiw	r24, 0x00	; 0
     126:	31 f0       	breq	.+12     	; 0x134 <ADC_Conversion+0x4c>
     128:	2b 81       	ldd	r18, Y+3	; 0x03
     12a:	3c 81       	ldd	r19, Y+4	; 0x04
     12c:	21 30       	cpi	r18, 0x01	; 1
     12e:	31 05       	cpc	r19, r1
     130:	49 f0       	breq	.+18     	; 0x144 <ADC_Conversion+0x5c>
     132:	0f c0       	rjmp	.+30     	; 0x152 <ADC_Conversion+0x6a>
	case START:
		SET_BIT(ADCSRA, 6);
     134:	a6 e2       	ldi	r26, 0x26	; 38
     136:	b0 e0       	ldi	r27, 0x00	; 0
     138:	e6 e2       	ldi	r30, 0x26	; 38
     13a:	f0 e0       	ldi	r31, 0x00	; 0
     13c:	80 81       	ld	r24, Z
     13e:	80 64       	ori	r24, 0x40	; 64
     140:	8c 93       	st	X, r24
     142:	07 c0       	rjmp	.+14     	; 0x152 <ADC_Conversion+0x6a>
		break;
	case STOP:
		CLEAR_BIT(ADCSRA, 6);
     144:	a6 e2       	ldi	r26, 0x26	; 38
     146:	b0 e0       	ldi	r27, 0x00	; 0
     148:	e6 e2       	ldi	r30, 0x26	; 38
     14a:	f0 e0       	ldi	r31, 0x00	; 0
     14c:	80 81       	ld	r24, Z
     14e:	8f 7b       	andi	r24, 0xBF	; 191
     150:	8c 93       	st	X, r24
		break;
	}
}
     152:	0f 90       	pop	r0
     154:	0f 90       	pop	r0
     156:	0f 90       	pop	r0
     158:	0f 90       	pop	r0
     15a:	cf 91       	pop	r28
     15c:	df 91       	pop	r29
     15e:	08 95       	ret

00000160 <ADC_Interrupt>:
/****************************************************************************/
void ADC_Interrupt(const MODE_t MODE) {
     160:	df 93       	push	r29
     162:	cf 93       	push	r28
     164:	00 d0       	rcall	.+0      	; 0x166 <ADC_Interrupt+0x6>
     166:	0f 92       	push	r0
     168:	cd b7       	in	r28, 0x3d	; 61
     16a:	de b7       	in	r29, 0x3e	; 62
     16c:	89 83       	std	Y+1, r24	; 0x01
	switch (MODE) {
     16e:	89 81       	ldd	r24, Y+1	; 0x01
     170:	28 2f       	mov	r18, r24
     172:	30 e0       	ldi	r19, 0x00	; 0
     174:	3b 83       	std	Y+3, r19	; 0x03
     176:	2a 83       	std	Y+2, r18	; 0x02
     178:	8a 81       	ldd	r24, Y+2	; 0x02
     17a:	9b 81       	ldd	r25, Y+3	; 0x03
     17c:	00 97       	sbiw	r24, 0x00	; 0
     17e:	31 f0       	breq	.+12     	; 0x18c <ADC_Interrupt+0x2c>
     180:	2a 81       	ldd	r18, Y+2	; 0x02
     182:	3b 81       	ldd	r19, Y+3	; 0x03
     184:	21 30       	cpi	r18, 0x01	; 1
     186:	31 05       	cpc	r19, r1
     188:	49 f0       	breq	.+18     	; 0x19c <ADC_Interrupt+0x3c>
     18a:	0f c0       	rjmp	.+30     	; 0x1aa <ADC_Interrupt+0x4a>
	case ENABLE:
		SET_BIT(ADCSRA, 3);
     18c:	a6 e2       	ldi	r26, 0x26	; 38
     18e:	b0 e0       	ldi	r27, 0x00	; 0
     190:	e6 e2       	ldi	r30, 0x26	; 38
     192:	f0 e0       	ldi	r31, 0x00	; 0
     194:	80 81       	ld	r24, Z
     196:	88 60       	ori	r24, 0x08	; 8
     198:	8c 93       	st	X, r24
     19a:	07 c0       	rjmp	.+14     	; 0x1aa <ADC_Interrupt+0x4a>
		break;
	case DISABLE:
		CLEAR_BIT(ADCSRA, 3);
     19c:	a6 e2       	ldi	r26, 0x26	; 38
     19e:	b0 e0       	ldi	r27, 0x00	; 0
     1a0:	e6 e2       	ldi	r30, 0x26	; 38
     1a2:	f0 e0       	ldi	r31, 0x00	; 0
     1a4:	80 81       	ld	r24, Z
     1a6:	87 7f       	andi	r24, 0xF7	; 247
     1a8:	8c 93       	st	X, r24
		break;
	}
}
     1aa:	0f 90       	pop	r0
     1ac:	0f 90       	pop	r0
     1ae:	0f 90       	pop	r0
     1b0:	cf 91       	pop	r28
     1b2:	df 91       	pop	r29
     1b4:	08 95       	ret

000001b6 <ADC_Set_Prescaler>:
/****************************************************************************/
void ADC_Set_Prescaler(const PRESCALER_t PRESCALER){
     1b6:	df 93       	push	r29
     1b8:	cf 93       	push	r28
     1ba:	0f 92       	push	r0
     1bc:	cd b7       	in	r28, 0x3d	; 61
     1be:	de b7       	in	r29, 0x3e	; 62
     1c0:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA &= 0XF8;
     1c2:	a6 e2       	ldi	r26, 0x26	; 38
     1c4:	b0 e0       	ldi	r27, 0x00	; 0
     1c6:	e6 e2       	ldi	r30, 0x26	; 38
     1c8:	f0 e0       	ldi	r31, 0x00	; 0
     1ca:	80 81       	ld	r24, Z
     1cc:	88 7f       	andi	r24, 0xF8	; 248
     1ce:	8c 93       	st	X, r24
	ADCSRA |= PRESCALER;
     1d0:	a6 e2       	ldi	r26, 0x26	; 38
     1d2:	b0 e0       	ldi	r27, 0x00	; 0
     1d4:	e6 e2       	ldi	r30, 0x26	; 38
     1d6:	f0 e0       	ldi	r31, 0x00	; 0
     1d8:	90 81       	ld	r25, Z
     1da:	89 81       	ldd	r24, Y+1	; 0x01
     1dc:	89 2b       	or	r24, r25
     1de:	8c 93       	st	X, r24
}
     1e0:	0f 90       	pop	r0
     1e2:	cf 91       	pop	r28
     1e4:	df 91       	pop	r29
     1e6:	08 95       	ret

000001e8 <ADC_Read_Flag>:
/****************************************************************************/
BOOL_t ADC_Read_Flag(void){
     1e8:	df 93       	push	r29
     1ea:	cf 93       	push	r28
     1ec:	0f 92       	push	r0
     1ee:	cd b7       	in	r28, 0x3d	; 61
     1f0:	de b7       	in	r29, 0x3e	; 62
	BOOL_t Flag = FALSE;
     1f2:	19 82       	std	Y+1, r1	; 0x01
	if(GET_BIT(ADCSRA, 4)){
     1f4:	e6 e2       	ldi	r30, 0x26	; 38
     1f6:	f0 e0       	ldi	r31, 0x00	; 0
     1f8:	80 81       	ld	r24, Z
     1fa:	82 95       	swap	r24
     1fc:	8f 70       	andi	r24, 0x0F	; 15
     1fe:	88 2f       	mov	r24, r24
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	81 70       	andi	r24, 0x01	; 1
     204:	90 70       	andi	r25, 0x00	; 0
     206:	88 23       	and	r24, r24
     208:	11 f0       	breq	.+4      	; 0x20e <ADC_Read_Flag+0x26>
		Flag = TRUE;
     20a:	81 e0       	ldi	r24, 0x01	; 1
     20c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Flag;
     20e:	89 81       	ldd	r24, Y+1	; 0x01
}
     210:	0f 90       	pop	r0
     212:	cf 91       	pop	r28
     214:	df 91       	pop	r29
     216:	08 95       	ret

00000218 <ADC_Clear_Flag>:
/****************************************************************************/
void ADC_Clear_Flag(void){
     218:	df 93       	push	r29
     21a:	cf 93       	push	r28
     21c:	cd b7       	in	r28, 0x3d	; 61
     21e:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(ADCSRA, 4);
     220:	a6 e2       	ldi	r26, 0x26	; 38
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	e6 e2       	ldi	r30, 0x26	; 38
     226:	f0 e0       	ldi	r31, 0x00	; 0
     228:	80 81       	ld	r24, Z
     22a:	8f 7e       	andi	r24, 0xEF	; 239
     22c:	8c 93       	st	X, r24
}
     22e:	cf 91       	pop	r28
     230:	df 91       	pop	r29
     232:	08 95       	ret

00000234 <ADC_Init>:
/****************************************************************************/
void ADC_Init(void){
     234:	df 93       	push	r29
     236:	cf 93       	push	r28
     238:	cd b7       	in	r28, 0x3d	; 61
     23a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADMUX, 6); /* External Vref +5 Volt */
     23c:	a7 e2       	ldi	r26, 0x27	; 39
     23e:	b0 e0       	ldi	r27, 0x00	; 0
     240:	e7 e2       	ldi	r30, 0x27	; 39
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	80 81       	ld	r24, Z
     246:	80 64       	ori	r24, 0x40	; 64
     248:	8c 93       	st	X, r24
}
     24a:	cf 91       	pop	r28
     24c:	df 91       	pop	r29
     24e:	08 95       	ret

00000250 <ADC_Read>:
/****************************************************************************/
UINT16_t ADC_Read(void){
     250:	df 93       	push	r29
     252:	cf 93       	push	r28
     254:	00 d0       	rcall	.+0      	; 0x256 <ADC_Read+0x6>
     256:	cd b7       	in	r28, 0x3d	; 61
     258:	de b7       	in	r29, 0x3e	; 62
	UINT16_t Reading = 0;
     25a:	1a 82       	std	Y+2, r1	; 0x02
     25c:	19 82       	std	Y+1, r1	; 0x01
	Reading = ADCL;
     25e:	e4 e2       	ldi	r30, 0x24	; 36
     260:	f0 e0       	ldi	r31, 0x00	; 0
     262:	80 81       	ld	r24, Z
     264:	88 2f       	mov	r24, r24
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	9a 83       	std	Y+2, r25	; 0x02
     26a:	89 83       	std	Y+1, r24	; 0x01
    Reading = ((UINT16_t)(ADCH << 8)) | Reading;
     26c:	e5 e2       	ldi	r30, 0x25	; 37
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	80 81       	ld	r24, Z
     272:	88 2f       	mov	r24, r24
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	98 2f       	mov	r25, r24
     278:	88 27       	eor	r24, r24
     27a:	9c 01       	movw	r18, r24
     27c:	89 81       	ldd	r24, Y+1	; 0x01
     27e:	9a 81       	ldd	r25, Y+2	; 0x02
     280:	82 2b       	or	r24, r18
     282:	93 2b       	or	r25, r19
     284:	9a 83       	std	Y+2, r25	; 0x02
     286:	89 83       	std	Y+1, r24	; 0x01
    return Reading;
     288:	89 81       	ldd	r24, Y+1	; 0x01
     28a:	9a 81       	ldd	r25, Y+2	; 0x02
}
     28c:	0f 90       	pop	r0
     28e:	0f 90       	pop	r0
     290:	cf 91       	pop	r28
     292:	df 91       	pop	r29
     294:	08 95       	ret

00000296 <CO_SCH_Delete_Task>:
/******************************************************************************/
static TASK_t CO_SCH_Task[CO_SCH_MAX_TASKS];
static volatile BOOL_t CO_SCH_Update = FALSE;
/******************************************************************************/
void
CO_SCH_Delete_Task(const UINT8_t ID){
     296:	df 93       	push	r29
     298:	cf 93       	push	r28
     29a:	0f 92       	push	r0
     29c:	cd b7       	in	r28, 0x3d	; 61
     29e:	de b7       	in	r29, 0x3e	; 62
     2a0:	89 83       	std	Y+1, r24	; 0x01
     if(ID < CO_SCH_MAX_TASKS && CO_SCH_Task[ID].pTask != NULL_PTR){
     2a2:	89 81       	ldd	r24, Y+1	; 0x01
     2a4:	84 30       	cpi	r24, 0x04	; 4
     2a6:	08 f0       	brcs	.+2      	; 0x2aa <CO_SCH_Delete_Task+0x14>
     2a8:	4b c0       	rjmp	.+150    	; 0x340 <CO_SCH_Delete_Task+0xaa>
     2aa:	89 81       	ldd	r24, Y+1	; 0x01
     2ac:	28 2f       	mov	r18, r24
     2ae:	30 e0       	ldi	r19, 0x00	; 0
     2b0:	c9 01       	movw	r24, r18
     2b2:	88 0f       	add	r24, r24
     2b4:	99 1f       	adc	r25, r25
     2b6:	82 0f       	add	r24, r18
     2b8:	93 1f       	adc	r25, r19
     2ba:	88 0f       	add	r24, r24
     2bc:	99 1f       	adc	r25, r25
     2be:	fc 01       	movw	r30, r24
     2c0:	e4 50       	subi	r30, 0x04	; 4
     2c2:	ff 4f       	sbci	r31, 0xFF	; 255
     2c4:	80 81       	ld	r24, Z
     2c6:	91 81       	ldd	r25, Z+1	; 0x01
     2c8:	00 97       	sbiw	r24, 0x00	; 0
     2ca:	d1 f1       	breq	.+116    	; 0x340 <CO_SCH_Delete_Task+0xaa>
        CO_SCH_Task[ID].pTask = NULL_PTR;
     2cc:	89 81       	ldd	r24, Y+1	; 0x01
     2ce:	28 2f       	mov	r18, r24
     2d0:	30 e0       	ldi	r19, 0x00	; 0
     2d2:	c9 01       	movw	r24, r18
     2d4:	88 0f       	add	r24, r24
     2d6:	99 1f       	adc	r25, r25
     2d8:	82 0f       	add	r24, r18
     2da:	93 1f       	adc	r25, r19
     2dc:	88 0f       	add	r24, r24
     2de:	99 1f       	adc	r25, r25
     2e0:	fc 01       	movw	r30, r24
     2e2:	e4 50       	subi	r30, 0x04	; 4
     2e4:	ff 4f       	sbci	r31, 0xFF	; 255
     2e6:	11 82       	std	Z+1, r1	; 0x01
     2e8:	10 82       	st	Z, r1
        CO_SCH_Task[ID].Run = 0;
     2ea:	89 81       	ldd	r24, Y+1	; 0x01
     2ec:	28 2f       	mov	r18, r24
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	c9 01       	movw	r24, r18
     2f2:	88 0f       	add	r24, r24
     2f4:	99 1f       	adc	r25, r25
     2f6:	82 0f       	add	r24, r18
     2f8:	93 1f       	adc	r25, r19
     2fa:	88 0f       	add	r24, r24
     2fc:	99 1f       	adc	r25, r25
     2fe:	fc 01       	movw	r30, r24
     300:	ef 5f       	subi	r30, 0xFF	; 255
     302:	fe 4f       	sbci	r31, 0xFE	; 254
     304:	10 82       	st	Z, r1
        CO_SCH_Task[ID].Delay = 0;
     306:	89 81       	ldd	r24, Y+1	; 0x01
     308:	28 2f       	mov	r18, r24
     30a:	30 e0       	ldi	r19, 0x00	; 0
     30c:	c9 01       	movw	r24, r18
     30e:	88 0f       	add	r24, r24
     310:	99 1f       	adc	r25, r25
     312:	82 0f       	add	r24, r18
     314:	93 1f       	adc	r25, r19
     316:	88 0f       	add	r24, r24
     318:	99 1f       	adc	r25, r25
     31a:	fc 01       	movw	r30, r24
     31c:	e1 50       	subi	r30, 0x01	; 1
     31e:	ff 4f       	sbci	r31, 0xFF	; 255
     320:	10 82       	st	Z, r1
        CO_SCH_Task[ID].Period = 0;
     322:	89 81       	ldd	r24, Y+1	; 0x01
     324:	28 2f       	mov	r18, r24
     326:	30 e0       	ldi	r19, 0x00	; 0
     328:	c9 01       	movw	r24, r18
     32a:	88 0f       	add	r24, r24
     32c:	99 1f       	adc	r25, r25
     32e:	82 0f       	add	r24, r18
     330:	93 1f       	adc	r25, r19
     332:	01 96       	adiw	r24, 0x01	; 1
     334:	88 0f       	add	r24, r24
     336:	99 1f       	adc	r25, r25
     338:	fc 01       	movw	r30, r24
     33a:	e4 50       	subi	r30, 0x04	; 4
     33c:	ff 4f       	sbci	r31, 0xFF	; 255
     33e:	10 82       	st	Z, r1
     }
     else{
        /* Error: Undefined Task */
     }
}
     340:	0f 90       	pop	r0
     342:	cf 91       	pop	r28
     344:	df 91       	pop	r29
     346:	08 95       	ret

00000348 <CO_SCH_Init>:
/******************************************************************************/
void
CO_SCH_Init(void){
     348:	df 93       	push	r29
     34a:	cf 93       	push	r28
     34c:	0f 92       	push	r0
     34e:	cd b7       	in	r28, 0x3d	; 61
     350:	de b7       	in	r29, 0x3e	; 62
	 UINT8_t Id;
	 /* ToDo: Disable Global Interrupt */
	 GIC;
     352:	af e5       	ldi	r26, 0x5F	; 95
     354:	b0 e0       	ldi	r27, 0x00	; 0
     356:	ef e5       	ldi	r30, 0x5F	; 95
     358:	f0 e0       	ldi	r31, 0x00	; 0
     35a:	80 81       	ld	r24, Z
     35c:	8f 77       	andi	r24, 0x7F	; 127
     35e:	8c 93       	st	X, r24
     for(Id = 0; Id < CO_SCH_MAX_TASKS; Id++){
     360:	19 82       	std	Y+1, r1	; 0x01
     362:	06 c0       	rjmp	.+12     	; 0x370 <CO_SCH_Init+0x28>
         CO_SCH_Delete_Task(Id);
     364:	89 81       	ldd	r24, Y+1	; 0x01
     366:	0e 94 4b 01 	call	0x296	; 0x296 <CO_SCH_Delete_Task>
void
CO_SCH_Init(void){
	 UINT8_t Id;
	 /* ToDo: Disable Global Interrupt */
	 GIC;
     for(Id = 0; Id < CO_SCH_MAX_TASKS; Id++){
     36a:	89 81       	ldd	r24, Y+1	; 0x01
     36c:	8f 5f       	subi	r24, 0xFF	; 255
     36e:	89 83       	std	Y+1, r24	; 0x01
     370:	89 81       	ldd	r24, Y+1	; 0x01
     372:	84 30       	cpi	r24, 0x04	; 4
     374:	b8 f3       	brcs	.-18     	; 0x364 <CO_SCH_Init+0x1c>
         CO_SCH_Delete_Task(Id);
     }
     /* To Do: Init Timer Here */
     TMR0_Init();
     376:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <TMR0_Init>
     TMR0_Mode(TMR0_CTC);
     37a:	82 e0       	ldi	r24, 0x02	; 2
     37c:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <TMR0_Mode>
     TMR0_Set_Prescaler(TMR0_NO_CLK);
     380:	80 e0       	ldi	r24, 0x00	; 0
     382:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <TMR0_Set_Prescaler>
     TMR0_Set_Buffer(TMR0_OCR, TMR_INT_CYCLE); 		/* 1 ms */
     386:	81 e0       	ldi	r24, 0x01	; 1
     388:	6d e7       	ldi	r22, 0x7D	; 125
     38a:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <TMR0_Set_Buffer>
     TMR0_INT(TMR0_OC_INT_ENABLE);
     38e:	82 e0       	ldi	r24, 0x02	; 2
     390:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <TMR0_INT>
}
     394:	0f 90       	pop	r0
     396:	cf 91       	pop	r28
     398:	df 91       	pop	r29
     39a:	08 95       	ret

0000039c <CO_SCH_Add_Task>:
/******************************************************************************/
void
CO_SCH_Add_Task(void (*const PTASK)(void),
                     const UINT8_t DELAY,
                     const UINT8_t PERIOD){
     39c:	df 93       	push	r29
     39e:	cf 93       	push	r28
     3a0:	00 d0       	rcall	.+0      	; 0x3a2 <CO_SCH_Add_Task+0x6>
     3a2:	00 d0       	rcall	.+0      	; 0x3a4 <CO_SCH_Add_Task+0x8>
     3a4:	cd b7       	in	r28, 0x3d	; 61
     3a6:	de b7       	in	r29, 0x3e	; 62
     3a8:	9a 83       	std	Y+2, r25	; 0x02
     3aa:	89 83       	std	Y+1, r24	; 0x01
     3ac:	6b 83       	std	Y+3, r22	; 0x03
     3ae:	4c 83       	std	Y+4, r20	; 0x04

     static UINT8_t Id = 0;
     if(Id < CO_SCH_MAX_TASKS){
     3b0:	80 91 fb 00 	lds	r24, 0x00FB
     3b4:	84 30       	cpi	r24, 0x04	; 4
     3b6:	08 f0       	brcs	.+2      	; 0x3ba <CO_SCH_Add_Task+0x1e>
     3b8:	5a c0       	rjmp	.+180    	; 0x46e <CO_SCH_Add_Task+0xd2>
        CO_SCH_Task[Id].pTask = PTASK;
     3ba:	80 91 fb 00 	lds	r24, 0x00FB
     3be:	28 2f       	mov	r18, r24
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	c9 01       	movw	r24, r18
     3c4:	88 0f       	add	r24, r24
     3c6:	99 1f       	adc	r25, r25
     3c8:	82 0f       	add	r24, r18
     3ca:	93 1f       	adc	r25, r19
     3cc:	88 0f       	add	r24, r24
     3ce:	99 1f       	adc	r25, r25
     3d0:	fc 01       	movw	r30, r24
     3d2:	e4 50       	subi	r30, 0x04	; 4
     3d4:	ff 4f       	sbci	r31, 0xFF	; 255
     3d6:	89 81       	ldd	r24, Y+1	; 0x01
     3d8:	9a 81       	ldd	r25, Y+2	; 0x02
     3da:	91 83       	std	Z+1, r25	; 0x01
     3dc:	80 83       	st	Z, r24
        CO_SCH_Task[Id].Delay = 1 + DELAY;
     3de:	80 91 fb 00 	lds	r24, 0x00FB
     3e2:	28 2f       	mov	r18, r24
     3e4:	30 e0       	ldi	r19, 0x00	; 0
     3e6:	8b 81       	ldd	r24, Y+3	; 0x03
     3e8:	48 2f       	mov	r20, r24
     3ea:	4f 5f       	subi	r20, 0xFF	; 255
     3ec:	c9 01       	movw	r24, r18
     3ee:	88 0f       	add	r24, r24
     3f0:	99 1f       	adc	r25, r25
     3f2:	82 0f       	add	r24, r18
     3f4:	93 1f       	adc	r25, r19
     3f6:	88 0f       	add	r24, r24
     3f8:	99 1f       	adc	r25, r25
     3fa:	fc 01       	movw	r30, r24
     3fc:	e1 50       	subi	r30, 0x01	; 1
     3fe:	ff 4f       	sbci	r31, 0xFF	; 255
     400:	40 83       	st	Z, r20
        CO_SCH_Task[Id].Period = PERIOD;
     402:	80 91 fb 00 	lds	r24, 0x00FB
     406:	28 2f       	mov	r18, r24
     408:	30 e0       	ldi	r19, 0x00	; 0
     40a:	c9 01       	movw	r24, r18
     40c:	88 0f       	add	r24, r24
     40e:	99 1f       	adc	r25, r25
     410:	82 0f       	add	r24, r18
     412:	93 1f       	adc	r25, r19
     414:	01 96       	adiw	r24, 0x01	; 1
     416:	88 0f       	add	r24, r24
     418:	99 1f       	adc	r25, r25
     41a:	fc 01       	movw	r30, r24
     41c:	e4 50       	subi	r30, 0x04	; 4
     41e:	ff 4f       	sbci	r31, 0xFF	; 255
     420:	8c 81       	ldd	r24, Y+4	; 0x04
     422:	80 83       	st	Z, r24
        CO_SCH_Task[Id].Run = 0;
     424:	80 91 fb 00 	lds	r24, 0x00FB
     428:	28 2f       	mov	r18, r24
     42a:	30 e0       	ldi	r19, 0x00	; 0
     42c:	c9 01       	movw	r24, r18
     42e:	88 0f       	add	r24, r24
     430:	99 1f       	adc	r25, r25
     432:	82 0f       	add	r24, r18
     434:	93 1f       	adc	r25, r19
     436:	88 0f       	add	r24, r24
     438:	99 1f       	adc	r25, r25
     43a:	fc 01       	movw	r30, r24
     43c:	ef 5f       	subi	r30, 0xFF	; 255
     43e:	fe 4f       	sbci	r31, 0xFE	; 254
     440:	10 82       	st	Z, r1
        CO_SCH_Task[Id].Id = Id;
     442:	80 91 fb 00 	lds	r24, 0x00FB
     446:	28 2f       	mov	r18, r24
     448:	30 e0       	ldi	r19, 0x00	; 0
     44a:	40 91 fb 00 	lds	r20, 0x00FB
     44e:	c9 01       	movw	r24, r18
     450:	88 0f       	add	r24, r24
     452:	99 1f       	adc	r25, r25
     454:	82 0f       	add	r24, r18
     456:	93 1f       	adc	r25, r19
     458:	88 0f       	add	r24, r24
     45a:	99 1f       	adc	r25, r25
     45c:	fc 01       	movw	r30, r24
     45e:	e0 50       	subi	r30, 0x00	; 0
     460:	ff 4f       	sbci	r31, 0xFF	; 255
     462:	40 83       	st	Z, r20
        Id++;
     464:	80 91 fb 00 	lds	r24, 0x00FB
     468:	8f 5f       	subi	r24, 0xFF	; 255
     46a:	80 93 fb 00 	sts	0x00FB, r24
     }
     else{
        /* Error: Scheduler is Full */
     }
}
     46e:	0f 90       	pop	r0
     470:	0f 90       	pop	r0
     472:	0f 90       	pop	r0
     474:	0f 90       	pop	r0
     476:	cf 91       	pop	r28
     478:	df 91       	pop	r29
     47a:	08 95       	ret

0000047c <CO_SCH_Dispatch_Tasks>:
/******************************************************************************/
void
CO_SCH_Dispatch_Tasks(void){
     47c:	df 93       	push	r29
     47e:	cf 93       	push	r28
     480:	0f 92       	push	r0
     482:	cd b7       	in	r28, 0x3d	; 61
     484:	de b7       	in	r29, 0x3e	; 62
	UINT8_t Id;
     if(TRUE == CO_SCH_Update){
     486:	80 91 fa 00 	lds	r24, 0x00FA
     48a:	81 30       	cpi	r24, 0x01	; 1
     48c:	09 f0       	breq	.+2      	; 0x490 <CO_SCH_Dispatch_Tasks+0x14>
     48e:	5e c0       	rjmp	.+188    	; 0x54c <CO_SCH_Dispatch_Tasks+0xd0>
        CO_SCH_Update_Tasks();
     490:	0e 94 aa 02 	call	0x554	; 0x554 <CO_SCH_Update_Tasks>
        for(Id = 0; Id < CO_SCH_MAX_TASKS; Id++){
     494:	19 82       	std	Y+1, r1	; 0x01
     496:	54 c0       	rjmp	.+168    	; 0x540 <CO_SCH_Dispatch_Tasks+0xc4>
            if(CO_SCH_Task[Id].Run > 0){
     498:	89 81       	ldd	r24, Y+1	; 0x01
     49a:	28 2f       	mov	r18, r24
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	c9 01       	movw	r24, r18
     4a0:	88 0f       	add	r24, r24
     4a2:	99 1f       	adc	r25, r25
     4a4:	82 0f       	add	r24, r18
     4a6:	93 1f       	adc	r25, r19
     4a8:	88 0f       	add	r24, r24
     4aa:	99 1f       	adc	r25, r25
     4ac:	fc 01       	movw	r30, r24
     4ae:	ef 5f       	subi	r30, 0xFF	; 255
     4b0:	fe 4f       	sbci	r31, 0xFE	; 254
     4b2:	80 81       	ld	r24, Z
     4b4:	88 23       	and	r24, r24
     4b6:	09 f4       	brne	.+2      	; 0x4ba <CO_SCH_Dispatch_Tasks+0x3e>
     4b8:	40 c0       	rjmp	.+128    	; 0x53a <CO_SCH_Dispatch_Tasks+0xbe>
               CO_SCH_Task[Id].pTask();
     4ba:	89 81       	ldd	r24, Y+1	; 0x01
     4bc:	28 2f       	mov	r18, r24
     4be:	30 e0       	ldi	r19, 0x00	; 0
     4c0:	c9 01       	movw	r24, r18
     4c2:	88 0f       	add	r24, r24
     4c4:	99 1f       	adc	r25, r25
     4c6:	82 0f       	add	r24, r18
     4c8:	93 1f       	adc	r25, r19
     4ca:	88 0f       	add	r24, r24
     4cc:	99 1f       	adc	r25, r25
     4ce:	fc 01       	movw	r30, r24
     4d0:	e4 50       	subi	r30, 0x04	; 4
     4d2:	ff 4f       	sbci	r31, 0xFF	; 255
     4d4:	01 90       	ld	r0, Z+
     4d6:	f0 81       	ld	r31, Z
     4d8:	e0 2d       	mov	r30, r0
     4da:	09 95       	icall
               CO_SCH_Task[Id].Run--;
     4dc:	89 81       	ldd	r24, Y+1	; 0x01
     4de:	28 2f       	mov	r18, r24
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	c9 01       	movw	r24, r18
     4e4:	88 0f       	add	r24, r24
     4e6:	99 1f       	adc	r25, r25
     4e8:	82 0f       	add	r24, r18
     4ea:	93 1f       	adc	r25, r19
     4ec:	88 0f       	add	r24, r24
     4ee:	99 1f       	adc	r25, r25
     4f0:	fc 01       	movw	r30, r24
     4f2:	ef 5f       	subi	r30, 0xFF	; 255
     4f4:	fe 4f       	sbci	r31, 0xFE	; 254
     4f6:	80 81       	ld	r24, Z
     4f8:	48 2f       	mov	r20, r24
     4fa:	41 50       	subi	r20, 0x01	; 1
     4fc:	c9 01       	movw	r24, r18
     4fe:	88 0f       	add	r24, r24
     500:	99 1f       	adc	r25, r25
     502:	82 0f       	add	r24, r18
     504:	93 1f       	adc	r25, r19
     506:	88 0f       	add	r24, r24
     508:	99 1f       	adc	r25, r25
     50a:	fc 01       	movw	r30, r24
     50c:	ef 5f       	subi	r30, 0xFF	; 255
     50e:	fe 4f       	sbci	r31, 0xFE	; 254
     510:	40 83       	st	Z, r20
               if(ENDED == CO_SCH_Task[Id].Period){
     512:	89 81       	ldd	r24, Y+1	; 0x01
     514:	28 2f       	mov	r18, r24
     516:	30 e0       	ldi	r19, 0x00	; 0
     518:	c9 01       	movw	r24, r18
     51a:	88 0f       	add	r24, r24
     51c:	99 1f       	adc	r25, r25
     51e:	82 0f       	add	r24, r18
     520:	93 1f       	adc	r25, r19
     522:	01 96       	adiw	r24, 0x01	; 1
     524:	88 0f       	add	r24, r24
     526:	99 1f       	adc	r25, r25
     528:	fc 01       	movw	r30, r24
     52a:	e4 50       	subi	r30, 0x04	; 4
     52c:	ff 4f       	sbci	r31, 0xFF	; 255
     52e:	80 81       	ld	r24, Z
     530:	88 23       	and	r24, r24
     532:	19 f4       	brne	.+6      	; 0x53a <CO_SCH_Dispatch_Tasks+0xbe>
                  CO_SCH_Delete_Task(Id);
     534:	89 81       	ldd	r24, Y+1	; 0x01
     536:	0e 94 4b 01 	call	0x296	; 0x296 <CO_SCH_Delete_Task>
void
CO_SCH_Dispatch_Tasks(void){
	UINT8_t Id;
     if(TRUE == CO_SCH_Update){
        CO_SCH_Update_Tasks();
        for(Id = 0; Id < CO_SCH_MAX_TASKS; Id++){
     53a:	89 81       	ldd	r24, Y+1	; 0x01
     53c:	8f 5f       	subi	r24, 0xFF	; 255
     53e:	89 83       	std	Y+1, r24	; 0x01
     540:	89 81       	ldd	r24, Y+1	; 0x01
     542:	84 30       	cpi	r24, 0x04	; 4
     544:	08 f4       	brcc	.+2      	; 0x548 <CO_SCH_Dispatch_Tasks+0xcc>
     546:	a8 cf       	rjmp	.-176    	; 0x498 <CO_SCH_Dispatch_Tasks+0x1c>
            }
            else{
               /* Task is not Ready */
            }
        }
        CO_SCH_Update = FALSE;
     548:	10 92 fa 00 	sts	0x00FA, r1
     }
}
     54c:	0f 90       	pop	r0
     54e:	cf 91       	pop	r28
     550:	df 91       	pop	r29
     552:	08 95       	ret

00000554 <CO_SCH_Update_Tasks>:
/******************************************************************************/
static void
CO_SCH_Update_Tasks(void){
     554:	df 93       	push	r29
     556:	cf 93       	push	r28
     558:	0f 92       	push	r0
     55a:	cd b7       	in	r28, 0x3d	; 61
     55c:	de b7       	in	r29, 0x3e	; 62
	UINT8_t Id;
	for (Id = 0; Id < CO_SCH_MAX_TASKS; Id++) {
     55e:	19 82       	std	Y+1, r1	; 0x01
     560:	78 c0       	rjmp	.+240    	; 0x652 <CO_SCH_Update_Tasks+0xfe>
		if (CO_SCH_Task[Id].pTask != NULL_PTR) {
     562:	89 81       	ldd	r24, Y+1	; 0x01
     564:	28 2f       	mov	r18, r24
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	c9 01       	movw	r24, r18
     56a:	88 0f       	add	r24, r24
     56c:	99 1f       	adc	r25, r25
     56e:	82 0f       	add	r24, r18
     570:	93 1f       	adc	r25, r19
     572:	88 0f       	add	r24, r24
     574:	99 1f       	adc	r25, r25
     576:	fc 01       	movw	r30, r24
     578:	e4 50       	subi	r30, 0x04	; 4
     57a:	ff 4f       	sbci	r31, 0xFF	; 255
     57c:	80 81       	ld	r24, Z
     57e:	91 81       	ldd	r25, Z+1	; 0x01
     580:	00 97       	sbiw	r24, 0x00	; 0
     582:	09 f4       	brne	.+2      	; 0x586 <CO_SCH_Update_Tasks+0x32>
     584:	63 c0       	rjmp	.+198    	; 0x64c <CO_SCH_Update_Tasks+0xf8>
			CO_SCH_Task[Id].Delay--;
     586:	89 81       	ldd	r24, Y+1	; 0x01
     588:	28 2f       	mov	r18, r24
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	c9 01       	movw	r24, r18
     58e:	88 0f       	add	r24, r24
     590:	99 1f       	adc	r25, r25
     592:	82 0f       	add	r24, r18
     594:	93 1f       	adc	r25, r19
     596:	88 0f       	add	r24, r24
     598:	99 1f       	adc	r25, r25
     59a:	fc 01       	movw	r30, r24
     59c:	e1 50       	subi	r30, 0x01	; 1
     59e:	ff 4f       	sbci	r31, 0xFF	; 255
     5a0:	80 81       	ld	r24, Z
     5a2:	48 2f       	mov	r20, r24
     5a4:	41 50       	subi	r20, 0x01	; 1
     5a6:	c9 01       	movw	r24, r18
     5a8:	88 0f       	add	r24, r24
     5aa:	99 1f       	adc	r25, r25
     5ac:	82 0f       	add	r24, r18
     5ae:	93 1f       	adc	r25, r19
     5b0:	88 0f       	add	r24, r24
     5b2:	99 1f       	adc	r25, r25
     5b4:	fc 01       	movw	r30, r24
     5b6:	e1 50       	subi	r30, 0x01	; 1
     5b8:	ff 4f       	sbci	r31, 0xFF	; 255
     5ba:	40 83       	st	Z, r20
			if (ENDED == CO_SCH_Task[Id].Delay) {
     5bc:	89 81       	ldd	r24, Y+1	; 0x01
     5be:	28 2f       	mov	r18, r24
     5c0:	30 e0       	ldi	r19, 0x00	; 0
     5c2:	c9 01       	movw	r24, r18
     5c4:	88 0f       	add	r24, r24
     5c6:	99 1f       	adc	r25, r25
     5c8:	82 0f       	add	r24, r18
     5ca:	93 1f       	adc	r25, r19
     5cc:	88 0f       	add	r24, r24
     5ce:	99 1f       	adc	r25, r25
     5d0:	fc 01       	movw	r30, r24
     5d2:	e1 50       	subi	r30, 0x01	; 1
     5d4:	ff 4f       	sbci	r31, 0xFF	; 255
     5d6:	80 81       	ld	r24, Z
     5d8:	88 23       	and	r24, r24
     5da:	c1 f5       	brne	.+112    	; 0x64c <CO_SCH_Update_Tasks+0xf8>
				CO_SCH_Task[Id].Run++;
     5dc:	89 81       	ldd	r24, Y+1	; 0x01
     5de:	28 2f       	mov	r18, r24
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	c9 01       	movw	r24, r18
     5e4:	88 0f       	add	r24, r24
     5e6:	99 1f       	adc	r25, r25
     5e8:	82 0f       	add	r24, r18
     5ea:	93 1f       	adc	r25, r19
     5ec:	88 0f       	add	r24, r24
     5ee:	99 1f       	adc	r25, r25
     5f0:	fc 01       	movw	r30, r24
     5f2:	ef 5f       	subi	r30, 0xFF	; 255
     5f4:	fe 4f       	sbci	r31, 0xFE	; 254
     5f6:	80 81       	ld	r24, Z
     5f8:	48 2f       	mov	r20, r24
     5fa:	4f 5f       	subi	r20, 0xFF	; 255
     5fc:	c9 01       	movw	r24, r18
     5fe:	88 0f       	add	r24, r24
     600:	99 1f       	adc	r25, r25
     602:	82 0f       	add	r24, r18
     604:	93 1f       	adc	r25, r19
     606:	88 0f       	add	r24, r24
     608:	99 1f       	adc	r25, r25
     60a:	fc 01       	movw	r30, r24
     60c:	ef 5f       	subi	r30, 0xFF	; 255
     60e:	fe 4f       	sbci	r31, 0xFE	; 254
     610:	40 83       	st	Z, r20
				CO_SCH_Task[Id].Delay = CO_SCH_Task[Id].Period;
     612:	89 81       	ldd	r24, Y+1	; 0x01
     614:	48 2f       	mov	r20, r24
     616:	50 e0       	ldi	r21, 0x00	; 0
     618:	89 81       	ldd	r24, Y+1	; 0x01
     61a:	28 2f       	mov	r18, r24
     61c:	30 e0       	ldi	r19, 0x00	; 0
     61e:	c9 01       	movw	r24, r18
     620:	88 0f       	add	r24, r24
     622:	99 1f       	adc	r25, r25
     624:	82 0f       	add	r24, r18
     626:	93 1f       	adc	r25, r19
     628:	01 96       	adiw	r24, 0x01	; 1
     62a:	88 0f       	add	r24, r24
     62c:	99 1f       	adc	r25, r25
     62e:	fc 01       	movw	r30, r24
     630:	e4 50       	subi	r30, 0x04	; 4
     632:	ff 4f       	sbci	r31, 0xFF	; 255
     634:	20 81       	ld	r18, Z
     636:	ca 01       	movw	r24, r20
     638:	88 0f       	add	r24, r24
     63a:	99 1f       	adc	r25, r25
     63c:	84 0f       	add	r24, r20
     63e:	95 1f       	adc	r25, r21
     640:	88 0f       	add	r24, r24
     642:	99 1f       	adc	r25, r25
     644:	fc 01       	movw	r30, r24
     646:	e1 50       	subi	r30, 0x01	; 1
     648:	ff 4f       	sbci	r31, 0xFF	; 255
     64a:	20 83       	st	Z, r18
}
/******************************************************************************/
static void
CO_SCH_Update_Tasks(void){
	UINT8_t Id;
	for (Id = 0; Id < CO_SCH_MAX_TASKS; Id++) {
     64c:	89 81       	ldd	r24, Y+1	; 0x01
     64e:	8f 5f       	subi	r24, 0xFF	; 255
     650:	89 83       	std	Y+1, r24	; 0x01
     652:	89 81       	ldd	r24, Y+1	; 0x01
     654:	84 30       	cpi	r24, 0x04	; 4
     656:	08 f4       	brcc	.+2      	; 0x65a <CO_SCH_Update_Tasks+0x106>
     658:	84 cf       	rjmp	.-248    	; 0x562 <CO_SCH_Update_Tasks+0xe>
			}
		} else {
			/* Error: Undefined Task */
		}
	}
}
     65a:	0f 90       	pop	r0
     65c:	cf 91       	pop	r28
     65e:	df 91       	pop	r29
     660:	08 95       	ret

00000662 <CO_SCH_Start>:
/******************************************************************************/
void
CO_SCH_Start(void){
     662:	df 93       	push	r29
     664:	cf 93       	push	r28
     666:	cd b7       	in	r28, 0x3d	; 61
     668:	de b7       	in	r29, 0x3e	; 62
     /* To Do: Enable Interrupt Here */
	TMR0_Set_Prescaler(TMR0_DF64);				/* Tick = 32 us */
     66a:	83 e0       	ldi	r24, 0x03	; 3
     66c:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <TMR0_Set_Prescaler>
	TMR0_Set_Buffer(TMR0_OCR, TMR_INT_CYCLE); 		/* 1 ms */
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	6d e7       	ldi	r22, 0x7D	; 125
     674:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <TMR0_Set_Buffer>
	GIE;
     678:	af e5       	ldi	r26, 0x5F	; 95
     67a:	b0 e0       	ldi	r27, 0x00	; 0
     67c:	ef e5       	ldi	r30, 0x5F	; 95
     67e:	f0 e0       	ldi	r31, 0x00	; 0
     680:	80 81       	ld	r24, Z
     682:	80 68       	ori	r24, 0x80	; 128
     684:	8c 93       	st	X, r24
}
     686:	cf 91       	pop	r28
     688:	df 91       	pop	r29
     68a:	08 95       	ret

0000068c <CO_SCH_Stop>:
/******************************************************************************/
void
CO_SCH_Stop(void){
     68c:	df 93       	push	r29
     68e:	cf 93       	push	r28
     690:	cd b7       	in	r28, 0x3d	; 61
     692:	de b7       	in	r29, 0x3e	; 62
	GIC;
     694:	af e5       	ldi	r26, 0x5F	; 95
     696:	b0 e0       	ldi	r27, 0x00	; 0
     698:	ef e5       	ldi	r30, 0x5F	; 95
     69a:	f0 e0       	ldi	r31, 0x00	; 0
     69c:	80 81       	ld	r24, Z
     69e:	8f 77       	andi	r24, 0x7F	; 127
     6a0:	8c 93       	st	X, r24
	TMR0_Set_Prescaler(TMR0_NO_CLK);
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <TMR0_Set_Prescaler>
}
     6a8:	cf 91       	pop	r28
     6aa:	df 91       	pop	r29
     6ac:	08 95       	ret

000006ae <__vector_10>:
void CO_SCH_Sleep(void){
     /* To Do: */
}
#endif
/******************************************************************************/
ISR(TIMER0_COMP_VECT){
     6ae:	1f 92       	push	r1
     6b0:	0f 92       	push	r0
     6b2:	0f b6       	in	r0, 0x3f	; 63
     6b4:	0f 92       	push	r0
     6b6:	11 24       	eor	r1, r1
     6b8:	8f 93       	push	r24
     6ba:	df 93       	push	r29
     6bc:	cf 93       	push	r28
     6be:	cd b7       	in	r28, 0x3d	; 61
     6c0:	de b7       	in	r29, 0x3e	; 62
     CO_SCH_Update = TRUE;
     6c2:	81 e0       	ldi	r24, 0x01	; 1
     6c4:	80 93 fa 00 	sts	0x00FA, r24
}
     6c8:	cf 91       	pop	r28
     6ca:	df 91       	pop	r29
     6cc:	8f 91       	pop	r24
     6ce:	0f 90       	pop	r0
     6d0:	0f be       	out	0x3f, r0	; 63
     6d2:	0f 90       	pop	r0
     6d4:	1f 90       	pop	r1
     6d6:	18 95       	reti

000006d8 <DIO_INIT>:
#include "DIO_CFG.h"
#include "DIO.h"
/****************************************************************************/

void DIO_INIT(void)
{
     6d8:	df 93       	push	r29
     6da:	cf 93       	push	r28
     6dc:	00 d0       	rcall	.+0      	; 0x6de <DIO_INIT+0x6>
     6de:	00 d0       	rcall	.+0      	; 0x6e0 <DIO_INIT+0x8>
     6e0:	cd b7       	in	r28, 0x3d	; 61
     6e2:	de b7       	in	r29, 0x3e	; 62
	DIO_PIN_ID_t Pin_Id;
	DIO_PORT_ID_t Port_Id;
	volatile UINT8_t* const Reg[DIO_MAX_PORTS] = { DDRA_ADD, DDRB_ADD, DDRC_ADD, DDRD_ADD };
	for (Pin_Id = DIO_PINA0; Pin_Id < DIO_MAX_PINS; Pin_Id++) {
     6e4:	1a 82       	std	Y+2, r1	; 0x02
     6e6:	a2 c0       	rjmp	.+324    	; 0x82c <DIO_INIT+0x154>
		Port_Id = Pin_Id / 8;
     6e8:	8a 81       	ldd	r24, Y+2	; 0x02
     6ea:	86 95       	lsr	r24
     6ec:	86 95       	lsr	r24
     6ee:	86 95       	lsr	r24
     6f0:	89 83       	std	Y+1, r24	; 0x01
		switch (Pin_Direction[Pin_Id]) {
     6f2:	8a 81       	ldd	r24, Y+2	; 0x02
     6f4:	88 2f       	mov	r24, r24
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	fc 01       	movw	r30, r24
     6fa:	ed 56       	subi	r30, 0x6D	; 109
     6fc:	ff 4f       	sbci	r31, 0xFF	; 255
     6fe:	80 81       	ld	r24, Z
     700:	28 2f       	mov	r18, r24
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	3c 83       	std	Y+4, r19	; 0x04
     706:	2b 83       	std	Y+3, r18	; 0x03
     708:	8b 81       	ldd	r24, Y+3	; 0x03
     70a:	9c 81       	ldd	r25, Y+4	; 0x04
     70c:	81 30       	cpi	r24, 0x01	; 1
     70e:	91 05       	cpc	r25, r1
     710:	59 f0       	breq	.+22     	; 0x728 <DIO_INIT+0x50>
     712:	2b 81       	ldd	r18, Y+3	; 0x03
     714:	3c 81       	ldd	r19, Y+4	; 0x04
     716:	22 30       	cpi	r18, 0x02	; 2
     718:	31 05       	cpc	r19, r1
     71a:	09 f4       	brne	.+2      	; 0x71e <DIO_INIT+0x46>
     71c:	59 c0       	rjmp	.+178    	; 0x7d0 <DIO_INIT+0xf8>
     71e:	8b 81       	ldd	r24, Y+3	; 0x03
     720:	9c 81       	ldd	r25, Y+4	; 0x04
     722:	00 97       	sbiw	r24, 0x00	; 0
     724:	49 f1       	breq	.+82     	; 0x778 <DIO_INIT+0xa0>
     726:	7f c0       	rjmp	.+254    	; 0x826 <DIO_INIT+0x14e>
		case DIO_PIN_DIRECTION_OUTPUT:
			SET_BIT(*Reg[Port_Id], Pin_Id % 8);
     728:	89 81       	ldd	r24, Y+1	; 0x01
     72a:	88 2f       	mov	r24, r24
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	88 0f       	add	r24, r24
     730:	99 1f       	adc	r25, r25
     732:	fc 01       	movw	r30, r24
     734:	ee 52       	subi	r30, 0x2E	; 46
     736:	ff 4f       	sbci	r31, 0xFF	; 255
     738:	a0 81       	ld	r26, Z
     73a:	b1 81       	ldd	r27, Z+1	; 0x01
     73c:	89 81       	ldd	r24, Y+1	; 0x01
     73e:	88 2f       	mov	r24, r24
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	88 0f       	add	r24, r24
     744:	99 1f       	adc	r25, r25
     746:	fc 01       	movw	r30, r24
     748:	ee 52       	subi	r30, 0x2E	; 46
     74a:	ff 4f       	sbci	r31, 0xFF	; 255
     74c:	01 90       	ld	r0, Z+
     74e:	f0 81       	ld	r31, Z
     750:	e0 2d       	mov	r30, r0
     752:	80 81       	ld	r24, Z
     754:	48 2f       	mov	r20, r24
     756:	8a 81       	ldd	r24, Y+2	; 0x02
     758:	88 2f       	mov	r24, r24
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	9c 01       	movw	r18, r24
     75e:	27 70       	andi	r18, 0x07	; 7
     760:	30 70       	andi	r19, 0x00	; 0
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	02 2e       	mov	r0, r18
     768:	02 c0       	rjmp	.+4      	; 0x76e <DIO_INIT+0x96>
     76a:	88 0f       	add	r24, r24
     76c:	99 1f       	adc	r25, r25
     76e:	0a 94       	dec	r0
     770:	e2 f7       	brpl	.-8      	; 0x76a <DIO_INIT+0x92>
     772:	84 2b       	or	r24, r20
     774:	8c 93       	st	X, r24
     776:	57 c0       	rjmp	.+174    	; 0x826 <DIO_INIT+0x14e>
			break;
		case DIO_PIN_DIRECTION_INPUT_PULL_UP:
			CLEAR_BIT(*Reg[Port_Id], Pin_Id % 8);
     778:	89 81       	ldd	r24, Y+1	; 0x01
     77a:	88 2f       	mov	r24, r24
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	88 0f       	add	r24, r24
     780:	99 1f       	adc	r25, r25
     782:	fc 01       	movw	r30, r24
     784:	ee 52       	subi	r30, 0x2E	; 46
     786:	ff 4f       	sbci	r31, 0xFF	; 255
     788:	a0 81       	ld	r26, Z
     78a:	b1 81       	ldd	r27, Z+1	; 0x01
     78c:	89 81       	ldd	r24, Y+1	; 0x01
     78e:	88 2f       	mov	r24, r24
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	88 0f       	add	r24, r24
     794:	99 1f       	adc	r25, r25
     796:	fc 01       	movw	r30, r24
     798:	ee 52       	subi	r30, 0x2E	; 46
     79a:	ff 4f       	sbci	r31, 0xFF	; 255
     79c:	01 90       	ld	r0, Z+
     79e:	f0 81       	ld	r31, Z
     7a0:	e0 2d       	mov	r30, r0
     7a2:	80 81       	ld	r24, Z
     7a4:	48 2f       	mov	r20, r24
     7a6:	8a 81       	ldd	r24, Y+2	; 0x02
     7a8:	88 2f       	mov	r24, r24
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	9c 01       	movw	r18, r24
     7ae:	27 70       	andi	r18, 0x07	; 7
     7b0:	30 70       	andi	r19, 0x00	; 0
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	02 c0       	rjmp	.+4      	; 0x7bc <DIO_INIT+0xe4>
     7b8:	88 0f       	add	r24, r24
     7ba:	99 1f       	adc	r25, r25
     7bc:	2a 95       	dec	r18
     7be:	e2 f7       	brpl	.-8      	; 0x7b8 <DIO_INIT+0xe0>
     7c0:	80 95       	com	r24
     7c2:	84 23       	and	r24, r20
     7c4:	8c 93       	st	X, r24
			DIO_WRITE_PIN_VALUE(Pin_Id, DIO_PIN_STATE_HIGH);
     7c6:	8a 81       	ldd	r24, Y+2	; 0x02
     7c8:	61 e0       	ldi	r22, 0x01	; 1
     7ca:	0e 94 21 04 	call	0x842	; 0x842 <DIO_WRITE_PIN_VALUE>
     7ce:	2b c0       	rjmp	.+86     	; 0x826 <DIO_INIT+0x14e>
			break;
		case DIO_PIN_DIRECTION_INPUT_FLOAT:
			CLEAR_BIT(*Reg[Port_Id], Pin_Id % 8);
     7d0:	89 81       	ldd	r24, Y+1	; 0x01
     7d2:	88 2f       	mov	r24, r24
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	88 0f       	add	r24, r24
     7d8:	99 1f       	adc	r25, r25
     7da:	fc 01       	movw	r30, r24
     7dc:	ee 52       	subi	r30, 0x2E	; 46
     7de:	ff 4f       	sbci	r31, 0xFF	; 255
     7e0:	a0 81       	ld	r26, Z
     7e2:	b1 81       	ldd	r27, Z+1	; 0x01
     7e4:	89 81       	ldd	r24, Y+1	; 0x01
     7e6:	88 2f       	mov	r24, r24
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	88 0f       	add	r24, r24
     7ec:	99 1f       	adc	r25, r25
     7ee:	fc 01       	movw	r30, r24
     7f0:	ee 52       	subi	r30, 0x2E	; 46
     7f2:	ff 4f       	sbci	r31, 0xFF	; 255
     7f4:	01 90       	ld	r0, Z+
     7f6:	f0 81       	ld	r31, Z
     7f8:	e0 2d       	mov	r30, r0
     7fa:	80 81       	ld	r24, Z
     7fc:	48 2f       	mov	r20, r24
     7fe:	8a 81       	ldd	r24, Y+2	; 0x02
     800:	88 2f       	mov	r24, r24
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	9c 01       	movw	r18, r24
     806:	27 70       	andi	r18, 0x07	; 7
     808:	30 70       	andi	r19, 0x00	; 0
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	02 c0       	rjmp	.+4      	; 0x814 <DIO_INIT+0x13c>
     810:	88 0f       	add	r24, r24
     812:	99 1f       	adc	r25, r25
     814:	2a 95       	dec	r18
     816:	e2 f7       	brpl	.-8      	; 0x810 <DIO_INIT+0x138>
     818:	80 95       	com	r24
     81a:	84 23       	and	r24, r20
     81c:	8c 93       	st	X, r24
			DIO_WRITE_PIN_VALUE(Pin_Id, DIO_PIN_STATE_LOW);
     81e:	8a 81       	ldd	r24, Y+2	; 0x02
     820:	60 e0       	ldi	r22, 0x00	; 0
     822:	0e 94 21 04 	call	0x842	; 0x842 <DIO_WRITE_PIN_VALUE>
void DIO_INIT(void)
{
	DIO_PIN_ID_t Pin_Id;
	DIO_PORT_ID_t Port_Id;
	volatile UINT8_t* const Reg[DIO_MAX_PORTS] = { DDRA_ADD, DDRB_ADD, DDRC_ADD, DDRD_ADD };
	for (Pin_Id = DIO_PINA0; Pin_Id < DIO_MAX_PINS; Pin_Id++) {
     826:	8a 81       	ldd	r24, Y+2	; 0x02
     828:	8f 5f       	subi	r24, 0xFF	; 255
     82a:	8a 83       	std	Y+2, r24	; 0x02
     82c:	8a 81       	ldd	r24, Y+2	; 0x02
     82e:	80 32       	cpi	r24, 0x20	; 32
     830:	08 f4       	brcc	.+2      	; 0x834 <DIO_INIT+0x15c>
     832:	5a cf       	rjmp	.-332    	; 0x6e8 <DIO_INIT+0x10>
		break;
		default:
			break;
		}
	}
}
     834:	0f 90       	pop	r0
     836:	0f 90       	pop	r0
     838:	0f 90       	pop	r0
     83a:	0f 90       	pop	r0
     83c:	cf 91       	pop	r28
     83e:	df 91       	pop	r29
     840:	08 95       	ret

00000842 <DIO_WRITE_PIN_VALUE>:
/****************************************************************************/
void DIO_WRITE_PIN_VALUE(const DIO_PIN_ID_t PIN_ID, const DIO_PIN_STATE_t PIN_STATE){
     842:	df 93       	push	r29
     844:	cf 93       	push	r28
     846:	00 d0       	rcall	.+0      	; 0x848 <DIO_WRITE_PIN_VALUE+0x6>
     848:	00 d0       	rcall	.+0      	; 0x84a <DIO_WRITE_PIN_VALUE+0x8>
     84a:	0f 92       	push	r0
     84c:	cd b7       	in	r28, 0x3d	; 61
     84e:	de b7       	in	r29, 0x3e	; 62
     850:	8a 83       	std	Y+2, r24	; 0x02
     852:	6b 83       	std	Y+3, r22	; 0x03
	volatile UINT8_t* const Reg[DIO_MAX_PORTS] = { PORTA_ADD, PORTB_ADD, PORTC_ADD, PORTD_ADD };
	DIO_PORT_ID_t Port_Id = PIN_ID / 8;
     854:	8a 81       	ldd	r24, Y+2	; 0x02
     856:	86 95       	lsr	r24
     858:	86 95       	lsr	r24
     85a:	86 95       	lsr	r24
     85c:	89 83       	std	Y+1, r24	; 0x01
	switch (PIN_STATE) {
     85e:	8b 81       	ldd	r24, Y+3	; 0x03
     860:	28 2f       	mov	r18, r24
     862:	30 e0       	ldi	r19, 0x00	; 0
     864:	3d 83       	std	Y+5, r19	; 0x05
     866:	2c 83       	std	Y+4, r18	; 0x04
     868:	8c 81       	ldd	r24, Y+4	; 0x04
     86a:	9d 81       	ldd	r25, Y+5	; 0x05
     86c:	00 97       	sbiw	r24, 0x00	; 0
     86e:	71 f1       	breq	.+92     	; 0x8cc <__stack+0x6d>
     870:	2c 81       	ldd	r18, Y+4	; 0x04
     872:	3d 81       	ldd	r19, Y+5	; 0x05
     874:	21 30       	cpi	r18, 0x01	; 1
     876:	31 05       	cpc	r19, r1
     878:	09 f0       	breq	.+2      	; 0x87c <__stack+0x1d>
     87a:	50 c0       	rjmp	.+160    	; 0x91c <__stack+0xbd>
	case DIO_PIN_STATE_HIGH:
		SET_BIT(*Reg[Port_Id], PIN_ID % 8);
     87c:	89 81       	ldd	r24, Y+1	; 0x01
     87e:	88 2f       	mov	r24, r24
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	88 0f       	add	r24, r24
     884:	99 1f       	adc	r25, r25
     886:	fc 01       	movw	r30, r24
     888:	e6 52       	subi	r30, 0x26	; 38
     88a:	ff 4f       	sbci	r31, 0xFF	; 255
     88c:	a0 81       	ld	r26, Z
     88e:	b1 81       	ldd	r27, Z+1	; 0x01
     890:	89 81       	ldd	r24, Y+1	; 0x01
     892:	88 2f       	mov	r24, r24
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	88 0f       	add	r24, r24
     898:	99 1f       	adc	r25, r25
     89a:	fc 01       	movw	r30, r24
     89c:	e6 52       	subi	r30, 0x26	; 38
     89e:	ff 4f       	sbci	r31, 0xFF	; 255
     8a0:	01 90       	ld	r0, Z+
     8a2:	f0 81       	ld	r31, Z
     8a4:	e0 2d       	mov	r30, r0
     8a6:	80 81       	ld	r24, Z
     8a8:	48 2f       	mov	r20, r24
     8aa:	8a 81       	ldd	r24, Y+2	; 0x02
     8ac:	88 2f       	mov	r24, r24
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	9c 01       	movw	r18, r24
     8b2:	27 70       	andi	r18, 0x07	; 7
     8b4:	30 70       	andi	r19, 0x00	; 0
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	02 2e       	mov	r0, r18
     8bc:	02 c0       	rjmp	.+4      	; 0x8c2 <__stack+0x63>
     8be:	88 0f       	add	r24, r24
     8c0:	99 1f       	adc	r25, r25
     8c2:	0a 94       	dec	r0
     8c4:	e2 f7       	brpl	.-8      	; 0x8be <__stack+0x5f>
     8c6:	84 2b       	or	r24, r20
     8c8:	8c 93       	st	X, r24
     8ca:	28 c0       	rjmp	.+80     	; 0x91c <__stack+0xbd>
		break;
	case DIO_PIN_STATE_LOW:
		CLEAR_BIT(*Reg[Port_Id], PIN_ID % 8);
     8cc:	89 81       	ldd	r24, Y+1	; 0x01
     8ce:	88 2f       	mov	r24, r24
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	88 0f       	add	r24, r24
     8d4:	99 1f       	adc	r25, r25
     8d6:	fc 01       	movw	r30, r24
     8d8:	e6 52       	subi	r30, 0x26	; 38
     8da:	ff 4f       	sbci	r31, 0xFF	; 255
     8dc:	a0 81       	ld	r26, Z
     8de:	b1 81       	ldd	r27, Z+1	; 0x01
     8e0:	89 81       	ldd	r24, Y+1	; 0x01
     8e2:	88 2f       	mov	r24, r24
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	88 0f       	add	r24, r24
     8e8:	99 1f       	adc	r25, r25
     8ea:	fc 01       	movw	r30, r24
     8ec:	e6 52       	subi	r30, 0x26	; 38
     8ee:	ff 4f       	sbci	r31, 0xFF	; 255
     8f0:	01 90       	ld	r0, Z+
     8f2:	f0 81       	ld	r31, Z
     8f4:	e0 2d       	mov	r30, r0
     8f6:	80 81       	ld	r24, Z
     8f8:	48 2f       	mov	r20, r24
     8fa:	8a 81       	ldd	r24, Y+2	; 0x02
     8fc:	88 2f       	mov	r24, r24
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	9c 01       	movw	r18, r24
     902:	27 70       	andi	r18, 0x07	; 7
     904:	30 70       	andi	r19, 0x00	; 0
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	02 2e       	mov	r0, r18
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__stack+0xb3>
     90e:	88 0f       	add	r24, r24
     910:	99 1f       	adc	r25, r25
     912:	0a 94       	dec	r0
     914:	e2 f7       	brpl	.-8      	; 0x90e <__stack+0xaf>
     916:	80 95       	com	r24
     918:	84 23       	and	r24, r20
     91a:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
     91c:	0f 90       	pop	r0
     91e:	0f 90       	pop	r0
     920:	0f 90       	pop	r0
     922:	0f 90       	pop	r0
     924:	0f 90       	pop	r0
     926:	cf 91       	pop	r28
     928:	df 91       	pop	r29
     92a:	08 95       	ret

0000092c <DIO_READ_PIN_VALUE>:
/****************************************************************************/
DIO_PIN_STATE_t DIO_READ_PIN_VALUE(const DIO_PIN_ID_t PIN_ID){
     92c:	df 93       	push	r29
     92e:	cf 93       	push	r28
     930:	00 d0       	rcall	.+0      	; 0x932 <DIO_READ_PIN_VALUE+0x6>
     932:	0f 92       	push	r0
     934:	cd b7       	in	r28, 0x3d	; 61
     936:	de b7       	in	r29, 0x3e	; 62
     938:	8b 83       	std	Y+3, r24	; 0x03
	volatile UINT8_t* const Reg[DIO_MAX_PORTS] = { PINA_ADD, PINB_ADD, PINC_ADD, PIND_ADD };
	DIO_PORT_ID_t Port_Id = PIN_ID / 8;
     93a:	8b 81       	ldd	r24, Y+3	; 0x03
     93c:	86 95       	lsr	r24
     93e:	86 95       	lsr	r24
     940:	86 95       	lsr	r24
     942:	8a 83       	std	Y+2, r24	; 0x02
	DIO_PIN_STATE_t State = DIO_PIN_STATE_LOW;
     944:	19 82       	std	Y+1, r1	; 0x01
	if(DIO_PIN_STATE_HIGH == GET_BIT(*Reg[Port_Id], PIN_ID % 8)){
     946:	8a 81       	ldd	r24, Y+2	; 0x02
     948:	88 2f       	mov	r24, r24
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	88 0f       	add	r24, r24
     94e:	99 1f       	adc	r25, r25
     950:	fc 01       	movw	r30, r24
     952:	ee 51       	subi	r30, 0x1E	; 30
     954:	ff 4f       	sbci	r31, 0xFF	; 255
     956:	01 90       	ld	r0, Z+
     958:	f0 81       	ld	r31, Z
     95a:	e0 2d       	mov	r30, r0
     95c:	80 81       	ld	r24, Z
     95e:	28 2f       	mov	r18, r24
     960:	30 e0       	ldi	r19, 0x00	; 0
     962:	8b 81       	ldd	r24, Y+3	; 0x03
     964:	88 2f       	mov	r24, r24
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	87 70       	andi	r24, 0x07	; 7
     96a:	90 70       	andi	r25, 0x00	; 0
     96c:	a9 01       	movw	r20, r18
     96e:	02 c0       	rjmp	.+4      	; 0x974 <DIO_READ_PIN_VALUE+0x48>
     970:	55 95       	asr	r21
     972:	47 95       	ror	r20
     974:	8a 95       	dec	r24
     976:	e2 f7       	brpl	.-8      	; 0x970 <DIO_READ_PIN_VALUE+0x44>
     978:	ca 01       	movw	r24, r20
     97a:	81 70       	andi	r24, 0x01	; 1
     97c:	90 70       	andi	r25, 0x00	; 0
     97e:	88 23       	and	r24, r24
     980:	11 f0       	breq	.+4      	; 0x986 <DIO_READ_PIN_VALUE+0x5a>
		State = DIO_PIN_STATE_HIGH;
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	89 83       	std	Y+1, r24	; 0x01
	}
	return State;
     986:	89 81       	ldd	r24, Y+1	; 0x01
}
     988:	0f 90       	pop	r0
     98a:	0f 90       	pop	r0
     98c:	0f 90       	pop	r0
     98e:	cf 91       	pop	r28
     990:	df 91       	pop	r29
     992:	08 95       	ret

00000994 <DIO_WRITE_PORT>:
/****************************************************************************/
void DIO_WRITE_PORT(const DIO_PORT_ID_t PORT_ID, const UINT8_t VALUE){
     994:	df 93       	push	r29
     996:	cf 93       	push	r28
     998:	00 d0       	rcall	.+0      	; 0x99a <DIO_WRITE_PORT+0x6>
     99a:	cd b7       	in	r28, 0x3d	; 61
     99c:	de b7       	in	r29, 0x3e	; 62
     99e:	89 83       	std	Y+1, r24	; 0x01
     9a0:	6a 83       	std	Y+2, r22	; 0x02
	volatile UINT8_t* const Reg[DIO_MAX_PORTS] = { PORTA_ADD, PORTB_ADD, PORTC_ADD, PORTD_ADD };
	*Reg[PORT_ID] = VALUE;
     9a2:	89 81       	ldd	r24, Y+1	; 0x01
     9a4:	88 2f       	mov	r24, r24
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	88 0f       	add	r24, r24
     9aa:	99 1f       	adc	r25, r25
     9ac:	fc 01       	movw	r30, r24
     9ae:	e6 51       	subi	r30, 0x16	; 22
     9b0:	ff 4f       	sbci	r31, 0xFF	; 255
     9b2:	01 90       	ld	r0, Z+
     9b4:	f0 81       	ld	r31, Z
     9b6:	e0 2d       	mov	r30, r0
     9b8:	8a 81       	ldd	r24, Y+2	; 0x02
     9ba:	80 83       	st	Z, r24
}
     9bc:	0f 90       	pop	r0
     9be:	0f 90       	pop	r0
     9c0:	cf 91       	pop	r28
     9c2:	df 91       	pop	r29
     9c4:	08 95       	ret

000009c6 <DIO_Read_PORT>:
/****************************************************************************/
UINT8_t DIO_Read_PORT(const DIO_PORT_ID_t PORT_ID){
     9c6:	df 93       	push	r29
     9c8:	cf 93       	push	r28
     9ca:	0f 92       	push	r0
     9cc:	cd b7       	in	r28, 0x3d	; 61
     9ce:	de b7       	in	r29, 0x3e	; 62
     9d0:	89 83       	std	Y+1, r24	; 0x01
	volatile UINT8_t* const Reg[DIO_MAX_PORTS] = { PINA_ADD, PINB_ADD, PINC_ADD, PIND_ADD };
	return *Reg[PORT_ID];
     9d2:	89 81       	ldd	r24, Y+1	; 0x01
     9d4:	88 2f       	mov	r24, r24
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	88 0f       	add	r24, r24
     9da:	99 1f       	adc	r25, r25
     9dc:	fc 01       	movw	r30, r24
     9de:	ee 50       	subi	r30, 0x0E	; 14
     9e0:	ff 4f       	sbci	r31, 0xFF	; 255
     9e2:	01 90       	ld	r0, Z+
     9e4:	f0 81       	ld	r31, Z
     9e6:	e0 2d       	mov	r30, r0
     9e8:	80 81       	ld	r24, Z
}
     9ea:	0f 90       	pop	r0
     9ec:	cf 91       	pop	r28
     9ee:	df 91       	pop	r29
     9f0:	08 95       	ret

000009f2 <KEYPAD_Init>:
/****************************************************************************/
static CHAR_t KEYPAD_Arr[KEYPAD_MAX_NO_OF_BUFFERS];
static QUEUE_t KEYPAD_Queue;
/****************************************************************************/
void KEYPAD_Init(void)
{
     9f2:	df 93       	push	r29
     9f4:	cf 93       	push	r28
     9f6:	cd b7       	in	r28, 0x3d	; 61
     9f8:	de b7       	in	r29, 0x3e	; 62
	Cqueue(&KEYPAD_Queue, KEYPAD_Arr, KEYPAD_MAX_NO_OF_BUFFERS);
     9fa:	87 e1       	ldi	r24, 0x17	; 23
     9fc:	91 e0       	ldi	r25, 0x01	; 1
     9fe:	24 e1       	ldi	r18, 0x14	; 20
     a00:	31 e0       	ldi	r19, 0x01	; 1
     a02:	b9 01       	movw	r22, r18
     a04:	43 e0       	ldi	r20, 0x03	; 3
     a06:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <Cqueue>
}
     a0a:	cf 91       	pop	r28
     a0c:	df 91       	pop	r29
     a0e:	08 95       	ret

00000a10 <KEYPAD_Main>:
/****************************************************************************/
void KEYPAD_Main(void)
{
     a10:	df 93       	push	r29
     a12:	cf 93       	push	r28
     a14:	00 d0       	rcall	.+0      	; 0xa16 <KEYPAD_Main+0x6>
     a16:	0f 92       	push	r0
     a18:	cd b7       	in	r28, 0x3d	; 61
     a1a:	de b7       	in	r29, 0x3e	; 62
	UINT8_t BTN_Idx = 0;
     a1c:	19 82       	std	Y+1, r1	; 0x01

	for (BTN_Idx = 0; BTN_Idx < MAX_NO_OF_PBTN; ++BTN_Idx) {
     a1e:	19 82       	std	Y+1, r1	; 0x01
     a20:	6a c0       	rjmp	.+212    	; 0xaf6 <KEYPAD_Main+0xe6>
		switch (PBTN_Arr[BTN_Idx].State) {
     a22:	89 81       	ldd	r24, Y+1	; 0x01
     a24:	28 2f       	mov	r18, r24
     a26:	30 e0       	ldi	r19, 0x00	; 0
     a28:	c9 01       	movw	r24, r18
     a2a:	88 0f       	add	r24, r24
     a2c:	99 1f       	adc	r25, r25
     a2e:	82 0f       	add	r24, r18
     a30:	93 1f       	adc	r25, r19
     a32:	fc 01       	movw	r30, r24
     a34:	ec 54       	subi	r30, 0x4C	; 76
     a36:	ff 4f       	sbci	r31, 0xFF	; 255
     a38:	80 81       	ld	r24, Z
     a3a:	28 2f       	mov	r18, r24
     a3c:	30 e0       	ldi	r19, 0x00	; 0
     a3e:	3b 83       	std	Y+3, r19	; 0x03
     a40:	2a 83       	std	Y+2, r18	; 0x02
     a42:	8a 81       	ldd	r24, Y+2	; 0x02
     a44:	9b 81       	ldd	r25, Y+3	; 0x03
     a46:	00 97       	sbiw	r24, 0x00	; 0
     a48:	31 f0       	breq	.+12     	; 0xa56 <KEYPAD_Main+0x46>
     a4a:	2a 81       	ldd	r18, Y+2	; 0x02
     a4c:	3b 81       	ldd	r19, Y+3	; 0x03
     a4e:	21 30       	cpi	r18, 0x01	; 1
     a50:	31 05       	cpc	r19, r1
     a52:	f9 f0       	breq	.+62     	; 0xa92 <KEYPAD_Main+0x82>
     a54:	4d c0       	rjmp	.+154    	; 0xaf0 <KEYPAD_Main+0xe0>
		case PBTN_STATE_RELEASED:
			if (DIO_PIN_STATE_HIGH==DIO_READ_PIN_VALUE(PBTN_Arr[BTN_Idx].Pin_Id)) {
     a56:	89 81       	ldd	r24, Y+1	; 0x01
     a58:	28 2f       	mov	r18, r24
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	c9 01       	movw	r24, r18
     a5e:	88 0f       	add	r24, r24
     a60:	99 1f       	adc	r25, r25
     a62:	82 0f       	add	r24, r18
     a64:	93 1f       	adc	r25, r19
     a66:	fc 01       	movw	r30, r24
     a68:	ed 54       	subi	r30, 0x4D	; 77
     a6a:	ff 4f       	sbci	r31, 0xFF	; 255
     a6c:	80 81       	ld	r24, Z
     a6e:	0e 94 96 04 	call	0x92c	; 0x92c <DIO_READ_PIN_VALUE>
     a72:	81 30       	cpi	r24, 0x01	; 1
     a74:	e9 f5       	brne	.+122    	; 0xaf0 <KEYPAD_Main+0xe0>
				PBTN_Arr[BTN_Idx].State = PBTN_STATE_PRESSED;
     a76:	89 81       	ldd	r24, Y+1	; 0x01
     a78:	28 2f       	mov	r18, r24
     a7a:	30 e0       	ldi	r19, 0x00	; 0
     a7c:	c9 01       	movw	r24, r18
     a7e:	88 0f       	add	r24, r24
     a80:	99 1f       	adc	r25, r25
     a82:	82 0f       	add	r24, r18
     a84:	93 1f       	adc	r25, r19
     a86:	fc 01       	movw	r30, r24
     a88:	ec 54       	subi	r30, 0x4C	; 76
     a8a:	ff 4f       	sbci	r31, 0xFF	; 255
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	80 83       	st	Z, r24
     a90:	2f c0       	rjmp	.+94     	; 0xaf0 <KEYPAD_Main+0xe0>
			}
			break;
		case PBTN_STATE_PRESSED:
			if (DIO_PIN_STATE_LOW==DIO_READ_PIN_VALUE(PBTN_Arr[BTN_Idx].Pin_Id)) {
     a92:	89 81       	ldd	r24, Y+1	; 0x01
     a94:	28 2f       	mov	r18, r24
     a96:	30 e0       	ldi	r19, 0x00	; 0
     a98:	c9 01       	movw	r24, r18
     a9a:	88 0f       	add	r24, r24
     a9c:	99 1f       	adc	r25, r25
     a9e:	82 0f       	add	r24, r18
     aa0:	93 1f       	adc	r25, r19
     aa2:	fc 01       	movw	r30, r24
     aa4:	ed 54       	subi	r30, 0x4D	; 77
     aa6:	ff 4f       	sbci	r31, 0xFF	; 255
     aa8:	80 81       	ld	r24, Z
     aaa:	0e 94 96 04 	call	0x92c	; 0x92c <DIO_READ_PIN_VALUE>
     aae:	88 23       	and	r24, r24
     ab0:	f9 f4       	brne	.+62     	; 0xaf0 <KEYPAD_Main+0xe0>
				Enqueue(&KEYPAD_Queue,&PBTN_Arr[BTN_Idx].Symbole,QUEUE_OBJ_TYPE_SINT8);
     ab2:	89 81       	ldd	r24, Y+1	; 0x01
     ab4:	28 2f       	mov	r18, r24
     ab6:	30 e0       	ldi	r19, 0x00	; 0
     ab8:	c9 01       	movw	r24, r18
     aba:	88 0f       	add	r24, r24
     abc:	99 1f       	adc	r25, r25
     abe:	82 0f       	add	r24, r18
     ac0:	93 1f       	adc	r25, r19
     ac2:	02 96       	adiw	r24, 0x02	; 2
     ac4:	9c 01       	movw	r18, r24
     ac6:	2d 54       	subi	r18, 0x4D	; 77
     ac8:	3f 4f       	sbci	r19, 0xFF	; 255
     aca:	87 e1       	ldi	r24, 0x17	; 23
     acc:	91 e0       	ldi	r25, 0x01	; 1
     ace:	b9 01       	movw	r22, r18
     ad0:	44 e0       	ldi	r20, 0x04	; 4
     ad2:	0e 94 a2 09 	call	0x1344	; 0x1344 <Enqueue>
				PBTN_Arr[BTN_Idx].State = PBTN_STATE_RELEASED;
     ad6:	89 81       	ldd	r24, Y+1	; 0x01
     ad8:	28 2f       	mov	r18, r24
     ada:	30 e0       	ldi	r19, 0x00	; 0
     adc:	c9 01       	movw	r24, r18
     ade:	88 0f       	add	r24, r24
     ae0:	99 1f       	adc	r25, r25
     ae2:	82 0f       	add	r24, r18
     ae4:	93 1f       	adc	r25, r19
     ae6:	fc 01       	movw	r30, r24
     ae8:	ec 54       	subi	r30, 0x4C	; 76
     aea:	ff 4f       	sbci	r31, 0xFF	; 255
     aec:	10 82       	st	Z, r1
     aee:	07 c0       	rjmp	.+14     	; 0xafe <KEYPAD_Main+0xee>
/****************************************************************************/
void KEYPAD_Main(void)
{
	UINT8_t BTN_Idx = 0;

	for (BTN_Idx = 0; BTN_Idx < MAX_NO_OF_PBTN; ++BTN_Idx) {
     af0:	89 81       	ldd	r24, Y+1	; 0x01
     af2:	8f 5f       	subi	r24, 0xFF	; 255
     af4:	89 83       	std	Y+1, r24	; 0x01
     af6:	89 81       	ldd	r24, Y+1	; 0x01
     af8:	8a 30       	cpi	r24, 0x0A	; 10
     afa:	08 f4       	brcc	.+2      	; 0xafe <KEYPAD_Main+0xee>
     afc:	92 cf       	rjmp	.-220    	; 0xa22 <KEYPAD_Main+0x12>
			break;
		default:
			break;
		}
	}
}
     afe:	0f 90       	pop	r0
     b00:	0f 90       	pop	r0
     b02:	0f 90       	pop	r0
     b04:	cf 91       	pop	r28
     b06:	df 91       	pop	r29
     b08:	08 95       	ret

00000b0a <KEYPAD_Set_Request>:
/****************************************************************************/
BOOL_t KEYPAD_Set_Request(CHAR_t*const Ret_Char)
{
     b0a:	df 93       	push	r29
     b0c:	cf 93       	push	r28
     b0e:	00 d0       	rcall	.+0      	; 0xb10 <KEYPAD_Set_Request+0x6>
     b10:	0f 92       	push	r0
     b12:	cd b7       	in	r28, 0x3d	; 61
     b14:	de b7       	in	r29, 0x3e	; 62
     b16:	9b 83       	std	Y+3, r25	; 0x03
     b18:	8a 83       	std	Y+2, r24	; 0x02
	BOOL_t ret=FALSE;
     b1a:	19 82       	std	Y+1, r1	; 0x01
	if(TRUE==Dequeue(&KEYPAD_Queue,Ret_Char,QUEUE_OBJ_TYPE_SINT8))
     b1c:	87 e1       	ldi	r24, 0x17	; 23
     b1e:	91 e0       	ldi	r25, 0x01	; 1
     b20:	2a 81       	ldd	r18, Y+2	; 0x02
     b22:	3b 81       	ldd	r19, Y+3	; 0x03
     b24:	b9 01       	movw	r22, r18
     b26:	44 e0       	ldi	r20, 0x04	; 4
     b28:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <Dequeue>
     b2c:	81 30       	cpi	r24, 0x01	; 1
     b2e:	11 f4       	brne	.+4      	; 0xb34 <KEYPAD_Set_Request+0x2a>
	{
		ret=TRUE;
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
     b34:	89 81       	ldd	r24, Y+1	; 0x01
}
     b36:	0f 90       	pop	r0
     b38:	0f 90       	pop	r0
     b3a:	0f 90       	pop	r0
     b3c:	cf 91       	pop	r28
     b3e:	df 91       	pop	r29
     b40:	08 95       	ret

00000b42 <LCD_Init>:
static UINT8_t Address_Counter;

static LCD_MESSAGE_t LCD_Messages[LCD_MAX_NO_OF_MESSAGES];
static QUEUE_t LCD_Queue;
/****************************************************************************/
BOOL_t LCD_Init(void) {
     b42:	df 93       	push	r29
     b44:	cf 93       	push	r28
     b46:	00 d0       	rcall	.+0      	; 0xb48 <LCD_Init+0x6>
     b48:	0f 92       	push	r0
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	static UINT8_t Cnt=0;
	BOOL_t IsFinished=FALSE;
     b4e:	19 82       	std	Y+1, r1	; 0x01
	switch(Cnt){
     b50:	80 91 1d 01 	lds	r24, 0x011D
     b54:	28 2f       	mov	r18, r24
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	3b 83       	std	Y+3, r19	; 0x03
     b5a:	2a 83       	std	Y+2, r18	; 0x02
     b5c:	8a 81       	ldd	r24, Y+2	; 0x02
     b5e:	9b 81       	ldd	r25, Y+3	; 0x03
     b60:	85 30       	cpi	r24, 0x05	; 5
     b62:	91 05       	cpc	r25, r1
     b64:	09 f4       	brne	.+2      	; 0xb68 <LCD_Init+0x26>
     b66:	8b c0       	rjmp	.+278    	; 0xc7e <LCD_Init+0x13c>
     b68:	2a 81       	ldd	r18, Y+2	; 0x02
     b6a:	3b 81       	ldd	r19, Y+3	; 0x03
     b6c:	26 30       	cpi	r18, 0x06	; 6
     b6e:	31 05       	cpc	r19, r1
     b70:	1c f5       	brge	.+70     	; 0xbb8 <LCD_Init+0x76>
     b72:	8a 81       	ldd	r24, Y+2	; 0x02
     b74:	9b 81       	ldd	r25, Y+3	; 0x03
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	91 05       	cpc	r25, r1
     b7a:	09 f4       	brne	.+2      	; 0xb7e <LCD_Init+0x3c>
     b7c:	6e c0       	rjmp	.+220    	; 0xc5a <LCD_Init+0x118>
     b7e:	2a 81       	ldd	r18, Y+2	; 0x02
     b80:	3b 81       	ldd	r19, Y+3	; 0x03
     b82:	23 30       	cpi	r18, 0x03	; 3
     b84:	31 05       	cpc	r19, r1
     b86:	5c f4       	brge	.+22     	; 0xb9e <LCD_Init+0x5c>
     b88:	8a 81       	ldd	r24, Y+2	; 0x02
     b8a:	9b 81       	ldd	r25, Y+3	; 0x03
     b8c:	00 97       	sbiw	r24, 0x00	; 0
     b8e:	c9 f1       	breq	.+114    	; 0xc02 <LCD_Init+0xc0>
     b90:	2a 81       	ldd	r18, Y+2	; 0x02
     b92:	3b 81       	ldd	r19, Y+3	; 0x03
     b94:	21 30       	cpi	r18, 0x01	; 1
     b96:	31 05       	cpc	r19, r1
     b98:	09 f4       	brne	.+2      	; 0xb9c <LCD_Init+0x5a>
     b9a:	5b c0       	rjmp	.+182    	; 0xc52 <LCD_Init+0x110>
     b9c:	a6 c0       	rjmp	.+332    	; 0xcea <LCD_Init+0x1a8>
     b9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ba0:	9b 81       	ldd	r25, Y+3	; 0x03
     ba2:	83 30       	cpi	r24, 0x03	; 3
     ba4:	91 05       	cpc	r25, r1
     ba6:	09 f4       	brne	.+2      	; 0xbaa <LCD_Init+0x68>
     ba8:	5c c0       	rjmp	.+184    	; 0xc62 <LCD_Init+0x120>
     baa:	2a 81       	ldd	r18, Y+2	; 0x02
     bac:	3b 81       	ldd	r19, Y+3	; 0x03
     bae:	24 30       	cpi	r18, 0x04	; 4
     bb0:	31 05       	cpc	r19, r1
     bb2:	09 f4       	brne	.+2      	; 0xbb6 <LCD_Init+0x74>
     bb4:	5a c0       	rjmp	.+180    	; 0xc6a <LCD_Init+0x128>
     bb6:	99 c0       	rjmp	.+306    	; 0xcea <LCD_Init+0x1a8>
     bb8:	8a 81       	ldd	r24, Y+2	; 0x02
     bba:	9b 81       	ldd	r25, Y+3	; 0x03
     bbc:	88 30       	cpi	r24, 0x08	; 8
     bbe:	91 05       	cpc	r25, r1
     bc0:	09 f4       	brne	.+2      	; 0xbc4 <LCD_Init+0x82>
     bc2:	78 c0       	rjmp	.+240    	; 0xcb4 <LCD_Init+0x172>
     bc4:	2a 81       	ldd	r18, Y+2	; 0x02
     bc6:	3b 81       	ldd	r19, Y+3	; 0x03
     bc8:	29 30       	cpi	r18, 0x09	; 9
     bca:	31 05       	cpc	r19, r1
     bcc:	6c f4       	brge	.+26     	; 0xbe8 <LCD_Init+0xa6>
     bce:	8a 81       	ldd	r24, Y+2	; 0x02
     bd0:	9b 81       	ldd	r25, Y+3	; 0x03
     bd2:	86 30       	cpi	r24, 0x06	; 6
     bd4:	91 05       	cpc	r25, r1
     bd6:	09 f4       	brne	.+2      	; 0xbda <LCD_Init+0x98>
     bd8:	5b c0       	rjmp	.+182    	; 0xc90 <LCD_Init+0x14e>
     bda:	2a 81       	ldd	r18, Y+2	; 0x02
     bdc:	3b 81       	ldd	r19, Y+3	; 0x03
     bde:	27 30       	cpi	r18, 0x07	; 7
     be0:	31 05       	cpc	r19, r1
     be2:	09 f4       	brne	.+2      	; 0xbe6 <LCD_Init+0xa4>
     be4:	5e c0       	rjmp	.+188    	; 0xca2 <LCD_Init+0x160>
     be6:	81 c0       	rjmp	.+258    	; 0xcea <LCD_Init+0x1a8>
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	9b 81       	ldd	r25, Y+3	; 0x03
     bec:	89 30       	cpi	r24, 0x09	; 9
     bee:	91 05       	cpc	r25, r1
     bf0:	09 f4       	brne	.+2      	; 0xbf4 <LCD_Init+0xb2>
     bf2:	69 c0       	rjmp	.+210    	; 0xcc6 <LCD_Init+0x184>
     bf4:	2a 81       	ldd	r18, Y+2	; 0x02
     bf6:	3b 81       	ldd	r19, Y+3	; 0x03
     bf8:	2a 30       	cpi	r18, 0x0A	; 10
     bfa:	31 05       	cpc	r19, r1
     bfc:	09 f4       	brne	.+2      	; 0xc00 <LCD_Init+0xbe>
     bfe:	6c c0       	rjmp	.+216    	; 0xcd8 <LCD_Init+0x196>
     c00:	74 c0       	rjmp	.+232    	; 0xcea <LCD_Init+0x1a8>
	case 0:
		/*Create queue*/
		Cqueue(&LCD_Queue, LCD_Messages, LCD_MAX_NO_OF_MESSAGES);
     c02:	80 e3       	ldi	r24, 0x30	; 48
     c04:	91 e0       	ldi	r25, 0x01	; 1
     c06:	28 e2       	ldi	r18, 0x28	; 40
     c08:	31 e0       	ldi	r19, 0x01	; 1
     c0a:	b9 01       	movw	r22, r18
     c0c:	42 e0       	ldi	r20, 0x02	; 2
     c0e:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <Cqueue>

		DIO_WRITE_PIN_VALUE(E_PIN_NUMBER, DIO_PIN_STATE_HIGH); // E should be high
     c12:	84 e0       	ldi	r24, 0x04	; 4
     c14:	61 e0       	ldi	r22, 0x01	; 1
     c16:	0e 94 21 04 	call	0x842	; 0x842 <DIO_WRITE_PIN_VALUE>
		DIO_WRITE_PIN_VALUE(RW_PIN_NUMBER, DIO_PIN_STATE_LOW);   //  R/W
     c1a:	85 e0       	ldi	r24, 0x05	; 5
     c1c:	60 e0       	ldi	r22, 0x00	; 0
     c1e:	0e 94 21 04 	call	0x842	; 0x842 <DIO_WRITE_PIN_VALUE>
		DIO_WRITE_PIN_VALUE(RS_PIN_NUMBER, DIO_PIN_STATE_LOW);   //  RS
     c22:	86 e0       	ldi	r24, 0x06	; 6
     c24:	60 e0       	ldi	r22, 0x00	; 0
     c26:	0e 94 21 04 	call	0x842	; 0x842 <DIO_WRITE_PIN_VALUE>
		DIO_WRITE_PIN_VALUE(D4_PIN_NUMBER, DIO_PIN_STATE_LOW);   //  D4
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	60 e0       	ldi	r22, 0x00	; 0
     c2e:	0e 94 21 04 	call	0x842	; 0x842 <DIO_WRITE_PIN_VALUE>
		DIO_WRITE_PIN_VALUE(D5_PIN_NUMBER, DIO_PIN_STATE_LOW);   //  D5
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	60 e0       	ldi	r22, 0x00	; 0
     c36:	0e 94 21 04 	call	0x842	; 0x842 <DIO_WRITE_PIN_VALUE>
		DIO_WRITE_PIN_VALUE(D6_PIN_NUMBER, DIO_PIN_STATE_LOW);   //  D6
     c3a:	82 e0       	ldi	r24, 0x02	; 2
     c3c:	60 e0       	ldi	r22, 0x00	; 0
     c3e:	0e 94 21 04 	call	0x842	; 0x842 <DIO_WRITE_PIN_VALUE>
		DIO_WRITE_PIN_VALUE(D7_PIN_NUMBER, DIO_PIN_STATE_LOW);   //  D7
     c42:	83 e0       	ldi	r24, 0x03	; 3
     c44:	60 e0       	ldi	r22, 0x00	; 0
     c46:	0e 94 21 04 	call	0x842	; 0x842 <DIO_WRITE_PIN_VALUE>

		Cnt=1;
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	80 93 1d 01 	sts	0x011D, r24
     c50:	53 c0       	rjmp	.+166    	; 0xcf8 <LCD_Init+0x1b6>
		break;
	case 1:
		Cnt=2;
     c52:	82 e0       	ldi	r24, 0x02	; 2
     c54:	80 93 1d 01 	sts	0x011D, r24
     c58:	4f c0       	rjmp	.+158    	; 0xcf8 <LCD_Init+0x1b6>
		break;
	case 2:
		Cnt=3;
     c5a:	83 e0       	ldi	r24, 0x03	; 3
     c5c:	80 93 1d 01 	sts	0x011D, r24
     c60:	4b c0       	rjmp	.+150    	; 0xcf8 <LCD_Init+0x1b6>
		break;
	case 3:
		Cnt=4;
     c62:	84 e0       	ldi	r24, 0x04	; 4
     c64:	80 93 1d 01 	sts	0x011D, r24
     c68:	47 c0       	rjmp	.+142    	; 0xcf8 <LCD_Init+0x1b6>
		break;
	case 4:
		if(TRUE==LCD_Send_Command(0X20)){
     c6a:	80 e2       	ldi	r24, 0x20	; 32
     c6c:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_Command>
     c70:	81 30       	cpi	r24, 0x01	; 1
     c72:	09 f0       	breq	.+2      	; 0xc76 <LCD_Init+0x134>
     c74:	41 c0       	rjmp	.+130    	; 0xcf8 <LCD_Init+0x1b6>
			Cnt=5;
     c76:	85 e0       	ldi	r24, 0x05	; 5
     c78:	80 93 1d 01 	sts	0x011D, r24
     c7c:	3d c0       	rjmp	.+122    	; 0xcf8 <LCD_Init+0x1b6>
		}
		break;
	case 5:
		if (TRUE == LCD_Send_Command(0X20)) {
     c7e:	80 e2       	ldi	r24, 0x20	; 32
     c80:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_Command>
     c84:	81 30       	cpi	r24, 0x01	; 1
     c86:	c1 f5       	brne	.+112    	; 0xcf8 <LCD_Init+0x1b6>
			Cnt = 6;
     c88:	86 e0       	ldi	r24, 0x06	; 6
     c8a:	80 93 1d 01 	sts	0x011D, r24
     c8e:	34 c0       	rjmp	.+104    	; 0xcf8 <LCD_Init+0x1b6>
		}
		break;
	case 6:
		if (TRUE == LCD_Send_Command(0X80)) {
     c90:	80 e8       	ldi	r24, 0x80	; 128
     c92:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_Command>
     c96:	81 30       	cpi	r24, 0x01	; 1
     c98:	79 f5       	brne	.+94     	; 0xcf8 <LCD_Init+0x1b6>
			Cnt = 7;
     c9a:	87 e0       	ldi	r24, 0x07	; 7
     c9c:	80 93 1d 01 	sts	0x011D, r24
     ca0:	2b c0       	rjmp	.+86     	; 0xcf8 <LCD_Init+0x1b6>
		}
		break;
	case 7:
		if (TRUE == LCD_Send_Command(0X00)) {
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_Command>
     ca8:	81 30       	cpi	r24, 0x01	; 1
     caa:	31 f5       	brne	.+76     	; 0xcf8 <LCD_Init+0x1b6>
			Cnt = 8;
     cac:	88 e0       	ldi	r24, 0x08	; 8
     cae:	80 93 1d 01 	sts	0x011D, r24
     cb2:	22 c0       	rjmp	.+68     	; 0xcf8 <LCD_Init+0x1b6>
		}
		break;
	case 8:
		if (TRUE == LCD_Send_Command(0XC0)) {
     cb4:	80 ec       	ldi	r24, 0xC0	; 192
     cb6:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_Command>
     cba:	81 30       	cpi	r24, 0x01	; 1
     cbc:	e9 f4       	brne	.+58     	; 0xcf8 <LCD_Init+0x1b6>
			Cnt = 9;
     cbe:	89 e0       	ldi	r24, 0x09	; 9
     cc0:	80 93 1d 01 	sts	0x011D, r24
     cc4:	19 c0       	rjmp	.+50     	; 0xcf8 <LCD_Init+0x1b6>
		}
		break;
	case 9:
		if (TRUE == LCD_Send_Command(0X00)) {
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_Command>
     ccc:	81 30       	cpi	r24, 0x01	; 1
     cce:	a1 f4       	brne	.+40     	; 0xcf8 <LCD_Init+0x1b6>
			Cnt = 10;
     cd0:	8a e0       	ldi	r24, 0x0A	; 10
     cd2:	80 93 1d 01 	sts	0x011D, r24
     cd6:	10 c0       	rjmp	.+32     	; 0xcf8 <LCD_Init+0x1b6>
		}
		break;
	case 10:
		if (TRUE == LCD_Send_Command(0X10)) {
     cd8:	80 e1       	ldi	r24, 0x10	; 16
     cda:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_Command>
     cde:	81 30       	cpi	r24, 0x01	; 1
     ce0:	59 f4       	brne	.+22     	; 0xcf8 <LCD_Init+0x1b6>
			Cnt = 11;
     ce2:	8b e0       	ldi	r24, 0x0B	; 11
     ce4:	80 93 1d 01 	sts	0x011D, r24
     ce8:	07 c0       	rjmp	.+14     	; 0xcf8 <LCD_Init+0x1b6>
		}
		break;
	default:
		Configuration_Process = ENDED;
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	80 93 1c 01 	sts	0x011C, r24
		Cnt = 0;
     cf0:	10 92 1d 01 	sts	0x011D, r1
		IsFinished = TRUE;
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return IsFinished;
     cf8:	89 81       	ldd	r24, Y+1	; 0x01
}
     cfa:	0f 90       	pop	r0
     cfc:	0f 90       	pop	r0
     cfe:	0f 90       	pop	r0
     d00:	cf 91       	pop	r28
     d02:	df 91       	pop	r29
     d04:	08 95       	ret

00000d06 <LCD_Send_Command>:
/****************************************************************************/
BOOL_t LCD_Send_Command(const UINT8_t CMD) {
     d06:	df 93       	push	r29
     d08:	cf 93       	push	r28
     d0a:	00 d0       	rcall	.+0      	; 0xd0c <LCD_Send_Command+0x6>
     d0c:	00 d0       	rcall	.+0      	; 0xd0e <LCD_Send_Command+0x8>
     d0e:	cd b7       	in	r28, 0x3d	; 61
     d10:	de b7       	in	r29, 0x3e	; 62
     d12:	8a 83       	std	Y+2, r24	; 0x02

	static LCD_WR_OP_t Write_Operation_State = LCD_IDLE;
	BOOL_t IsFinished = FALSE;
     d14:	19 82       	std	Y+1, r1	; 0x01
	++Write_Operation_State;
     d16:	80 91 1e 01 	lds	r24, 0x011E
     d1a:	8f 5f       	subi	r24, 0xFF	; 255
     d1c:	80 93 1e 01 	sts	0x011E, r24
	switch (Write_Operation_State) {
     d20:	80 91 1e 01 	lds	r24, 0x011E
     d24:	28 2f       	mov	r18, r24
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	3c 83       	std	Y+4, r19	; 0x04
     d2a:	2b 83       	std	Y+3, r18	; 0x03
     d2c:	8b 81       	ldd	r24, Y+3	; 0x03
     d2e:	9c 81       	ldd	r25, Y+4	; 0x04
     d30:	83 30       	cpi	r24, 0x03	; 3
     d32:	91 05       	cpc	r25, r1
     d34:	09 f4       	brne	.+2      	; 0xd38 <LCD_Send_Command+0x32>
     d36:	55 c0       	rjmp	.+170    	; 0xde2 <LCD_Send_Command+0xdc>
     d38:	2b 81       	ldd	r18, Y+3	; 0x03
     d3a:	3c 81       	ldd	r19, Y+4	; 0x04
     d3c:	24 30       	cpi	r18, 0x04	; 4
     d3e:	31 05       	cpc	r19, r1
     d40:	5c f4       	brge	.+22     	; 0xd58 <LCD_Send_Command+0x52>
     d42:	8b 81       	ldd	r24, Y+3	; 0x03
     d44:	9c 81       	ldd	r25, Y+4	; 0x04
     d46:	00 97       	sbiw	r24, 0x00	; 0
     d48:	09 f4       	brne	.+2      	; 0xd4c <LCD_Send_Command+0x46>
     d4a:	83 c0       	rjmp	.+262    	; 0xe52 <LCD_Send_Command+0x14c>
     d4c:	2b 81       	ldd	r18, Y+3	; 0x03
     d4e:	3c 81       	ldd	r19, Y+4	; 0x04
     d50:	21 30       	cpi	r18, 0x01	; 1
     d52:	31 05       	cpc	r19, r1
     d54:	71 f0       	breq	.+28     	; 0xd72 <LCD_Send_Command+0x6c>
     d56:	7d c0       	rjmp	.+250    	; 0xe52 <LCD_Send_Command+0x14c>
     d58:	8b 81       	ldd	r24, Y+3	; 0x03
     d5a:	9c 81       	ldd	r25, Y+4	; 0x04
     d5c:	85 30       	cpi	r24, 0x05	; 5
     d5e:	91 05       	cpc	r25, r1
     d60:	09 f4       	brne	.+2      	; 0xd64 <LCD_Send_Command+0x5e>
     d62:	6e c0       	rjmp	.+220    	; 0xe40 <LCD_Send_Command+0x13a>
     d64:	2b 81       	ldd	r18, Y+3	; 0x03
     d66:	3c 81       	ldd	r19, Y+4	; 0x04
     d68:	28 30       	cpi	r18, 0x08	; 8
     d6a:	31 05       	cpc	r19, r1
     d6c:	09 f4       	brne	.+2      	; 0xd70 <LCD_Send_Command+0x6a>
     d6e:	6d c0       	rjmp	.+218    	; 0xe4a <LCD_Send_Command+0x144>
     d70:	70 c0       	rjmp	.+224    	; 0xe52 <LCD_Send_Command+0x14c>
	case LCD_IDLE:
		break;
	case LCD_WR_4MSB:
		// Write operation
		DIO_WRITE_PIN_VALUE(RW_PIN_NUMBER, DIO_PIN_STATE_LOW);   //  R/W
     d72:	85 e0       	ldi	r24, 0x05	; 5
     d74:	60 e0       	ldi	r22, 0x00	; 0
     d76:	0e 94 21 04 	call	0x842	; 0x842 <DIO_WRITE_PIN_VALUE>
		// Command Mode
		DIO_WRITE_PIN_VALUE(RS_PIN_NUMBER, DIO_PIN_STATE_LOW);   //  RS
     d7a:	86 e0       	ldi	r24, 0x06	; 6
     d7c:	60 e0       	ldi	r22, 0x00	; 0
     d7e:	0e 94 21 04 	call	0x842	; 0x842 <DIO_WRITE_PIN_VALUE>

		// SEND MSB
		DIO_WRITE_PIN_VALUE(E_PIN_NUMBER, DIO_PIN_STATE_HIGH);   //  E
     d82:	84 e0       	ldi	r24, 0x04	; 4
     d84:	61 e0       	ldi	r22, 0x01	; 1
     d86:	0e 94 21 04 	call	0x842	; 0x842 <DIO_WRITE_PIN_VALUE>

		DIO_WRITE_PIN_VALUE(D4_PIN_NUMBER, GET_BIT(CMD, 4));   //  D4
     d8a:	8a 81       	ldd	r24, Y+2	; 0x02
     d8c:	82 95       	swap	r24
     d8e:	8f 70       	andi	r24, 0x0F	; 15
     d90:	98 2f       	mov	r25, r24
     d92:	91 70       	andi	r25, 0x01	; 1
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	69 2f       	mov	r22, r25
     d98:	0e 94 21 04 	call	0x842	; 0x842 <DIO_WRITE_PIN_VALUE>
		DIO_WRITE_PIN_VALUE(D5_PIN_NUMBER, GET_BIT(CMD, 5));   //  D5
     d9c:	8a 81       	ldd	r24, Y+2	; 0x02
     d9e:	82 95       	swap	r24
     da0:	86 95       	lsr	r24
     da2:	87 70       	andi	r24, 0x07	; 7
     da4:	98 2f       	mov	r25, r24
     da6:	91 70       	andi	r25, 0x01	; 1
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	69 2f       	mov	r22, r25
     dac:	0e 94 21 04 	call	0x842	; 0x842 <DIO_WRITE_PIN_VALUE>
		DIO_WRITE_PIN_VALUE(D6_PIN_NUMBER, GET_BIT(CMD, 6));   //  D6
     db0:	8a 81       	ldd	r24, Y+2	; 0x02
     db2:	82 95       	swap	r24
     db4:	86 95       	lsr	r24
     db6:	86 95       	lsr	r24
     db8:	83 70       	andi	r24, 0x03	; 3
     dba:	98 2f       	mov	r25, r24
     dbc:	91 70       	andi	r25, 0x01	; 1
     dbe:	82 e0       	ldi	r24, 0x02	; 2
     dc0:	69 2f       	mov	r22, r25
     dc2:	0e 94 21 04 	call	0x842	; 0x842 <DIO_WRITE_PIN_VALUE>
		DIO_WRITE_PIN_VALUE(D7_PIN_NUMBER, GET_BIT(CMD, 7));   //  D7
     dc6:	8a 81       	ldd	r24, Y+2	; 0x02
     dc8:	98 2f       	mov	r25, r24
     dca:	99 1f       	adc	r25, r25
     dcc:	99 27       	eor	r25, r25
     dce:	99 1f       	adc	r25, r25
     dd0:	83 e0       	ldi	r24, 0x03	; 3
     dd2:	69 2f       	mov	r22, r25
     dd4:	0e 94 21 04 	call	0x842	; 0x842 <DIO_WRITE_PIN_VALUE>

		DIO_WRITE_PIN_VALUE(E_PIN_NUMBER, DIO_PIN_STATE_LOW);   //  E
     dd8:	84 e0       	ldi	r24, 0x04	; 4
     dda:	60 e0       	ldi	r22, 0x00	; 0
     ddc:	0e 94 21 04 	call	0x842	; 0x842 <DIO_WRITE_PIN_VALUE>
     de0:	38 c0       	rjmp	.+112    	; 0xe52 <LCD_Send_Command+0x14c>
		break;
	case LCD_WR_4LSB:
		/* Latch data */
		DIO_WRITE_PIN_VALUE(E_PIN_NUMBER, DIO_PIN_STATE_HIGH);   //  E
     de2:	84 e0       	ldi	r24, 0x04	; 4
     de4:	61 e0       	ldi	r22, 0x01	; 1
     de6:	0e 94 21 04 	call	0x842	; 0x842 <DIO_WRITE_PIN_VALUE>

		if (Configuration_Process == ENDED) {
     dea:	80 91 1c 01 	lds	r24, 0x011C
     dee:	81 30       	cpi	r24, 0x01	; 1
     df0:	81 f5       	brne	.+96     	; 0xe52 <LCD_Send_Command+0x14c>
			// SEND LSB
			DIO_WRITE_PIN_VALUE(D4_PIN_NUMBER, GET_BIT(CMD, 0));   //  D4
     df2:	8a 81       	ldd	r24, Y+2	; 0x02
     df4:	98 2f       	mov	r25, r24
     df6:	91 70       	andi	r25, 0x01	; 1
     df8:	80 e0       	ldi	r24, 0x00	; 0
     dfa:	69 2f       	mov	r22, r25
     dfc:	0e 94 21 04 	call	0x842	; 0x842 <DIO_WRITE_PIN_VALUE>
			DIO_WRITE_PIN_VALUE(D5_PIN_NUMBER, GET_BIT(CMD, 1));   //  D5
     e00:	8a 81       	ldd	r24, Y+2	; 0x02
     e02:	86 95       	lsr	r24
     e04:	98 2f       	mov	r25, r24
     e06:	91 70       	andi	r25, 0x01	; 1
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	69 2f       	mov	r22, r25
     e0c:	0e 94 21 04 	call	0x842	; 0x842 <DIO_WRITE_PIN_VALUE>
			DIO_WRITE_PIN_VALUE(D6_PIN_NUMBER, GET_BIT(CMD, 2));   //  D6
     e10:	8a 81       	ldd	r24, Y+2	; 0x02
     e12:	86 95       	lsr	r24
     e14:	86 95       	lsr	r24
     e16:	98 2f       	mov	r25, r24
     e18:	91 70       	andi	r25, 0x01	; 1
     e1a:	82 e0       	ldi	r24, 0x02	; 2
     e1c:	69 2f       	mov	r22, r25
     e1e:	0e 94 21 04 	call	0x842	; 0x842 <DIO_WRITE_PIN_VALUE>
			DIO_WRITE_PIN_VALUE(D7_PIN_NUMBER, GET_BIT(CMD, 3));   //  D7
     e22:	8a 81       	ldd	r24, Y+2	; 0x02
     e24:	86 95       	lsr	r24
     e26:	86 95       	lsr	r24
     e28:	86 95       	lsr	r24
     e2a:	98 2f       	mov	r25, r24
     e2c:	91 70       	andi	r25, 0x01	; 1
     e2e:	83 e0       	ldi	r24, 0x03	; 3
     e30:	69 2f       	mov	r22, r25
     e32:	0e 94 21 04 	call	0x842	; 0x842 <DIO_WRITE_PIN_VALUE>

			DIO_WRITE_PIN_VALUE(E_PIN_NUMBER, DIO_PIN_STATE_LOW);   //  E
     e36:	84 e0       	ldi	r24, 0x04	; 4
     e38:	60 e0       	ldi	r22, 0x00	; 0
     e3a:	0e 94 21 04 	call	0x842	; 0x842 <DIO_WRITE_PIN_VALUE>
     e3e:	09 c0       	rjmp	.+18     	; 0xe52 <LCD_Send_Command+0x14c>

			//_delay_ms(10);
		}
		break;
	case LCD_DELAY_BETWEEN_WRITINGS:
		DIO_WRITE_PIN_VALUE(E_PIN_NUMBER, DIO_PIN_STATE_HIGH);   //  E
     e40:	84 e0       	ldi	r24, 0x04	; 4
     e42:	61 e0       	ldi	r22, 0x01	; 1
     e44:	0e 94 21 04 	call	0x842	; 0x842 <DIO_WRITE_PIN_VALUE>
     e48:	04 c0       	rjmp	.+8      	; 0xe52 <LCD_Send_Command+0x14c>
		break;
	case LCD_WR_FINISHED:
		Write_Operation_State = LCD_IDLE;
     e4a:	10 92 1e 01 	sts	0x011E, r1
		IsFinished = TRUE;
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	89 83       	std	Y+1, r24	; 0x01
	default:
		break;

	}

	return IsFinished;
     e52:	89 81       	ldd	r24, Y+1	; 0x01
}
     e54:	0f 90       	pop	r0
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	cf 91       	pop	r28
     e5e:	df 91       	pop	r29
     e60:	08 95       	ret

00000e62 <LCD_Jumb_To>:
/****************************************************************************/
BOOL_t LCD_Jumb_To(const LCD_ROW_ID_t ROW, const LCD_COL_ID_t COL)
{
     e62:	df 93       	push	r29
     e64:	cf 93       	push	r28
     e66:	00 d0       	rcall	.+0      	; 0xe68 <LCD_Jumb_To+0x6>
     e68:	0f 92       	push	r0
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
     e6e:	8a 83       	std	Y+2, r24	; 0x02
     e70:	6b 83       	std	Y+3, r22	; 0x03
	BOOL_t IsFinished=FALSE;
     e72:	19 82       	std	Y+1, r1	; 0x01
	/*
	 First Row Start from 0X00
	 Second Row Start From 0X40
	 */
	if (ROW < LCD_MAX_ROWS && COL < LCD_MAX_COLS) {
     e74:	8a 81       	ldd	r24, Y+2	; 0x02
     e76:	82 30       	cpi	r24, 0x02	; 2
     e78:	d0 f4       	brcc	.+52     	; 0xeae <LCD_Jumb_To+0x4c>
     e7a:	8b 81       	ldd	r24, Y+3	; 0x03
     e7c:	80 31       	cpi	r24, 0x10	; 16
     e7e:	b8 f4       	brcc	.+46     	; 0xeae <LCD_Jumb_To+0x4c>
		Address_Counter = ((0X40 * ROW) + COL) | (1 << 7); // To Write into DDRAM;
     e80:	8a 81       	ldd	r24, Y+2	; 0x02
     e82:	88 2f       	mov	r24, r24
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	00 24       	eor	r0, r0
     e88:	96 95       	lsr	r25
     e8a:	87 95       	ror	r24
     e8c:	07 94       	ror	r0
     e8e:	96 95       	lsr	r25
     e90:	87 95       	ror	r24
     e92:	07 94       	ror	r0
     e94:	98 2f       	mov	r25, r24
     e96:	80 2d       	mov	r24, r0
     e98:	98 2f       	mov	r25, r24
     e9a:	8b 81       	ldd	r24, Y+3	; 0x03
     e9c:	89 0f       	add	r24, r25
     e9e:	80 68       	ori	r24, 0x80	; 128
     ea0:	80 93 27 01 	sts	0x0127, r24
		IsFinished=LCD_Send_Command(Address_Counter);
     ea4:	80 91 27 01 	lds	r24, 0x0127
     ea8:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_Command>
     eac:	89 83       	std	Y+1, r24	; 0x01
	}
	return IsFinished;
     eae:	89 81       	ldd	r24, Y+1	; 0x01
}
     eb0:	0f 90       	pop	r0
     eb2:	0f 90       	pop	r0
     eb4:	0f 90       	pop	r0
     eb6:	cf 91       	pop	r28
     eb8:	df 91       	pop	r29
     eba:	08 95       	ret

00000ebc <LCD_Write_Char>:
/****************************************************************************/
BOOL_t LCD_Write_Char(const UINT8_t Character) {
     ebc:	df 93       	push	r29
     ebe:	cf 93       	push	r28
     ec0:	00 d0       	rcall	.+0      	; 0xec2 <LCD_Write_Char+0x6>
     ec2:	00 d0       	rcall	.+0      	; 0xec4 <LCD_Write_Char+0x8>
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
     ec8:	8a 83       	std	Y+2, r24	; 0x02
	static LCD_WR_OP_t Write_Operation_State=LCD_IDLE;
	BOOL_t IsFinished=FALSE;
     eca:	19 82       	std	Y+1, r1	; 0x01
	++Write_Operation_State;
     ecc:	80 91 1f 01 	lds	r24, 0x011F
     ed0:	8f 5f       	subi	r24, 0xFF	; 255
     ed2:	80 93 1f 01 	sts	0x011F, r24
	switch (Write_Operation_State) {
     ed6:	80 91 1f 01 	lds	r24, 0x011F
     eda:	28 2f       	mov	r18, r24
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	3c 83       	std	Y+4, r19	; 0x04
     ee0:	2b 83       	std	Y+3, r18	; 0x03
     ee2:	8b 81       	ldd	r24, Y+3	; 0x03
     ee4:	9c 81       	ldd	r25, Y+4	; 0x04
     ee6:	83 30       	cpi	r24, 0x03	; 3
     ee8:	91 05       	cpc	r25, r1
     eea:	09 f4       	brne	.+2      	; 0xeee <LCD_Write_Char+0x32>
     eec:	55 c0       	rjmp	.+170    	; 0xf98 <LCD_Write_Char+0xdc>
     eee:	2b 81       	ldd	r18, Y+3	; 0x03
     ef0:	3c 81       	ldd	r19, Y+4	; 0x04
     ef2:	24 30       	cpi	r18, 0x04	; 4
     ef4:	31 05       	cpc	r19, r1
     ef6:	5c f4       	brge	.+22     	; 0xf0e <LCD_Write_Char+0x52>
     ef8:	8b 81       	ldd	r24, Y+3	; 0x03
     efa:	9c 81       	ldd	r25, Y+4	; 0x04
     efc:	00 97       	sbiw	r24, 0x00	; 0
     efe:	09 f4       	brne	.+2      	; 0xf02 <LCD_Write_Char+0x46>
     f00:	7f c0       	rjmp	.+254    	; 0x1000 <LCD_Write_Char+0x144>
     f02:	2b 81       	ldd	r18, Y+3	; 0x03
     f04:	3c 81       	ldd	r19, Y+4	; 0x04
     f06:	21 30       	cpi	r18, 0x01	; 1
     f08:	31 05       	cpc	r19, r1
     f0a:	71 f0       	breq	.+28     	; 0xf28 <LCD_Write_Char+0x6c>
     f0c:	79 c0       	rjmp	.+242    	; 0x1000 <LCD_Write_Char+0x144>
     f0e:	8b 81       	ldd	r24, Y+3	; 0x03
     f10:	9c 81       	ldd	r25, Y+4	; 0x04
     f12:	85 30       	cpi	r24, 0x05	; 5
     f14:	91 05       	cpc	r25, r1
     f16:	09 f4       	brne	.+2      	; 0xf1a <LCD_Write_Char+0x5e>
     f18:	6a c0       	rjmp	.+212    	; 0xfee <LCD_Write_Char+0x132>
     f1a:	2b 81       	ldd	r18, Y+3	; 0x03
     f1c:	3c 81       	ldd	r19, Y+4	; 0x04
     f1e:	28 30       	cpi	r18, 0x08	; 8
     f20:	31 05       	cpc	r19, r1
     f22:	09 f4       	brne	.+2      	; 0xf26 <LCD_Write_Char+0x6a>
     f24:	69 c0       	rjmp	.+210    	; 0xff8 <LCD_Write_Char+0x13c>
     f26:	6c c0       	rjmp	.+216    	; 0x1000 <LCD_Write_Char+0x144>
	case LCD_IDLE:
		break;
	case LCD_WR_4MSB:
		// Write operation
		DIO_WRITE_PIN_VALUE(RW_PIN_NUMBER, DIO_PIN_STATE_LOW);     //  R/W
     f28:	85 e0       	ldi	r24, 0x05	; 5
     f2a:	60 e0       	ldi	r22, 0x00	; 0
     f2c:	0e 94 21 04 	call	0x842	; 0x842 <DIO_WRITE_PIN_VALUE>
		// Data Mode
		DIO_WRITE_PIN_VALUE(RS_PIN_NUMBER, DIO_PIN_STATE_HIGH);   //   RS
     f30:	86 e0       	ldi	r24, 0x06	; 6
     f32:	61 e0       	ldi	r22, 0x01	; 1
     f34:	0e 94 21 04 	call	0x842	; 0x842 <DIO_WRITE_PIN_VALUE>

		DIO_WRITE_PIN_VALUE(E_PIN_NUMBER, DIO_PIN_STATE_HIGH);   //  E
     f38:	84 e0       	ldi	r24, 0x04	; 4
     f3a:	61 e0       	ldi	r22, 0x01	; 1
     f3c:	0e 94 21 04 	call	0x842	; 0x842 <DIO_WRITE_PIN_VALUE>
		// SEND MSB
		DIO_WRITE_PIN_VALUE(D4_PIN_NUMBER, GET_BIT(Character, 4));   //  D4
     f40:	8a 81       	ldd	r24, Y+2	; 0x02
     f42:	82 95       	swap	r24
     f44:	8f 70       	andi	r24, 0x0F	; 15
     f46:	98 2f       	mov	r25, r24
     f48:	91 70       	andi	r25, 0x01	; 1
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	69 2f       	mov	r22, r25
     f4e:	0e 94 21 04 	call	0x842	; 0x842 <DIO_WRITE_PIN_VALUE>
		DIO_WRITE_PIN_VALUE(D5_PIN_NUMBER, GET_BIT(Character, 5));   //  D5
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	82 95       	swap	r24
     f56:	86 95       	lsr	r24
     f58:	87 70       	andi	r24, 0x07	; 7
     f5a:	98 2f       	mov	r25, r24
     f5c:	91 70       	andi	r25, 0x01	; 1
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	69 2f       	mov	r22, r25
     f62:	0e 94 21 04 	call	0x842	; 0x842 <DIO_WRITE_PIN_VALUE>
		DIO_WRITE_PIN_VALUE(D6_PIN_NUMBER, GET_BIT(Character, 6));   //  D6
     f66:	8a 81       	ldd	r24, Y+2	; 0x02
     f68:	82 95       	swap	r24
     f6a:	86 95       	lsr	r24
     f6c:	86 95       	lsr	r24
     f6e:	83 70       	andi	r24, 0x03	; 3
     f70:	98 2f       	mov	r25, r24
     f72:	91 70       	andi	r25, 0x01	; 1
     f74:	82 e0       	ldi	r24, 0x02	; 2
     f76:	69 2f       	mov	r22, r25
     f78:	0e 94 21 04 	call	0x842	; 0x842 <DIO_WRITE_PIN_VALUE>
		DIO_WRITE_PIN_VALUE(D7_PIN_NUMBER, GET_BIT(Character, 7));   //  D7
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	98 2f       	mov	r25, r24
     f80:	99 1f       	adc	r25, r25
     f82:	99 27       	eor	r25, r25
     f84:	99 1f       	adc	r25, r25
     f86:	83 e0       	ldi	r24, 0x03	; 3
     f88:	69 2f       	mov	r22, r25
     f8a:	0e 94 21 04 	call	0x842	; 0x842 <DIO_WRITE_PIN_VALUE>
		/* Latch data */
		DIO_WRITE_PIN_VALUE(E_PIN_NUMBER, DIO_PIN_STATE_LOW);   //  E
     f8e:	84 e0       	ldi	r24, 0x04	; 4
     f90:	60 e0       	ldi	r22, 0x00	; 0
     f92:	0e 94 21 04 	call	0x842	; 0x842 <DIO_WRITE_PIN_VALUE>
     f96:	34 c0       	rjmp	.+104    	; 0x1000 <LCD_Write_Char+0x144>
		break;
	case LCD_WR_4LSB:
		DIO_WRITE_PIN_VALUE(E_PIN_NUMBER, DIO_PIN_STATE_HIGH);   //  E
     f98:	84 e0       	ldi	r24, 0x04	; 4
     f9a:	61 e0       	ldi	r22, 0x01	; 1
     f9c:	0e 94 21 04 	call	0x842	; 0x842 <DIO_WRITE_PIN_VALUE>
		// SEN LSB
		DIO_WRITE_PIN_VALUE(D4_PIN_NUMBER, GET_BIT(Character, 0));   //  D4
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	98 2f       	mov	r25, r24
     fa4:	91 70       	andi	r25, 0x01	; 1
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	69 2f       	mov	r22, r25
     faa:	0e 94 21 04 	call	0x842	; 0x842 <DIO_WRITE_PIN_VALUE>
		DIO_WRITE_PIN_VALUE(D5_PIN_NUMBER, GET_BIT(Character, 1));   //  D5
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	86 95       	lsr	r24
     fb2:	98 2f       	mov	r25, r24
     fb4:	91 70       	andi	r25, 0x01	; 1
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	69 2f       	mov	r22, r25
     fba:	0e 94 21 04 	call	0x842	; 0x842 <DIO_WRITE_PIN_VALUE>
		DIO_WRITE_PIN_VALUE(D6_PIN_NUMBER, GET_BIT(Character, 2));   //  D6
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	86 95       	lsr	r24
     fc2:	86 95       	lsr	r24
     fc4:	98 2f       	mov	r25, r24
     fc6:	91 70       	andi	r25, 0x01	; 1
     fc8:	82 e0       	ldi	r24, 0x02	; 2
     fca:	69 2f       	mov	r22, r25
     fcc:	0e 94 21 04 	call	0x842	; 0x842 <DIO_WRITE_PIN_VALUE>
		DIO_WRITE_PIN_VALUE(D7_PIN_NUMBER, GET_BIT(Character, 3));   //  D7
     fd0:	8a 81       	ldd	r24, Y+2	; 0x02
     fd2:	86 95       	lsr	r24
     fd4:	86 95       	lsr	r24
     fd6:	86 95       	lsr	r24
     fd8:	98 2f       	mov	r25, r24
     fda:	91 70       	andi	r25, 0x01	; 1
     fdc:	83 e0       	ldi	r24, 0x03	; 3
     fde:	69 2f       	mov	r22, r25
     fe0:	0e 94 21 04 	call	0x842	; 0x842 <DIO_WRITE_PIN_VALUE>

		DIO_WRITE_PIN_VALUE(E_PIN_NUMBER, DIO_PIN_STATE_LOW);   //  E
     fe4:	84 e0       	ldi	r24, 0x04	; 4
     fe6:	60 e0       	ldi	r22, 0x00	; 0
     fe8:	0e 94 21 04 	call	0x842	; 0x842 <DIO_WRITE_PIN_VALUE>
     fec:	09 c0       	rjmp	.+18     	; 0x1000 <LCD_Write_Char+0x144>
		break;
	case LCD_DELAY_BETWEEN_WRITINGS:
		DIO_WRITE_PIN_VALUE(E_PIN_NUMBER, DIO_PIN_STATE_HIGH);   //  E
     fee:	84 e0       	ldi	r24, 0x04	; 4
     ff0:	61 e0       	ldi	r22, 0x01	; 1
     ff2:	0e 94 21 04 	call	0x842	; 0x842 <DIO_WRITE_PIN_VALUE>
     ff6:	04 c0       	rjmp	.+8      	; 0x1000 <LCD_Write_Char+0x144>
		break;
	case LCD_WR_FINISHED:
		Write_Operation_State = LCD_IDLE;
     ff8:	10 92 1f 01 	sts	0x011F, r1
		IsFinished = TRUE;
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	89 83       	std	Y+1, r24	; 0x01
	default:
		break;

	}

	return IsFinished;
    1000:	89 81       	ldd	r24, Y+1	; 0x01
}
    1002:	0f 90       	pop	r0
    1004:	0f 90       	pop	r0
    1006:	0f 90       	pop	r0
    1008:	0f 90       	pop	r0
    100a:	cf 91       	pop	r28
    100c:	df 91       	pop	r29
    100e:	08 95       	ret

00001010 <LCD_Clear>:
/****************************************************************************/
BOOL_t LCD_Clear(void){
    1010:	df 93       	push	r29
    1012:	cf 93       	push	r28
    1014:	00 d0       	rcall	.+0      	; 0x1016 <LCD_Clear+0x6>
    1016:	0f 92       	push	r0
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
	BOOL_t IsFinished = FALSE;
    101c:	19 82       	std	Y+1, r1	; 0x01
	static UINT8_t Cnt = 0;
	switch (Cnt) {
    101e:	80 91 20 01 	lds	r24, 0x0120
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	3b 83       	std	Y+3, r19	; 0x03
    1028:	2a 83       	std	Y+2, r18	; 0x02
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	9b 81       	ldd	r25, Y+3	; 0x03
    102e:	00 97       	sbiw	r24, 0x00	; 0
    1030:	31 f0       	breq	.+12     	; 0x103e <LCD_Clear+0x2e>
    1032:	2a 81       	ldd	r18, Y+2	; 0x02
    1034:	3b 81       	ldd	r19, Y+3	; 0x03
    1036:	21 30       	cpi	r18, 0x01	; 1
    1038:	31 05       	cpc	r19, r1
    103a:	51 f0       	breq	.+20     	; 0x1050 <LCD_Clear+0x40>
    103c:	12 c0       	rjmp	.+36     	; 0x1062 <LCD_Clear+0x52>
	case 0:
		if (TRUE == LCD_Send_Command(0x00)) {
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_Command>
    1044:	81 30       	cpi	r24, 0x01	; 1
    1046:	89 f4       	brne	.+34     	; 0x106a <LCD_Clear+0x5a>
			Cnt = 1;
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	80 93 20 01 	sts	0x0120, r24
    104e:	0d c0       	rjmp	.+26     	; 0x106a <LCD_Clear+0x5a>
		}
		break;
	case 1:
		if (TRUE == LCD_Send_Command(0x01)) {
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_Command>
    1056:	81 30       	cpi	r24, 0x01	; 1
    1058:	41 f4       	brne	.+16     	; 0x106a <LCD_Clear+0x5a>
			Cnt = 2;
    105a:	82 e0       	ldi	r24, 0x02	; 2
    105c:	80 93 20 01 	sts	0x0120, r24
    1060:	04 c0       	rjmp	.+8      	; 0x106a <LCD_Clear+0x5a>
		}
		break;
	default:
		Cnt = 0;
    1062:	10 92 20 01 	sts	0x0120, r1
		IsFinished = TRUE;
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return IsFinished;
    106a:	89 81       	ldd	r24, Y+1	; 0x01
}
    106c:	0f 90       	pop	r0
    106e:	0f 90       	pop	r0
    1070:	0f 90       	pop	r0
    1072:	cf 91       	pop	r28
    1074:	df 91       	pop	r29
    1076:	08 95       	ret

00001078 <LCD_Main>:
/****************************************************************************/
void LCD_Main(void){
    1078:	df 93       	push	r29
    107a:	cf 93       	push	r28
    107c:	00 d0       	rcall	.+0      	; 0x107e <LCD_Main+0x6>
    107e:	cd b7       	in	r28, 0x3d	; 61
    1080:	de b7       	in	r29, 0x3e	; 62
	static LCD_STATE_t State=LCD_STATE_INIT;
	static UINT8_t Idx=0;
	static LCD_MESSAGE_t MyMessage;
	switch (State) {
    1082:	80 91 26 01 	lds	r24, 0x0126
    1086:	28 2f       	mov	r18, r24
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	3a 83       	std	Y+2, r19	; 0x02
    108c:	29 83       	std	Y+1, r18	; 0x01
    108e:	89 81       	ldd	r24, Y+1	; 0x01
    1090:	9a 81       	ldd	r25, Y+2	; 0x02
    1092:	81 30       	cpi	r24, 0x01	; 1
    1094:	91 05       	cpc	r25, r1
    1096:	f1 f0       	breq	.+60     	; 0x10d4 <LCD_Main+0x5c>
    1098:	29 81       	ldd	r18, Y+1	; 0x01
    109a:	3a 81       	ldd	r19, Y+2	; 0x02
    109c:	22 30       	cpi	r18, 0x02	; 2
    109e:	31 05       	cpc	r19, r1
    10a0:	2c f4       	brge	.+10     	; 0x10ac <LCD_Main+0x34>
    10a2:	89 81       	ldd	r24, Y+1	; 0x01
    10a4:	9a 81       	ldd	r25, Y+2	; 0x02
    10a6:	00 97       	sbiw	r24, 0x00	; 0
    10a8:	61 f0       	breq	.+24     	; 0x10c2 <LCD_Main+0x4a>
    10aa:	66 c0       	rjmp	.+204    	; 0x1178 <LCD_Main+0x100>
    10ac:	29 81       	ldd	r18, Y+1	; 0x01
    10ae:	3a 81       	ldd	r19, Y+2	; 0x02
    10b0:	22 30       	cpi	r18, 0x02	; 2
    10b2:	31 05       	cpc	r19, r1
    10b4:	01 f1       	breq	.+64     	; 0x10f6 <LCD_Main+0x7e>
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
    10b8:	9a 81       	ldd	r25, Y+2	; 0x02
    10ba:	83 30       	cpi	r24, 0x03	; 3
    10bc:	91 05       	cpc	r25, r1
    10be:	41 f1       	breq	.+80     	; 0x1110 <LCD_Main+0x98>
    10c0:	5b c0       	rjmp	.+182    	; 0x1178 <LCD_Main+0x100>
	case LCD_STATE_INIT:
		if(TRUE==LCD_Init()){
    10c2:	0e 94 a1 05 	call	0xb42	; 0xb42 <LCD_Init>
    10c6:	81 30       	cpi	r24, 0x01	; 1
    10c8:	09 f0       	breq	.+2      	; 0x10cc <LCD_Main+0x54>
    10ca:	56 c0       	rjmp	.+172    	; 0x1178 <LCD_Main+0x100>
			State=LCD_STATE_DEQUEUE_DATA;
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	80 93 26 01 	sts	0x0126, r24
    10d2:	52 c0       	rjmp	.+164    	; 0x1178 <LCD_Main+0x100>
		}
		break;
	case LCD_STATE_DEQUEUE_DATA:
		if(TRUE==Dequeue(&LCD_Queue, &MyMessage, QUEUE_OBJ_TYPE_LCD_MESSAGE))
    10d4:	80 e3       	ldi	r24, 0x30	; 48
    10d6:	91 e0       	ldi	r25, 0x01	; 1
    10d8:	21 e2       	ldi	r18, 0x21	; 33
    10da:	31 e0       	ldi	r19, 0x01	; 1
    10dc:	b9 01       	movw	r22, r18
    10de:	48 e0       	ldi	r20, 0x08	; 8
    10e0:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <Dequeue>
    10e4:	81 30       	cpi	r24, 0x01	; 1
    10e6:	09 f0       	breq	.+2      	; 0x10ea <LCD_Main+0x72>
    10e8:	47 c0       	rjmp	.+142    	; 0x1178 <LCD_Main+0x100>
		{
			Idx=0;
    10ea:	10 92 25 01 	sts	0x0125, r1
			State = LCD_STATE_JUMBTO_POSITION;
    10ee:	82 e0       	ldi	r24, 0x02	; 2
    10f0:	80 93 26 01 	sts	0x0126, r24
    10f4:	41 c0       	rjmp	.+130    	; 0x1178 <LCD_Main+0x100>
		}
		break;
	case LCD_STATE_JUMBTO_POSITION:
		if(TRUE==LCD_Jumb_To(MyMessage.Row, MyMessage.Col)){
    10f6:	80 91 23 01 	lds	r24, 0x0123
    10fa:	90 91 24 01 	lds	r25, 0x0124
    10fe:	69 2f       	mov	r22, r25
    1100:	0e 94 31 07 	call	0xe62	; 0xe62 <LCD_Jumb_To>
    1104:	81 30       	cpi	r24, 0x01	; 1
    1106:	c1 f5       	brne	.+112    	; 0x1178 <LCD_Main+0x100>
			State=LCD_STATE_DISPLAY_CHARS;
    1108:	83 e0       	ldi	r24, 0x03	; 3
    110a:	80 93 26 01 	sts	0x0126, r24
    110e:	34 c0       	rjmp	.+104    	; 0x1178 <LCD_Main+0x100>
		}
		break;
	case LCD_STATE_DISPLAY_CHARS:
		if (MyMessage.Message[Idx] != NULL_CHAR) {
    1110:	20 91 21 01 	lds	r18, 0x0121
    1114:	30 91 22 01 	lds	r19, 0x0122
    1118:	80 91 25 01 	lds	r24, 0x0125
    111c:	88 2f       	mov	r24, r24
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	f9 01       	movw	r30, r18
    1122:	e8 0f       	add	r30, r24
    1124:	f9 1f       	adc	r31, r25
    1126:	80 81       	ld	r24, Z
    1128:	88 23       	and	r24, r24
    112a:	31 f1       	breq	.+76     	; 0x1178 <LCD_Main+0x100>
			if (TRUE == LCD_Write_Char(MyMessage.Message[Idx])) {
    112c:	20 91 21 01 	lds	r18, 0x0121
    1130:	30 91 22 01 	lds	r19, 0x0122
    1134:	80 91 25 01 	lds	r24, 0x0125
    1138:	88 2f       	mov	r24, r24
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	f9 01       	movw	r30, r18
    113e:	e8 0f       	add	r30, r24
    1140:	f9 1f       	adc	r31, r25
    1142:	80 81       	ld	r24, Z
    1144:	0e 94 5e 07 	call	0xebc	; 0xebc <LCD_Write_Char>
    1148:	81 30       	cpi	r24, 0x01	; 1
    114a:	b1 f4       	brne	.+44     	; 0x1178 <LCD_Main+0x100>
				++Idx;
    114c:	80 91 25 01 	lds	r24, 0x0125
    1150:	8f 5f       	subi	r24, 0xFF	; 255
    1152:	80 93 25 01 	sts	0x0125, r24
				if (MyMessage.Message[Idx] == NULL_CHAR) {
    1156:	20 91 21 01 	lds	r18, 0x0121
    115a:	30 91 22 01 	lds	r19, 0x0122
    115e:	80 91 25 01 	lds	r24, 0x0125
    1162:	88 2f       	mov	r24, r24
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	f9 01       	movw	r30, r18
    1168:	e8 0f       	add	r30, r24
    116a:	f9 1f       	adc	r31, r25
    116c:	80 81       	ld	r24, Z
    116e:	88 23       	and	r24, r24
    1170:	19 f4       	brne	.+6      	; 0x1178 <LCD_Main+0x100>
					State=LCD_STATE_DEQUEUE_DATA;
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	80 93 26 01 	sts	0x0126, r24
		break;
	default:
		break;

	}
}
    1178:	0f 90       	pop	r0
    117a:	0f 90       	pop	r0
    117c:	cf 91       	pop	r28
    117e:	df 91       	pop	r29
    1180:	08 95       	ret

00001182 <IntToStr>:
/****************************************************************************/
void IntToStr(char*Str,UINT8_t Num){
    1182:	df 93       	push	r29
    1184:	cf 93       	push	r28
    1186:	00 d0       	rcall	.+0      	; 0x1188 <IntToStr+0x6>
    1188:	0f 92       	push	r0
    118a:	cd b7       	in	r28, 0x3d	; 61
    118c:	de b7       	in	r29, 0x3e	; 62
    118e:	9a 83       	std	Y+2, r25	; 0x02
    1190:	89 83       	std	Y+1, r24	; 0x01
    1192:	6b 83       	std	Y+3, r22	; 0x03
	if (Num / 10) {
    1194:	8b 81       	ldd	r24, Y+3	; 0x03
    1196:	8a 30       	cpi	r24, 0x0A	; 10
    1198:	d8 f0       	brcs	.+54     	; 0x11d0 <IntToStr+0x4e>
		Str[0] = (Num / 10) + '0';
    119a:	8b 81       	ldd	r24, Y+3	; 0x03
    119c:	9a e0       	ldi	r25, 0x0A	; 10
    119e:	69 2f       	mov	r22, r25
    11a0:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__udivmodqi4>
    11a4:	80 5d       	subi	r24, 0xD0	; 208
    11a6:	e9 81       	ldd	r30, Y+1	; 0x01
    11a8:	fa 81       	ldd	r31, Y+2	; 0x02
    11aa:	80 83       	st	Z, r24
		Str[1] = (Num % 10) + '0';
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	9a 81       	ldd	r25, Y+2	; 0x02
    11b0:	fc 01       	movw	r30, r24
    11b2:	31 96       	adiw	r30, 0x01	; 1
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	9a e0       	ldi	r25, 0x0A	; 10
    11b8:	69 2f       	mov	r22, r25
    11ba:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__udivmodqi4>
    11be:	89 2f       	mov	r24, r25
    11c0:	80 5d       	subi	r24, 0xD0	; 208
    11c2:	80 83       	st	Z, r24
		Str[2] = NULL_CHAR;
    11c4:	89 81       	ldd	r24, Y+1	; 0x01
    11c6:	9a 81       	ldd	r25, Y+2	; 0x02
    11c8:	fc 01       	movw	r30, r24
    11ca:	32 96       	adiw	r30, 0x02	; 2
    11cc:	10 82       	st	Z, r1
    11ce:	10 c0       	rjmp	.+32     	; 0x11f0 <IntToStr+0x6e>
	} else {
		Str[0] = Num + '0';
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	80 5d       	subi	r24, 0xD0	; 208
    11d4:	e9 81       	ldd	r30, Y+1	; 0x01
    11d6:	fa 81       	ldd	r31, Y+2	; 0x02
    11d8:	80 83       	st	Z, r24
		Str[1] = ' ';
    11da:	89 81       	ldd	r24, Y+1	; 0x01
    11dc:	9a 81       	ldd	r25, Y+2	; 0x02
    11de:	fc 01       	movw	r30, r24
    11e0:	31 96       	adiw	r30, 0x01	; 1
    11e2:	80 e2       	ldi	r24, 0x20	; 32
    11e4:	80 83       	st	Z, r24
		Str[2] = NULL_CHAR;
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ea:	fc 01       	movw	r30, r24
    11ec:	32 96       	adiw	r30, 0x02	; 2
    11ee:	10 82       	st	Z, r1
	}
}
    11f0:	0f 90       	pop	r0
    11f2:	0f 90       	pop	r0
    11f4:	0f 90       	pop	r0
    11f6:	cf 91       	pop	r28
    11f8:	df 91       	pop	r29
    11fa:	08 95       	ret

000011fc <CharToStr>:
/****************************************************************************/
void CharToStr(char*Str,UINT8_t Num){
    11fc:	df 93       	push	r29
    11fe:	cf 93       	push	r28
    1200:	00 d0       	rcall	.+0      	; 0x1202 <CharToStr+0x6>
    1202:	0f 92       	push	r0
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
    1208:	9a 83       	std	Y+2, r25	; 0x02
    120a:	89 83       	std	Y+1, r24	; 0x01
    120c:	6b 83       	std	Y+3, r22	; 0x03
	Str[0] = Num + '0';
    120e:	8b 81       	ldd	r24, Y+3	; 0x03
    1210:	80 5d       	subi	r24, 0xD0	; 208
    1212:	e9 81       	ldd	r30, Y+1	; 0x01
    1214:	fa 81       	ldd	r31, Y+2	; 0x02
    1216:	80 83       	st	Z, r24
	Str[1] = NULL_CHAR;
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	9a 81       	ldd	r25, Y+2	; 0x02
    121c:	fc 01       	movw	r30, r24
    121e:	31 96       	adiw	r30, 0x01	; 1
    1220:	10 82       	st	Z, r1
}
    1222:	0f 90       	pop	r0
    1224:	0f 90       	pop	r0
    1226:	0f 90       	pop	r0
    1228:	cf 91       	pop	r28
    122a:	df 91       	pop	r29
    122c:	08 95       	ret

0000122e <LCD_Set_Request>:
/****************************************************************************/
BOOL_t LCD_Set_Request(const LCD_MESSAGE_t*const Message)
{
    122e:	df 93       	push	r29
    1230:	cf 93       	push	r28
    1232:	00 d0       	rcall	.+0      	; 0x1234 <LCD_Set_Request+0x6>
    1234:	0f 92       	push	r0
    1236:	cd b7       	in	r28, 0x3d	; 61
    1238:	de b7       	in	r29, 0x3e	; 62
    123a:	9b 83       	std	Y+3, r25	; 0x03
    123c:	8a 83       	std	Y+2, r24	; 0x02
	BOOL_t Ret=FALSE;
    123e:	19 82       	std	Y+1, r1	; 0x01
	Ret = Enqueue(&LCD_Queue, Message, QUEUE_OBJ_TYPE_LCD_MESSAGE);
    1240:	80 e3       	ldi	r24, 0x30	; 48
    1242:	91 e0       	ldi	r25, 0x01	; 1
    1244:	2a 81       	ldd	r18, Y+2	; 0x02
    1246:	3b 81       	ldd	r19, Y+3	; 0x03
    1248:	b9 01       	movw	r22, r18
    124a:	48 e0       	ldi	r20, 0x08	; 8
    124c:	0e 94 a2 09 	call	0x1344	; 0x1344 <Enqueue>
    1250:	89 83       	std	Y+1, r24	; 0x01
	return Ret;
    1252:	89 81       	ldd	r24, Y+1	; 0x01
}
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	cf 91       	pop	r28
    125c:	df 91       	pop	r29
    125e:	08 95       	ret

00001260 <Queue_Is_Full>:
#include "LCD.h"
#include "URT.h"
#include "QUEUE.h"
/****************************************************************************/
BOOL_t Queue_Is_Full(const QUEUE_t*const MyQueue)
{
    1260:	df 93       	push	r29
    1262:	cf 93       	push	r28
    1264:	00 d0       	rcall	.+0      	; 0x1266 <Queue_Is_Full+0x6>
    1266:	0f 92       	push	r0
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	9b 83       	std	Y+3, r25	; 0x03
    126e:	8a 83       	std	Y+2, r24	; 0x02
    BOOL_t Ret=FALSE;
    1270:	19 82       	std	Y+1, r1	; 0x01
    if((1+MyQueue->Rear)%MyQueue->Size==MyQueue->Front)
    1272:	ea 81       	ldd	r30, Y+2	; 0x02
    1274:	fb 81       	ldd	r31, Y+3	; 0x03
    1276:	81 81       	ldd	r24, Z+1	; 0x01
    1278:	99 27       	eor	r25, r25
    127a:	87 fd       	sbrc	r24, 7
    127c:	90 95       	com	r25
    127e:	ac 01       	movw	r20, r24
    1280:	4f 5f       	subi	r20, 0xFF	; 255
    1282:	5f 4f       	sbci	r21, 0xFF	; 255
    1284:	ea 81       	ldd	r30, Y+2	; 0x02
    1286:	fb 81       	ldd	r31, Y+3	; 0x03
    1288:	82 81       	ldd	r24, Z+2	; 0x02
    128a:	28 2f       	mov	r18, r24
    128c:	33 27       	eor	r19, r19
    128e:	27 fd       	sbrc	r18, 7
    1290:	30 95       	com	r19
    1292:	ca 01       	movw	r24, r20
    1294:	b9 01       	movw	r22, r18
    1296:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__divmodhi4>
    129a:	9c 01       	movw	r18, r24
    129c:	ea 81       	ldd	r30, Y+2	; 0x02
    129e:	fb 81       	ldd	r31, Y+3	; 0x03
    12a0:	80 81       	ld	r24, Z
    12a2:	99 27       	eor	r25, r25
    12a4:	87 fd       	sbrc	r24, 7
    12a6:	90 95       	com	r25
    12a8:	28 17       	cp	r18, r24
    12aa:	39 07       	cpc	r19, r25
    12ac:	11 f4       	brne	.+4      	; 0x12b2 <Queue_Is_Full+0x52>
    {
        Ret=TRUE;
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	89 83       	std	Y+1, r24	; 0x01
    }
    return Ret;
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    12b4:	0f 90       	pop	r0
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
    12ba:	cf 91       	pop	r28
    12bc:	df 91       	pop	r29
    12be:	08 95       	ret

000012c0 <Queue_Is_Empty>:
/****************************************************************************/
BOOL_t Queue_Is_Empty(const QUEUE_t*const MyQueue)
{
    12c0:	df 93       	push	r29
    12c2:	cf 93       	push	r28
    12c4:	00 d0       	rcall	.+0      	; 0x12c6 <Queue_Is_Empty+0x6>
    12c6:	0f 92       	push	r0
    12c8:	cd b7       	in	r28, 0x3d	; 61
    12ca:	de b7       	in	r29, 0x3e	; 62
    12cc:	9b 83       	std	Y+3, r25	; 0x03
    12ce:	8a 83       	std	Y+2, r24	; 0x02
    BOOL_t Ret=FALSE;
    12d0:	19 82       	std	Y+1, r1	; 0x01
    if(-1==MyQueue->Front&&-1==MyQueue->Rear)
    12d2:	ea 81       	ldd	r30, Y+2	; 0x02
    12d4:	fb 81       	ldd	r31, Y+3	; 0x03
    12d6:	80 81       	ld	r24, Z
    12d8:	8f 3f       	cpi	r24, 0xFF	; 255
    12da:	39 f4       	brne	.+14     	; 0x12ea <Queue_Is_Empty+0x2a>
    12dc:	ea 81       	ldd	r30, Y+2	; 0x02
    12de:	fb 81       	ldd	r31, Y+3	; 0x03
    12e0:	81 81       	ldd	r24, Z+1	; 0x01
    12e2:	8f 3f       	cpi	r24, 0xFF	; 255
    12e4:	11 f4       	brne	.+4      	; 0x12ea <Queue_Is_Empty+0x2a>
    {
        Ret=TRUE;
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	89 83       	std	Y+1, r24	; 0x01
    }
    return Ret;
    12ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    12ec:	0f 90       	pop	r0
    12ee:	0f 90       	pop	r0
    12f0:	0f 90       	pop	r0
    12f2:	cf 91       	pop	r28
    12f4:	df 91       	pop	r29
    12f6:	08 95       	ret

000012f8 <Cqueue>:
/****************************************************************************/
void Cqueue(QUEUE_t*const MyQueue, const void*const arr,const SINT8_t Size)
{
    12f8:	df 93       	push	r29
    12fa:	cf 93       	push	r28
    12fc:	00 d0       	rcall	.+0      	; 0x12fe <Cqueue+0x6>
    12fe:	00 d0       	rcall	.+0      	; 0x1300 <Cqueue+0x8>
    1300:	0f 92       	push	r0
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
    1306:	9a 83       	std	Y+2, r25	; 0x02
    1308:	89 83       	std	Y+1, r24	; 0x01
    130a:	7c 83       	std	Y+4, r23	; 0x04
    130c:	6b 83       	std	Y+3, r22	; 0x03
    130e:	4d 83       	std	Y+5, r20	; 0x05
    MyQueue->Front=-1;
    1310:	e9 81       	ldd	r30, Y+1	; 0x01
    1312:	fa 81       	ldd	r31, Y+2	; 0x02
    1314:	8f ef       	ldi	r24, 0xFF	; 255
    1316:	80 83       	st	Z, r24
    MyQueue->Rear=-1;
    1318:	e9 81       	ldd	r30, Y+1	; 0x01
    131a:	fa 81       	ldd	r31, Y+2	; 0x02
    131c:	8f ef       	ldi	r24, 0xFF	; 255
    131e:	81 83       	std	Z+1, r24	; 0x01
    MyQueue->Size=Size;
    1320:	e9 81       	ldd	r30, Y+1	; 0x01
    1322:	fa 81       	ldd	r31, Y+2	; 0x02
    1324:	8d 81       	ldd	r24, Y+5	; 0x05
    1326:	82 83       	std	Z+2, r24	; 0x02
    MyQueue->arr=arr;
    1328:	e9 81       	ldd	r30, Y+1	; 0x01
    132a:	fa 81       	ldd	r31, Y+2	; 0x02
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	9c 81       	ldd	r25, Y+4	; 0x04
    1330:	94 83       	std	Z+4, r25	; 0x04
    1332:	83 83       	std	Z+3, r24	; 0x03
}
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	0f 90       	pop	r0
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	cf 91       	pop	r28
    1340:	df 91       	pop	r29
    1342:	08 95       	ret

00001344 <Enqueue>:
/****************************************************************************/
BOOL_t Enqueue(QUEUE_t*const MyQueue,const void*const Val, const QUEUE_OBJ_t Obj_Type)
{
    1344:	df 93       	push	r29
    1346:	cf 93       	push	r28
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
    134c:	28 97       	sbiw	r28, 0x08	; 8
    134e:	0f b6       	in	r0, 0x3f	; 63
    1350:	f8 94       	cli
    1352:	de bf       	out	0x3e, r29	; 62
    1354:	0f be       	out	0x3f, r0	; 63
    1356:	cd bf       	out	0x3d, r28	; 61
    1358:	9b 83       	std	Y+3, r25	; 0x03
    135a:	8a 83       	std	Y+2, r24	; 0x02
    135c:	7d 83       	std	Y+5, r23	; 0x05
    135e:	6c 83       	std	Y+4, r22	; 0x04
    1360:	4e 83       	std	Y+6, r20	; 0x06
    BOOL_t Ret=TRUE;
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	89 83       	std	Y+1, r24	; 0x01
    /*Check if queue is full if true return without any change*/
    if(TRUE==Queue_Is_Full(MyQueue))
    1366:	8a 81       	ldd	r24, Y+2	; 0x02
    1368:	9b 81       	ldd	r25, Y+3	; 0x03
    136a:	0e 94 30 09 	call	0x1260	; 0x1260 <Queue_Is_Full>
    136e:	81 30       	cpi	r24, 0x01	; 1
    1370:	11 f4       	brne	.+4      	; 0x1376 <Enqueue+0x32>
    {
        Ret=FALSE;
    1372:	19 82       	std	Y+1, r1	; 0x01
    1374:	a4 c1       	rjmp	.+840    	; 0x16be <Enqueue+0x37a>
    }
    else
    {
        /*Check if queue is empty if true make front and rear point to first object in queue*/
        if(TRUE==Queue_Is_Empty(MyQueue))
    1376:	8a 81       	ldd	r24, Y+2	; 0x02
    1378:	9b 81       	ldd	r25, Y+3	; 0x03
    137a:	0e 94 60 09 	call	0x12c0	; 0x12c0 <Queue_Is_Empty>
    137e:	81 30       	cpi	r24, 0x01	; 1
    1380:	39 f4       	brne	.+14     	; 0x1390 <Enqueue+0x4c>
        {
            MyQueue->Front=0;
    1382:	ea 81       	ldd	r30, Y+2	; 0x02
    1384:	fb 81       	ldd	r31, Y+3	; 0x03
    1386:	10 82       	st	Z, r1
            MyQueue->Rear=0;
    1388:	ea 81       	ldd	r30, Y+2	; 0x02
    138a:	fb 81       	ldd	r31, Y+3	; 0x03
    138c:	11 82       	std	Z+1, r1	; 0x01
    138e:	17 c0       	rjmp	.+46     	; 0x13be <Enqueue+0x7a>
        }
        else
        {
            /*Check if queue is not empty and not full then increment rear circuilly*/
            MyQueue->Rear=(1+MyQueue->Rear)%MyQueue->Size;
    1390:	ea 81       	ldd	r30, Y+2	; 0x02
    1392:	fb 81       	ldd	r31, Y+3	; 0x03
    1394:	81 81       	ldd	r24, Z+1	; 0x01
    1396:	99 27       	eor	r25, r25
    1398:	87 fd       	sbrc	r24, 7
    139a:	90 95       	com	r25
    139c:	ac 01       	movw	r20, r24
    139e:	4f 5f       	subi	r20, 0xFF	; 255
    13a0:	5f 4f       	sbci	r21, 0xFF	; 255
    13a2:	ea 81       	ldd	r30, Y+2	; 0x02
    13a4:	fb 81       	ldd	r31, Y+3	; 0x03
    13a6:	82 81       	ldd	r24, Z+2	; 0x02
    13a8:	28 2f       	mov	r18, r24
    13aa:	33 27       	eor	r19, r19
    13ac:	27 fd       	sbrc	r18, 7
    13ae:	30 95       	com	r19
    13b0:	ca 01       	movw	r24, r20
    13b2:	b9 01       	movw	r22, r18
    13b4:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__divmodhi4>
    13b8:	ea 81       	ldd	r30, Y+2	; 0x02
    13ba:	fb 81       	ldd	r31, Y+3	; 0x03
    13bc:	81 83       	std	Z+1, r24	; 0x01
        }
        switch(Obj_Type)
    13be:	8e 81       	ldd	r24, Y+6	; 0x06
    13c0:	28 2f       	mov	r18, r24
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	38 87       	std	Y+8, r19	; 0x08
    13c6:	2f 83       	std	Y+7, r18	; 0x07
    13c8:	8f 81       	ldd	r24, Y+7	; 0x07
    13ca:	98 85       	ldd	r25, Y+8	; 0x08
    13cc:	84 30       	cpi	r24, 0x04	; 4
    13ce:	91 05       	cpc	r25, r1
    13d0:	09 f4       	brne	.+2      	; 0x13d4 <Enqueue+0x90>
    13d2:	c4 c0       	rjmp	.+392    	; 0x155c <Enqueue+0x218>
    13d4:	ef 81       	ldd	r30, Y+7	; 0x07
    13d6:	f8 85       	ldd	r31, Y+8	; 0x08
    13d8:	e5 30       	cpi	r30, 0x05	; 5
    13da:	f1 05       	cpc	r31, r1
    13dc:	ec f4       	brge	.+58     	; 0x1418 <Enqueue+0xd4>
    13de:	2f 81       	ldd	r18, Y+7	; 0x07
    13e0:	38 85       	ldd	r19, Y+8	; 0x08
    13e2:	21 30       	cpi	r18, 0x01	; 1
    13e4:	31 05       	cpc	r19, r1
    13e6:	09 f4       	brne	.+2      	; 0x13ea <Enqueue+0xa6>
    13e8:	4f c0       	rjmp	.+158    	; 0x1488 <Enqueue+0x144>
    13ea:	8f 81       	ldd	r24, Y+7	; 0x07
    13ec:	98 85       	ldd	r25, Y+8	; 0x08
    13ee:	82 30       	cpi	r24, 0x02	; 2
    13f0:	91 05       	cpc	r25, r1
    13f2:	2c f4       	brge	.+10     	; 0x13fe <Enqueue+0xba>
    13f4:	ef 81       	ldd	r30, Y+7	; 0x07
    13f6:	f8 85       	ldd	r31, Y+8	; 0x08
    13f8:	30 97       	sbiw	r30, 0x00	; 0
    13fa:	99 f1       	breq	.+102    	; 0x1462 <Enqueue+0x11e>
    13fc:	60 c1       	rjmp	.+704    	; 0x16be <Enqueue+0x37a>
    13fe:	2f 81       	ldd	r18, Y+7	; 0x07
    1400:	38 85       	ldd	r19, Y+8	; 0x08
    1402:	22 30       	cpi	r18, 0x02	; 2
    1404:	31 05       	cpc	r19, r1
    1406:	09 f4       	brne	.+2      	; 0x140a <Enqueue+0xc6>
    1408:	57 c0       	rjmp	.+174    	; 0x14b8 <Enqueue+0x174>
    140a:	8f 81       	ldd	r24, Y+7	; 0x07
    140c:	98 85       	ldd	r25, Y+8	; 0x08
    140e:	83 30       	cpi	r24, 0x03	; 3
    1410:	91 05       	cpc	r25, r1
    1412:	09 f4       	brne	.+2      	; 0x1416 <Enqueue+0xd2>
    1414:	6e c0       	rjmp	.+220    	; 0x14f2 <Enqueue+0x1ae>
    1416:	53 c1       	rjmp	.+678    	; 0x16be <Enqueue+0x37a>
    1418:	ef 81       	ldd	r30, Y+7	; 0x07
    141a:	f8 85       	ldd	r31, Y+8	; 0x08
    141c:	e7 30       	cpi	r30, 0x07	; 7
    141e:	f1 05       	cpc	r31, r1
    1420:	09 f4       	brne	.+2      	; 0x1424 <Enqueue+0xe0>
    1422:	e4 c0       	rjmp	.+456    	; 0x15ec <Enqueue+0x2a8>
    1424:	2f 81       	ldd	r18, Y+7	; 0x07
    1426:	38 85       	ldd	r19, Y+8	; 0x08
    1428:	28 30       	cpi	r18, 0x08	; 8
    142a:	31 05       	cpc	r19, r1
    142c:	6c f4       	brge	.+26     	; 0x1448 <Enqueue+0x104>
    142e:	8f 81       	ldd	r24, Y+7	; 0x07
    1430:	98 85       	ldd	r25, Y+8	; 0x08
    1432:	85 30       	cpi	r24, 0x05	; 5
    1434:	91 05       	cpc	r25, r1
    1436:	09 f4       	brne	.+2      	; 0x143a <Enqueue+0xf6>
    1438:	a4 c0       	rjmp	.+328    	; 0x1582 <Enqueue+0x23e>
    143a:	ef 81       	ldd	r30, Y+7	; 0x07
    143c:	f8 85       	ldd	r31, Y+8	; 0x08
    143e:	e6 30       	cpi	r30, 0x06	; 6
    1440:	f1 05       	cpc	r31, r1
    1442:	09 f4       	brne	.+2      	; 0x1446 <Enqueue+0x102>
    1444:	b6 c0       	rjmp	.+364    	; 0x15b2 <Enqueue+0x26e>
    1446:	3b c1       	rjmp	.+630    	; 0x16be <Enqueue+0x37a>
    1448:	2f 81       	ldd	r18, Y+7	; 0x07
    144a:	38 85       	ldd	r19, Y+8	; 0x08
    144c:	28 30       	cpi	r18, 0x08	; 8
    144e:	31 05       	cpc	r19, r1
    1450:	09 f4       	brne	.+2      	; 0x1454 <Enqueue+0x110>
    1452:	01 c1       	rjmp	.+514    	; 0x1656 <Enqueue+0x312>
    1454:	8f 81       	ldd	r24, Y+7	; 0x07
    1456:	98 85       	ldd	r25, Y+8	; 0x08
    1458:	89 30       	cpi	r24, 0x09	; 9
    145a:	91 05       	cpc	r25, r1
    145c:	09 f4       	brne	.+2      	; 0x1460 <Enqueue+0x11c>
    145e:	18 c1       	rjmp	.+560    	; 0x1690 <Enqueue+0x34c>
    1460:	2e c1       	rjmp	.+604    	; 0x16be <Enqueue+0x37a>
        {

        /*-****************** unsigned integer data types ********************-*/
        case QUEUE_OBJ_TYPE_UINT8:
        	*(((UINT8_t* const ) MyQueue->arr) + MyQueue->Rear)=*(const UINT8_t* const ) Val;
    1462:	ea 81       	ldd	r30, Y+2	; 0x02
    1464:	fb 81       	ldd	r31, Y+3	; 0x03
    1466:	83 81       	ldd	r24, Z+3	; 0x03
    1468:	94 81       	ldd	r25, Z+4	; 0x04
    146a:	9c 01       	movw	r18, r24
    146c:	ea 81       	ldd	r30, Y+2	; 0x02
    146e:	fb 81       	ldd	r31, Y+3	; 0x03
    1470:	81 81       	ldd	r24, Z+1	; 0x01
    1472:	99 27       	eor	r25, r25
    1474:	87 fd       	sbrc	r24, 7
    1476:	90 95       	com	r25
    1478:	d9 01       	movw	r26, r18
    147a:	a8 0f       	add	r26, r24
    147c:	b9 1f       	adc	r27, r25
    147e:	ec 81       	ldd	r30, Y+4	; 0x04
    1480:	fd 81       	ldd	r31, Y+5	; 0x05
    1482:	80 81       	ld	r24, Z
    1484:	8c 93       	st	X, r24
    1486:	1b c1       	rjmp	.+566    	; 0x16be <Enqueue+0x37a>
        	break;
        case QUEUE_OBJ_TYPE_UINT16:
        	*(((UINT16_t* const ) MyQueue->arr) + MyQueue->Rear)=*(const UINT16_t* const ) Val;
    1488:	ea 81       	ldd	r30, Y+2	; 0x02
    148a:	fb 81       	ldd	r31, Y+3	; 0x03
    148c:	83 81       	ldd	r24, Z+3	; 0x03
    148e:	94 81       	ldd	r25, Z+4	; 0x04
    1490:	9c 01       	movw	r18, r24
    1492:	ea 81       	ldd	r30, Y+2	; 0x02
    1494:	fb 81       	ldd	r31, Y+3	; 0x03
    1496:	81 81       	ldd	r24, Z+1	; 0x01
    1498:	99 27       	eor	r25, r25
    149a:	87 fd       	sbrc	r24, 7
    149c:	90 95       	com	r25
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	d9 01       	movw	r26, r18
    14a4:	a8 0f       	add	r26, r24
    14a6:	b9 1f       	adc	r27, r25
    14a8:	ec 81       	ldd	r30, Y+4	; 0x04
    14aa:	fd 81       	ldd	r31, Y+5	; 0x05
    14ac:	80 81       	ld	r24, Z
    14ae:	91 81       	ldd	r25, Z+1	; 0x01
    14b0:	11 96       	adiw	r26, 0x01	; 1
    14b2:	9c 93       	st	X, r25
    14b4:	8e 93       	st	-X, r24
    14b6:	03 c1       	rjmp	.+518    	; 0x16be <Enqueue+0x37a>
        	break;
        case QUEUE_OBJ_TYPE_UINT32:
            *(((UINT32_t*const)MyQueue->arr)+MyQueue->Rear)=*(const UINT32_t*const)Val;
    14b8:	ea 81       	ldd	r30, Y+2	; 0x02
    14ba:	fb 81       	ldd	r31, Y+3	; 0x03
    14bc:	83 81       	ldd	r24, Z+3	; 0x03
    14be:	94 81       	ldd	r25, Z+4	; 0x04
    14c0:	9c 01       	movw	r18, r24
    14c2:	ea 81       	ldd	r30, Y+2	; 0x02
    14c4:	fb 81       	ldd	r31, Y+3	; 0x03
    14c6:	81 81       	ldd	r24, Z+1	; 0x01
    14c8:	99 27       	eor	r25, r25
    14ca:	87 fd       	sbrc	r24, 7
    14cc:	90 95       	com	r25
    14ce:	88 0f       	add	r24, r24
    14d0:	99 1f       	adc	r25, r25
    14d2:	88 0f       	add	r24, r24
    14d4:	99 1f       	adc	r25, r25
    14d6:	28 0f       	add	r18, r24
    14d8:	39 1f       	adc	r19, r25
    14da:	ec 81       	ldd	r30, Y+4	; 0x04
    14dc:	fd 81       	ldd	r31, Y+5	; 0x05
    14de:	80 81       	ld	r24, Z
    14e0:	91 81       	ldd	r25, Z+1	; 0x01
    14e2:	a2 81       	ldd	r26, Z+2	; 0x02
    14e4:	b3 81       	ldd	r27, Z+3	; 0x03
    14e6:	f9 01       	movw	r30, r18
    14e8:	80 83       	st	Z, r24
    14ea:	91 83       	std	Z+1, r25	; 0x01
    14ec:	a2 83       	std	Z+2, r26	; 0x02
    14ee:	b3 83       	std	Z+3, r27	; 0x03
    14f0:	e6 c0       	rjmp	.+460    	; 0x16be <Enqueue+0x37a>
            break;
        case QUEUE_OBJ_TYPE_UINT64:
            *(((UINT64_t* const ) MyQueue->arr) + MyQueue->Rear)=*(const UINT64_t* const ) Val;
    14f2:	ea 81       	ldd	r30, Y+2	; 0x02
    14f4:	fb 81       	ldd	r31, Y+3	; 0x03
    14f6:	83 81       	ldd	r24, Z+3	; 0x03
    14f8:	94 81       	ldd	r25, Z+4	; 0x04
    14fa:	9c 01       	movw	r18, r24
    14fc:	ea 81       	ldd	r30, Y+2	; 0x02
    14fe:	fb 81       	ldd	r31, Y+3	; 0x03
    1500:	81 81       	ldd	r24, Z+1	; 0x01
    1502:	99 27       	eor	r25, r25
    1504:	87 fd       	sbrc	r24, 7
    1506:	90 95       	com	r25
    1508:	88 0f       	add	r24, r24
    150a:	99 1f       	adc	r25, r25
    150c:	88 0f       	add	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	88 0f       	add	r24, r24
    1512:	99 1f       	adc	r25, r25
    1514:	d9 01       	movw	r26, r18
    1516:	a8 0f       	add	r26, r24
    1518:	b9 1f       	adc	r27, r25
    151a:	ec 81       	ldd	r30, Y+4	; 0x04
    151c:	fd 81       	ldd	r31, Y+5	; 0x05
    151e:	20 81       	ld	r18, Z
    1520:	31 81       	ldd	r19, Z+1	; 0x01
    1522:	42 81       	ldd	r20, Z+2	; 0x02
    1524:	53 81       	ldd	r21, Z+3	; 0x03
    1526:	64 81       	ldd	r22, Z+4	; 0x04
    1528:	75 81       	ldd	r23, Z+5	; 0x05
    152a:	86 81       	ldd	r24, Z+6	; 0x06
    152c:	97 81       	ldd	r25, Z+7	; 0x07
    152e:	2c 93       	st	X, r18
    1530:	11 96       	adiw	r26, 0x01	; 1
    1532:	3c 93       	st	X, r19
    1534:	11 97       	sbiw	r26, 0x01	; 1
    1536:	12 96       	adiw	r26, 0x02	; 2
    1538:	4c 93       	st	X, r20
    153a:	12 97       	sbiw	r26, 0x02	; 2
    153c:	13 96       	adiw	r26, 0x03	; 3
    153e:	5c 93       	st	X, r21
    1540:	13 97       	sbiw	r26, 0x03	; 3
    1542:	14 96       	adiw	r26, 0x04	; 4
    1544:	6c 93       	st	X, r22
    1546:	14 97       	sbiw	r26, 0x04	; 4
    1548:	15 96       	adiw	r26, 0x05	; 5
    154a:	7c 93       	st	X, r23
    154c:	15 97       	sbiw	r26, 0x05	; 5
    154e:	16 96       	adiw	r26, 0x06	; 6
    1550:	8c 93       	st	X, r24
    1552:	16 97       	sbiw	r26, 0x06	; 6
    1554:	17 96       	adiw	r26, 0x07	; 7
    1556:	9c 93       	st	X, r25
    1558:	17 97       	sbiw	r26, 0x07	; 7
    155a:	b1 c0       	rjmp	.+354    	; 0x16be <Enqueue+0x37a>
            break;

            /*-****************** signed integer data types ********************-*/
		case QUEUE_OBJ_TYPE_SINT8:
			*(((CHAR_t* const ) MyQueue->arr) + MyQueue->Rear)=*(const CHAR_t* const ) Val;
    155c:	ea 81       	ldd	r30, Y+2	; 0x02
    155e:	fb 81       	ldd	r31, Y+3	; 0x03
    1560:	83 81       	ldd	r24, Z+3	; 0x03
    1562:	94 81       	ldd	r25, Z+4	; 0x04
    1564:	9c 01       	movw	r18, r24
    1566:	ea 81       	ldd	r30, Y+2	; 0x02
    1568:	fb 81       	ldd	r31, Y+3	; 0x03
    156a:	81 81       	ldd	r24, Z+1	; 0x01
    156c:	99 27       	eor	r25, r25
    156e:	87 fd       	sbrc	r24, 7
    1570:	90 95       	com	r25
    1572:	d9 01       	movw	r26, r18
    1574:	a8 0f       	add	r26, r24
    1576:	b9 1f       	adc	r27, r25
    1578:	ec 81       	ldd	r30, Y+4	; 0x04
    157a:	fd 81       	ldd	r31, Y+5	; 0x05
    157c:	80 81       	ld	r24, Z
    157e:	8c 93       	st	X, r24
    1580:	9e c0       	rjmp	.+316    	; 0x16be <Enqueue+0x37a>
			break;
		case QUEUE_OBJ_TYPE_SINT16:
			*(((SINT16_t* const ) MyQueue->arr) + MyQueue->Rear)=*(const SINT16_t* const ) Val;
    1582:	ea 81       	ldd	r30, Y+2	; 0x02
    1584:	fb 81       	ldd	r31, Y+3	; 0x03
    1586:	83 81       	ldd	r24, Z+3	; 0x03
    1588:	94 81       	ldd	r25, Z+4	; 0x04
    158a:	9c 01       	movw	r18, r24
    158c:	ea 81       	ldd	r30, Y+2	; 0x02
    158e:	fb 81       	ldd	r31, Y+3	; 0x03
    1590:	81 81       	ldd	r24, Z+1	; 0x01
    1592:	99 27       	eor	r25, r25
    1594:	87 fd       	sbrc	r24, 7
    1596:	90 95       	com	r25
    1598:	88 0f       	add	r24, r24
    159a:	99 1f       	adc	r25, r25
    159c:	d9 01       	movw	r26, r18
    159e:	a8 0f       	add	r26, r24
    15a0:	b9 1f       	adc	r27, r25
    15a2:	ec 81       	ldd	r30, Y+4	; 0x04
    15a4:	fd 81       	ldd	r31, Y+5	; 0x05
    15a6:	80 81       	ld	r24, Z
    15a8:	91 81       	ldd	r25, Z+1	; 0x01
    15aa:	11 96       	adiw	r26, 0x01	; 1
    15ac:	9c 93       	st	X, r25
    15ae:	8e 93       	st	-X, r24
    15b0:	86 c0       	rjmp	.+268    	; 0x16be <Enqueue+0x37a>
			break;

        case QUEUE_OBJ_TYPE_SINT32:
            *(((SINT32_t*const)MyQueue->arr)+MyQueue->Rear)=*(const SINT32_t*const)Val;
    15b2:	ea 81       	ldd	r30, Y+2	; 0x02
    15b4:	fb 81       	ldd	r31, Y+3	; 0x03
    15b6:	83 81       	ldd	r24, Z+3	; 0x03
    15b8:	94 81       	ldd	r25, Z+4	; 0x04
    15ba:	9c 01       	movw	r18, r24
    15bc:	ea 81       	ldd	r30, Y+2	; 0x02
    15be:	fb 81       	ldd	r31, Y+3	; 0x03
    15c0:	81 81       	ldd	r24, Z+1	; 0x01
    15c2:	99 27       	eor	r25, r25
    15c4:	87 fd       	sbrc	r24, 7
    15c6:	90 95       	com	r25
    15c8:	88 0f       	add	r24, r24
    15ca:	99 1f       	adc	r25, r25
    15cc:	88 0f       	add	r24, r24
    15ce:	99 1f       	adc	r25, r25
    15d0:	28 0f       	add	r18, r24
    15d2:	39 1f       	adc	r19, r25
    15d4:	ec 81       	ldd	r30, Y+4	; 0x04
    15d6:	fd 81       	ldd	r31, Y+5	; 0x05
    15d8:	80 81       	ld	r24, Z
    15da:	91 81       	ldd	r25, Z+1	; 0x01
    15dc:	a2 81       	ldd	r26, Z+2	; 0x02
    15de:	b3 81       	ldd	r27, Z+3	; 0x03
    15e0:	f9 01       	movw	r30, r18
    15e2:	80 83       	st	Z, r24
    15e4:	91 83       	std	Z+1, r25	; 0x01
    15e6:	a2 83       	std	Z+2, r26	; 0x02
    15e8:	b3 83       	std	Z+3, r27	; 0x03
    15ea:	69 c0       	rjmp	.+210    	; 0x16be <Enqueue+0x37a>
            break;
        case QUEUE_OBJ_TYPE_SINT64:
        	*(((SINT64_t* const ) MyQueue->arr) + MyQueue->Rear)=*(const SINT64_t* const ) Val;
    15ec:	ea 81       	ldd	r30, Y+2	; 0x02
    15ee:	fb 81       	ldd	r31, Y+3	; 0x03
    15f0:	83 81       	ldd	r24, Z+3	; 0x03
    15f2:	94 81       	ldd	r25, Z+4	; 0x04
    15f4:	9c 01       	movw	r18, r24
    15f6:	ea 81       	ldd	r30, Y+2	; 0x02
    15f8:	fb 81       	ldd	r31, Y+3	; 0x03
    15fa:	81 81       	ldd	r24, Z+1	; 0x01
    15fc:	99 27       	eor	r25, r25
    15fe:	87 fd       	sbrc	r24, 7
    1600:	90 95       	com	r25
    1602:	88 0f       	add	r24, r24
    1604:	99 1f       	adc	r25, r25
    1606:	88 0f       	add	r24, r24
    1608:	99 1f       	adc	r25, r25
    160a:	88 0f       	add	r24, r24
    160c:	99 1f       	adc	r25, r25
    160e:	d9 01       	movw	r26, r18
    1610:	a8 0f       	add	r26, r24
    1612:	b9 1f       	adc	r27, r25
    1614:	ec 81       	ldd	r30, Y+4	; 0x04
    1616:	fd 81       	ldd	r31, Y+5	; 0x05
    1618:	20 81       	ld	r18, Z
    161a:	31 81       	ldd	r19, Z+1	; 0x01
    161c:	42 81       	ldd	r20, Z+2	; 0x02
    161e:	53 81       	ldd	r21, Z+3	; 0x03
    1620:	64 81       	ldd	r22, Z+4	; 0x04
    1622:	75 81       	ldd	r23, Z+5	; 0x05
    1624:	86 81       	ldd	r24, Z+6	; 0x06
    1626:	97 81       	ldd	r25, Z+7	; 0x07
    1628:	2c 93       	st	X, r18
    162a:	11 96       	adiw	r26, 0x01	; 1
    162c:	3c 93       	st	X, r19
    162e:	11 97       	sbiw	r26, 0x01	; 1
    1630:	12 96       	adiw	r26, 0x02	; 2
    1632:	4c 93       	st	X, r20
    1634:	12 97       	sbiw	r26, 0x02	; 2
    1636:	13 96       	adiw	r26, 0x03	; 3
    1638:	5c 93       	st	X, r21
    163a:	13 97       	sbiw	r26, 0x03	; 3
    163c:	14 96       	adiw	r26, 0x04	; 4
    163e:	6c 93       	st	X, r22
    1640:	14 97       	sbiw	r26, 0x04	; 4
    1642:	15 96       	adiw	r26, 0x05	; 5
    1644:	7c 93       	st	X, r23
    1646:	15 97       	sbiw	r26, 0x05	; 5
    1648:	16 96       	adiw	r26, 0x06	; 6
    164a:	8c 93       	st	X, r24
    164c:	16 97       	sbiw	r26, 0x06	; 6
    164e:	17 96       	adiw	r26, 0x07	; 7
    1650:	9c 93       	st	X, r25
    1652:	17 97       	sbiw	r26, 0x07	; 7
    1654:	34 c0       	rjmp	.+104    	; 0x16be <Enqueue+0x37a>
        	break;

        	/*-****************** lcd message data type ********************-*/
        case QUEUE_OBJ_TYPE_LCD_MESSAGE:
        	*(((LCD_MESSAGE_t*const)MyQueue->arr)+MyQueue->Rear)=*(const LCD_MESSAGE_t*const)Val;
    1656:	ea 81       	ldd	r30, Y+2	; 0x02
    1658:	fb 81       	ldd	r31, Y+3	; 0x03
    165a:	83 81       	ldd	r24, Z+3	; 0x03
    165c:	94 81       	ldd	r25, Z+4	; 0x04
    165e:	9c 01       	movw	r18, r24
    1660:	ea 81       	ldd	r30, Y+2	; 0x02
    1662:	fb 81       	ldd	r31, Y+3	; 0x03
    1664:	81 81       	ldd	r24, Z+1	; 0x01
    1666:	99 27       	eor	r25, r25
    1668:	87 fd       	sbrc	r24, 7
    166a:	90 95       	com	r25
    166c:	88 0f       	add	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	88 0f       	add	r24, r24
    1672:	99 1f       	adc	r25, r25
    1674:	28 0f       	add	r18, r24
    1676:	39 1f       	adc	r19, r25
    1678:	ec 81       	ldd	r30, Y+4	; 0x04
    167a:	fd 81       	ldd	r31, Y+5	; 0x05
    167c:	80 81       	ld	r24, Z
    167e:	91 81       	ldd	r25, Z+1	; 0x01
    1680:	a2 81       	ldd	r26, Z+2	; 0x02
    1682:	b3 81       	ldd	r27, Z+3	; 0x03
    1684:	f9 01       	movw	r30, r18
    1686:	80 83       	st	Z, r24
    1688:	91 83       	std	Z+1, r25	; 0x01
    168a:	a2 83       	std	Z+2, r26	; 0x02
    168c:	b3 83       	std	Z+3, r27	; 0x03
    168e:	17 c0       	rjmp	.+46     	; 0x16be <Enqueue+0x37a>
        	break;

        	/*-****************** URT message data type ********************-*/
        case QUEUE_OBJ_TYPE_URT_MESSAGE:
        	*(((URT_MESSAGE_t*const)MyQueue->arr)+MyQueue->Rear)=*(const URT_MESSAGE_t*const)Val;
    1690:	ea 81       	ldd	r30, Y+2	; 0x02
    1692:	fb 81       	ldd	r31, Y+3	; 0x03
    1694:	83 81       	ldd	r24, Z+3	; 0x03
    1696:	94 81       	ldd	r25, Z+4	; 0x04
    1698:	9c 01       	movw	r18, r24
    169a:	ea 81       	ldd	r30, Y+2	; 0x02
    169c:	fb 81       	ldd	r31, Y+3	; 0x03
    169e:	81 81       	ldd	r24, Z+1	; 0x01
    16a0:	99 27       	eor	r25, r25
    16a2:	87 fd       	sbrc	r24, 7
    16a4:	90 95       	com	r25
    16a6:	88 0f       	add	r24, r24
    16a8:	99 1f       	adc	r25, r25
    16aa:	d9 01       	movw	r26, r18
    16ac:	a8 0f       	add	r26, r24
    16ae:	b9 1f       	adc	r27, r25
    16b0:	ec 81       	ldd	r30, Y+4	; 0x04
    16b2:	fd 81       	ldd	r31, Y+5	; 0x05
    16b4:	80 81       	ld	r24, Z
    16b6:	91 81       	ldd	r25, Z+1	; 0x01
    16b8:	11 96       	adiw	r26, 0x01	; 1
    16ba:	9c 93       	st	X, r25
    16bc:	8e 93       	st	-X, r24
        	break;
        default:
            break;
        }
    }
    return Ret;
    16be:	89 81       	ldd	r24, Y+1	; 0x01
}
    16c0:	28 96       	adiw	r28, 0x08	; 8
    16c2:	0f b6       	in	r0, 0x3f	; 63
    16c4:	f8 94       	cli
    16c6:	de bf       	out	0x3e, r29	; 62
    16c8:	0f be       	out	0x3f, r0	; 63
    16ca:	cd bf       	out	0x3d, r28	; 61
    16cc:	cf 91       	pop	r28
    16ce:	df 91       	pop	r29
    16d0:	08 95       	ret

000016d2 <Dequeue>:
/****************************************************************************/
BOOL_t Dequeue(QUEUE_t*const MyQueue,void*const Ret_Val,const QUEUE_OBJ_t Obj_Type)
{
    16d2:	df 93       	push	r29
    16d4:	cf 93       	push	r28
    16d6:	cd b7       	in	r28, 0x3d	; 61
    16d8:	de b7       	in	r29, 0x3e	; 62
    16da:	28 97       	sbiw	r28, 0x08	; 8
    16dc:	0f b6       	in	r0, 0x3f	; 63
    16de:	f8 94       	cli
    16e0:	de bf       	out	0x3e, r29	; 62
    16e2:	0f be       	out	0x3f, r0	; 63
    16e4:	cd bf       	out	0x3d, r28	; 61
    16e6:	9b 83       	std	Y+3, r25	; 0x03
    16e8:	8a 83       	std	Y+2, r24	; 0x02
    16ea:	7d 83       	std	Y+5, r23	; 0x05
    16ec:	6c 83       	std	Y+4, r22	; 0x04
    16ee:	4e 83       	std	Y+6, r20	; 0x06
    BOOL_t Ret=TRUE;
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	89 83       	std	Y+1, r24	; 0x01
    /*Check if queue is empty if true return without any change*/
    if(TRUE==Queue_Is_Empty(MyQueue))
    16f4:	8a 81       	ldd	r24, Y+2	; 0x02
    16f6:	9b 81       	ldd	r25, Y+3	; 0x03
    16f8:	0e 94 60 09 	call	0x12c0	; 0x12c0 <Queue_Is_Empty>
    16fc:	81 30       	cpi	r24, 0x01	; 1
    16fe:	11 f4       	brne	.+4      	; 0x1704 <Dequeue+0x32>
    {
        Ret=FALSE;
    1700:	19 82       	std	Y+1, r1	; 0x01
    1702:	ab c1       	rjmp	.+854    	; 0x1a5a <Dequeue+0x388>
    }
    else
    {
        /*Find the required data type for the required object and return its value from required queue*/
        switch(Obj_Type)
    1704:	8e 81       	ldd	r24, Y+6	; 0x06
    1706:	28 2f       	mov	r18, r24
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	38 87       	std	Y+8, r19	; 0x08
    170c:	2f 83       	std	Y+7, r18	; 0x07
    170e:	8f 81       	ldd	r24, Y+7	; 0x07
    1710:	98 85       	ldd	r25, Y+8	; 0x08
    1712:	84 30       	cpi	r24, 0x04	; 4
    1714:	91 05       	cpc	r25, r1
    1716:	09 f4       	brne	.+2      	; 0x171a <Dequeue+0x48>
    1718:	c5 c0       	rjmp	.+394    	; 0x18a4 <Dequeue+0x1d2>
    171a:	ef 81       	ldd	r30, Y+7	; 0x07
    171c:	f8 85       	ldd	r31, Y+8	; 0x08
    171e:	e5 30       	cpi	r30, 0x05	; 5
    1720:	f1 05       	cpc	r31, r1
    1722:	ec f4       	brge	.+58     	; 0x175e <Dequeue+0x8c>
    1724:	2f 81       	ldd	r18, Y+7	; 0x07
    1726:	38 85       	ldd	r19, Y+8	; 0x08
    1728:	21 30       	cpi	r18, 0x01	; 1
    172a:	31 05       	cpc	r19, r1
    172c:	09 f4       	brne	.+2      	; 0x1730 <Dequeue+0x5e>
    172e:	4f c0       	rjmp	.+158    	; 0x17ce <Dequeue+0xfc>
    1730:	8f 81       	ldd	r24, Y+7	; 0x07
    1732:	98 85       	ldd	r25, Y+8	; 0x08
    1734:	82 30       	cpi	r24, 0x02	; 2
    1736:	91 05       	cpc	r25, r1
    1738:	2c f4       	brge	.+10     	; 0x1744 <Dequeue+0x72>
    173a:	ef 81       	ldd	r30, Y+7	; 0x07
    173c:	f8 85       	ldd	r31, Y+8	; 0x08
    173e:	30 97       	sbiw	r30, 0x00	; 0
    1740:	99 f1       	breq	.+102    	; 0x17a8 <Dequeue+0xd6>
    1742:	63 c1       	rjmp	.+710    	; 0x1a0a <Dequeue+0x338>
    1744:	2f 81       	ldd	r18, Y+7	; 0x07
    1746:	38 85       	ldd	r19, Y+8	; 0x08
    1748:	22 30       	cpi	r18, 0x02	; 2
    174a:	31 05       	cpc	r19, r1
    174c:	09 f4       	brne	.+2      	; 0x1750 <Dequeue+0x7e>
    174e:	57 c0       	rjmp	.+174    	; 0x17fe <Dequeue+0x12c>
    1750:	8f 81       	ldd	r24, Y+7	; 0x07
    1752:	98 85       	ldd	r25, Y+8	; 0x08
    1754:	83 30       	cpi	r24, 0x03	; 3
    1756:	91 05       	cpc	r25, r1
    1758:	09 f4       	brne	.+2      	; 0x175c <Dequeue+0x8a>
    175a:	6f c0       	rjmp	.+222    	; 0x183a <Dequeue+0x168>
    175c:	56 c1       	rjmp	.+684    	; 0x1a0a <Dequeue+0x338>
    175e:	ef 81       	ldd	r30, Y+7	; 0x07
    1760:	f8 85       	ldd	r31, Y+8	; 0x08
    1762:	e7 30       	cpi	r30, 0x07	; 7
    1764:	f1 05       	cpc	r31, r1
    1766:	09 f4       	brne	.+2      	; 0x176a <Dequeue+0x98>
    1768:	e6 c0       	rjmp	.+460    	; 0x1936 <Dequeue+0x264>
    176a:	2f 81       	ldd	r18, Y+7	; 0x07
    176c:	38 85       	ldd	r19, Y+8	; 0x08
    176e:	28 30       	cpi	r18, 0x08	; 8
    1770:	31 05       	cpc	r19, r1
    1772:	6c f4       	brge	.+26     	; 0x178e <Dequeue+0xbc>
    1774:	8f 81       	ldd	r24, Y+7	; 0x07
    1776:	98 85       	ldd	r25, Y+8	; 0x08
    1778:	85 30       	cpi	r24, 0x05	; 5
    177a:	91 05       	cpc	r25, r1
    177c:	09 f4       	brne	.+2      	; 0x1780 <Dequeue+0xae>
    177e:	a5 c0       	rjmp	.+330    	; 0x18ca <Dequeue+0x1f8>
    1780:	ef 81       	ldd	r30, Y+7	; 0x07
    1782:	f8 85       	ldd	r31, Y+8	; 0x08
    1784:	e6 30       	cpi	r30, 0x06	; 6
    1786:	f1 05       	cpc	r31, r1
    1788:	09 f4       	brne	.+2      	; 0x178c <Dequeue+0xba>
    178a:	b7 c0       	rjmp	.+366    	; 0x18fa <Dequeue+0x228>
    178c:	3e c1       	rjmp	.+636    	; 0x1a0a <Dequeue+0x338>
    178e:	2f 81       	ldd	r18, Y+7	; 0x07
    1790:	38 85       	ldd	r19, Y+8	; 0x08
    1792:	28 30       	cpi	r18, 0x08	; 8
    1794:	31 05       	cpc	r19, r1
    1796:	09 f4       	brne	.+2      	; 0x179a <Dequeue+0xc8>
    1798:	03 c1       	rjmp	.+518    	; 0x19a0 <Dequeue+0x2ce>
    179a:	8f 81       	ldd	r24, Y+7	; 0x07
    179c:	98 85       	ldd	r25, Y+8	; 0x08
    179e:	89 30       	cpi	r24, 0x09	; 9
    17a0:	91 05       	cpc	r25, r1
    17a2:	09 f4       	brne	.+2      	; 0x17a6 <Dequeue+0xd4>
    17a4:	1b c1       	rjmp	.+566    	; 0x19dc <Dequeue+0x30a>
    17a6:	31 c1       	rjmp	.+610    	; 0x1a0a <Dequeue+0x338>
        {
        		/*-****************** unsigned integer data types ********************-*/
        case QUEUE_OBJ_TYPE_UINT8:
            *(UINT8_t*const)Ret_Val=*(((UINT8_t*const)MyQueue->arr)+MyQueue->Front);
    17a8:	ac 81       	ldd	r26, Y+4	; 0x04
    17aa:	bd 81       	ldd	r27, Y+5	; 0x05
    17ac:	ea 81       	ldd	r30, Y+2	; 0x02
    17ae:	fb 81       	ldd	r31, Y+3	; 0x03
    17b0:	83 81       	ldd	r24, Z+3	; 0x03
    17b2:	94 81       	ldd	r25, Z+4	; 0x04
    17b4:	9c 01       	movw	r18, r24
    17b6:	ea 81       	ldd	r30, Y+2	; 0x02
    17b8:	fb 81       	ldd	r31, Y+3	; 0x03
    17ba:	80 81       	ld	r24, Z
    17bc:	99 27       	eor	r25, r25
    17be:	87 fd       	sbrc	r24, 7
    17c0:	90 95       	com	r25
    17c2:	f9 01       	movw	r30, r18
    17c4:	e8 0f       	add	r30, r24
    17c6:	f9 1f       	adc	r31, r25
    17c8:	80 81       	ld	r24, Z
    17ca:	8c 93       	st	X, r24
    17cc:	1e c1       	rjmp	.+572    	; 0x1a0a <Dequeue+0x338>
            break;
        case QUEUE_OBJ_TYPE_UINT16:
            *(UINT16_t*const)Ret_Val=*(((UINT16_t*const)MyQueue->arr)+MyQueue->Front);
    17ce:	ac 81       	ldd	r26, Y+4	; 0x04
    17d0:	bd 81       	ldd	r27, Y+5	; 0x05
    17d2:	ea 81       	ldd	r30, Y+2	; 0x02
    17d4:	fb 81       	ldd	r31, Y+3	; 0x03
    17d6:	83 81       	ldd	r24, Z+3	; 0x03
    17d8:	94 81       	ldd	r25, Z+4	; 0x04
    17da:	9c 01       	movw	r18, r24
    17dc:	ea 81       	ldd	r30, Y+2	; 0x02
    17de:	fb 81       	ldd	r31, Y+3	; 0x03
    17e0:	80 81       	ld	r24, Z
    17e2:	99 27       	eor	r25, r25
    17e4:	87 fd       	sbrc	r24, 7
    17e6:	90 95       	com	r25
    17e8:	88 0f       	add	r24, r24
    17ea:	99 1f       	adc	r25, r25
    17ec:	f9 01       	movw	r30, r18
    17ee:	e8 0f       	add	r30, r24
    17f0:	f9 1f       	adc	r31, r25
    17f2:	80 81       	ld	r24, Z
    17f4:	91 81       	ldd	r25, Z+1	; 0x01
    17f6:	11 96       	adiw	r26, 0x01	; 1
    17f8:	9c 93       	st	X, r25
    17fa:	8e 93       	st	-X, r24
    17fc:	06 c1       	rjmp	.+524    	; 0x1a0a <Dequeue+0x338>
            break;
        case QUEUE_OBJ_TYPE_UINT32:
            *(UINT32_t*const)Ret_Val=*(((UINT32_t*const)MyQueue->arr)+MyQueue->Front);
    17fe:	4c 81       	ldd	r20, Y+4	; 0x04
    1800:	5d 81       	ldd	r21, Y+5	; 0x05
    1802:	ea 81       	ldd	r30, Y+2	; 0x02
    1804:	fb 81       	ldd	r31, Y+3	; 0x03
    1806:	83 81       	ldd	r24, Z+3	; 0x03
    1808:	94 81       	ldd	r25, Z+4	; 0x04
    180a:	9c 01       	movw	r18, r24
    180c:	ea 81       	ldd	r30, Y+2	; 0x02
    180e:	fb 81       	ldd	r31, Y+3	; 0x03
    1810:	80 81       	ld	r24, Z
    1812:	99 27       	eor	r25, r25
    1814:	87 fd       	sbrc	r24, 7
    1816:	90 95       	com	r25
    1818:	88 0f       	add	r24, r24
    181a:	99 1f       	adc	r25, r25
    181c:	88 0f       	add	r24, r24
    181e:	99 1f       	adc	r25, r25
    1820:	f9 01       	movw	r30, r18
    1822:	e8 0f       	add	r30, r24
    1824:	f9 1f       	adc	r31, r25
    1826:	80 81       	ld	r24, Z
    1828:	91 81       	ldd	r25, Z+1	; 0x01
    182a:	a2 81       	ldd	r26, Z+2	; 0x02
    182c:	b3 81       	ldd	r27, Z+3	; 0x03
    182e:	fa 01       	movw	r30, r20
    1830:	80 83       	st	Z, r24
    1832:	91 83       	std	Z+1, r25	; 0x01
    1834:	a2 83       	std	Z+2, r26	; 0x02
    1836:	b3 83       	std	Z+3, r27	; 0x03
    1838:	e8 c0       	rjmp	.+464    	; 0x1a0a <Dequeue+0x338>
            break;
        case QUEUE_OBJ_TYPE_UINT64:
            *(UINT64_t*const)Ret_Val=*(((UINT64_t*const)MyQueue->arr)+MyQueue->Front);
    183a:	ac 81       	ldd	r26, Y+4	; 0x04
    183c:	bd 81       	ldd	r27, Y+5	; 0x05
    183e:	ea 81       	ldd	r30, Y+2	; 0x02
    1840:	fb 81       	ldd	r31, Y+3	; 0x03
    1842:	83 81       	ldd	r24, Z+3	; 0x03
    1844:	94 81       	ldd	r25, Z+4	; 0x04
    1846:	9c 01       	movw	r18, r24
    1848:	ea 81       	ldd	r30, Y+2	; 0x02
    184a:	fb 81       	ldd	r31, Y+3	; 0x03
    184c:	80 81       	ld	r24, Z
    184e:	99 27       	eor	r25, r25
    1850:	87 fd       	sbrc	r24, 7
    1852:	90 95       	com	r25
    1854:	88 0f       	add	r24, r24
    1856:	99 1f       	adc	r25, r25
    1858:	88 0f       	add	r24, r24
    185a:	99 1f       	adc	r25, r25
    185c:	88 0f       	add	r24, r24
    185e:	99 1f       	adc	r25, r25
    1860:	f9 01       	movw	r30, r18
    1862:	e8 0f       	add	r30, r24
    1864:	f9 1f       	adc	r31, r25
    1866:	20 81       	ld	r18, Z
    1868:	31 81       	ldd	r19, Z+1	; 0x01
    186a:	42 81       	ldd	r20, Z+2	; 0x02
    186c:	53 81       	ldd	r21, Z+3	; 0x03
    186e:	64 81       	ldd	r22, Z+4	; 0x04
    1870:	75 81       	ldd	r23, Z+5	; 0x05
    1872:	86 81       	ldd	r24, Z+6	; 0x06
    1874:	97 81       	ldd	r25, Z+7	; 0x07
    1876:	2c 93       	st	X, r18
    1878:	11 96       	adiw	r26, 0x01	; 1
    187a:	3c 93       	st	X, r19
    187c:	11 97       	sbiw	r26, 0x01	; 1
    187e:	12 96       	adiw	r26, 0x02	; 2
    1880:	4c 93       	st	X, r20
    1882:	12 97       	sbiw	r26, 0x02	; 2
    1884:	13 96       	adiw	r26, 0x03	; 3
    1886:	5c 93       	st	X, r21
    1888:	13 97       	sbiw	r26, 0x03	; 3
    188a:	14 96       	adiw	r26, 0x04	; 4
    188c:	6c 93       	st	X, r22
    188e:	14 97       	sbiw	r26, 0x04	; 4
    1890:	15 96       	adiw	r26, 0x05	; 5
    1892:	7c 93       	st	X, r23
    1894:	15 97       	sbiw	r26, 0x05	; 5
    1896:	16 96       	adiw	r26, 0x06	; 6
    1898:	8c 93       	st	X, r24
    189a:	16 97       	sbiw	r26, 0x06	; 6
    189c:	17 96       	adiw	r26, 0x07	; 7
    189e:	9c 93       	st	X, r25
    18a0:	17 97       	sbiw	r26, 0x07	; 7
    18a2:	b3 c0       	rjmp	.+358    	; 0x1a0a <Dequeue+0x338>
            break;

            /*-****************** signed integer data types ********************-*/
        case QUEUE_OBJ_TYPE_SINT8:
            *(CHAR_t*const)Ret_Val=*(((CHAR_t*const)MyQueue->arr)+MyQueue->Front);
    18a4:	ac 81       	ldd	r26, Y+4	; 0x04
    18a6:	bd 81       	ldd	r27, Y+5	; 0x05
    18a8:	ea 81       	ldd	r30, Y+2	; 0x02
    18aa:	fb 81       	ldd	r31, Y+3	; 0x03
    18ac:	83 81       	ldd	r24, Z+3	; 0x03
    18ae:	94 81       	ldd	r25, Z+4	; 0x04
    18b0:	9c 01       	movw	r18, r24
    18b2:	ea 81       	ldd	r30, Y+2	; 0x02
    18b4:	fb 81       	ldd	r31, Y+3	; 0x03
    18b6:	80 81       	ld	r24, Z
    18b8:	99 27       	eor	r25, r25
    18ba:	87 fd       	sbrc	r24, 7
    18bc:	90 95       	com	r25
    18be:	f9 01       	movw	r30, r18
    18c0:	e8 0f       	add	r30, r24
    18c2:	f9 1f       	adc	r31, r25
    18c4:	80 81       	ld	r24, Z
    18c6:	8c 93       	st	X, r24
    18c8:	a0 c0       	rjmp	.+320    	; 0x1a0a <Dequeue+0x338>
            break;
        case QUEUE_OBJ_TYPE_SINT16:
            *(SINT16_t*const)Ret_Val=*(((SINT16_t*const)MyQueue->arr)+MyQueue->Front);
    18ca:	ac 81       	ldd	r26, Y+4	; 0x04
    18cc:	bd 81       	ldd	r27, Y+5	; 0x05
    18ce:	ea 81       	ldd	r30, Y+2	; 0x02
    18d0:	fb 81       	ldd	r31, Y+3	; 0x03
    18d2:	83 81       	ldd	r24, Z+3	; 0x03
    18d4:	94 81       	ldd	r25, Z+4	; 0x04
    18d6:	9c 01       	movw	r18, r24
    18d8:	ea 81       	ldd	r30, Y+2	; 0x02
    18da:	fb 81       	ldd	r31, Y+3	; 0x03
    18dc:	80 81       	ld	r24, Z
    18de:	99 27       	eor	r25, r25
    18e0:	87 fd       	sbrc	r24, 7
    18e2:	90 95       	com	r25
    18e4:	88 0f       	add	r24, r24
    18e6:	99 1f       	adc	r25, r25
    18e8:	f9 01       	movw	r30, r18
    18ea:	e8 0f       	add	r30, r24
    18ec:	f9 1f       	adc	r31, r25
    18ee:	80 81       	ld	r24, Z
    18f0:	91 81       	ldd	r25, Z+1	; 0x01
    18f2:	11 96       	adiw	r26, 0x01	; 1
    18f4:	9c 93       	st	X, r25
    18f6:	8e 93       	st	-X, r24
    18f8:	88 c0       	rjmp	.+272    	; 0x1a0a <Dequeue+0x338>
            break;
        case QUEUE_OBJ_TYPE_SINT32:
            *(SINT32_t*const)Ret_Val=*(((SINT32_t*const)MyQueue->arr)+MyQueue->Front);
    18fa:	4c 81       	ldd	r20, Y+4	; 0x04
    18fc:	5d 81       	ldd	r21, Y+5	; 0x05
    18fe:	ea 81       	ldd	r30, Y+2	; 0x02
    1900:	fb 81       	ldd	r31, Y+3	; 0x03
    1902:	83 81       	ldd	r24, Z+3	; 0x03
    1904:	94 81       	ldd	r25, Z+4	; 0x04
    1906:	9c 01       	movw	r18, r24
    1908:	ea 81       	ldd	r30, Y+2	; 0x02
    190a:	fb 81       	ldd	r31, Y+3	; 0x03
    190c:	80 81       	ld	r24, Z
    190e:	99 27       	eor	r25, r25
    1910:	87 fd       	sbrc	r24, 7
    1912:	90 95       	com	r25
    1914:	88 0f       	add	r24, r24
    1916:	99 1f       	adc	r25, r25
    1918:	88 0f       	add	r24, r24
    191a:	99 1f       	adc	r25, r25
    191c:	f9 01       	movw	r30, r18
    191e:	e8 0f       	add	r30, r24
    1920:	f9 1f       	adc	r31, r25
    1922:	80 81       	ld	r24, Z
    1924:	91 81       	ldd	r25, Z+1	; 0x01
    1926:	a2 81       	ldd	r26, Z+2	; 0x02
    1928:	b3 81       	ldd	r27, Z+3	; 0x03
    192a:	fa 01       	movw	r30, r20
    192c:	80 83       	st	Z, r24
    192e:	91 83       	std	Z+1, r25	; 0x01
    1930:	a2 83       	std	Z+2, r26	; 0x02
    1932:	b3 83       	std	Z+3, r27	; 0x03
    1934:	6a c0       	rjmp	.+212    	; 0x1a0a <Dequeue+0x338>
            break;
        case QUEUE_OBJ_TYPE_SINT64:
            *(SINT64_t*const)Ret_Val=*(((SINT64_t*const)MyQueue->arr)+MyQueue->Front);
    1936:	ac 81       	ldd	r26, Y+4	; 0x04
    1938:	bd 81       	ldd	r27, Y+5	; 0x05
    193a:	ea 81       	ldd	r30, Y+2	; 0x02
    193c:	fb 81       	ldd	r31, Y+3	; 0x03
    193e:	83 81       	ldd	r24, Z+3	; 0x03
    1940:	94 81       	ldd	r25, Z+4	; 0x04
    1942:	9c 01       	movw	r18, r24
    1944:	ea 81       	ldd	r30, Y+2	; 0x02
    1946:	fb 81       	ldd	r31, Y+3	; 0x03
    1948:	80 81       	ld	r24, Z
    194a:	99 27       	eor	r25, r25
    194c:	87 fd       	sbrc	r24, 7
    194e:	90 95       	com	r25
    1950:	88 0f       	add	r24, r24
    1952:	99 1f       	adc	r25, r25
    1954:	88 0f       	add	r24, r24
    1956:	99 1f       	adc	r25, r25
    1958:	88 0f       	add	r24, r24
    195a:	99 1f       	adc	r25, r25
    195c:	f9 01       	movw	r30, r18
    195e:	e8 0f       	add	r30, r24
    1960:	f9 1f       	adc	r31, r25
    1962:	20 81       	ld	r18, Z
    1964:	31 81       	ldd	r19, Z+1	; 0x01
    1966:	42 81       	ldd	r20, Z+2	; 0x02
    1968:	53 81       	ldd	r21, Z+3	; 0x03
    196a:	64 81       	ldd	r22, Z+4	; 0x04
    196c:	75 81       	ldd	r23, Z+5	; 0x05
    196e:	86 81       	ldd	r24, Z+6	; 0x06
    1970:	97 81       	ldd	r25, Z+7	; 0x07
    1972:	2c 93       	st	X, r18
    1974:	11 96       	adiw	r26, 0x01	; 1
    1976:	3c 93       	st	X, r19
    1978:	11 97       	sbiw	r26, 0x01	; 1
    197a:	12 96       	adiw	r26, 0x02	; 2
    197c:	4c 93       	st	X, r20
    197e:	12 97       	sbiw	r26, 0x02	; 2
    1980:	13 96       	adiw	r26, 0x03	; 3
    1982:	5c 93       	st	X, r21
    1984:	13 97       	sbiw	r26, 0x03	; 3
    1986:	14 96       	adiw	r26, 0x04	; 4
    1988:	6c 93       	st	X, r22
    198a:	14 97       	sbiw	r26, 0x04	; 4
    198c:	15 96       	adiw	r26, 0x05	; 5
    198e:	7c 93       	st	X, r23
    1990:	15 97       	sbiw	r26, 0x05	; 5
    1992:	16 96       	adiw	r26, 0x06	; 6
    1994:	8c 93       	st	X, r24
    1996:	16 97       	sbiw	r26, 0x06	; 6
    1998:	17 96       	adiw	r26, 0x07	; 7
    199a:	9c 93       	st	X, r25
    199c:	17 97       	sbiw	r26, 0x07	; 7
    199e:	35 c0       	rjmp	.+106    	; 0x1a0a <Dequeue+0x338>
            break;

            /*-****************** lcd message data type ********************-*/
        case QUEUE_OBJ_TYPE_LCD_MESSAGE:
        	*(LCD_MESSAGE_t*const)Ret_Val=*(((LCD_MESSAGE_t*const)MyQueue->arr)+MyQueue->Front);
    19a0:	4c 81       	ldd	r20, Y+4	; 0x04
    19a2:	5d 81       	ldd	r21, Y+5	; 0x05
    19a4:	ea 81       	ldd	r30, Y+2	; 0x02
    19a6:	fb 81       	ldd	r31, Y+3	; 0x03
    19a8:	83 81       	ldd	r24, Z+3	; 0x03
    19aa:	94 81       	ldd	r25, Z+4	; 0x04
    19ac:	9c 01       	movw	r18, r24
    19ae:	ea 81       	ldd	r30, Y+2	; 0x02
    19b0:	fb 81       	ldd	r31, Y+3	; 0x03
    19b2:	80 81       	ld	r24, Z
    19b4:	99 27       	eor	r25, r25
    19b6:	87 fd       	sbrc	r24, 7
    19b8:	90 95       	com	r25
    19ba:	88 0f       	add	r24, r24
    19bc:	99 1f       	adc	r25, r25
    19be:	88 0f       	add	r24, r24
    19c0:	99 1f       	adc	r25, r25
    19c2:	f9 01       	movw	r30, r18
    19c4:	e8 0f       	add	r30, r24
    19c6:	f9 1f       	adc	r31, r25
    19c8:	80 81       	ld	r24, Z
    19ca:	91 81       	ldd	r25, Z+1	; 0x01
    19cc:	a2 81       	ldd	r26, Z+2	; 0x02
    19ce:	b3 81       	ldd	r27, Z+3	; 0x03
    19d0:	fa 01       	movw	r30, r20
    19d2:	80 83       	st	Z, r24
    19d4:	91 83       	std	Z+1, r25	; 0x01
    19d6:	a2 83       	std	Z+2, r26	; 0x02
    19d8:	b3 83       	std	Z+3, r27	; 0x03
    19da:	17 c0       	rjmp	.+46     	; 0x1a0a <Dequeue+0x338>
        	break;

        	/*-****************** lcd message data type ********************-*/
        case QUEUE_OBJ_TYPE_URT_MESSAGE:
        	*(URT_MESSAGE_t*const)Ret_Val=*(((URT_MESSAGE_t*const)MyQueue->arr)+MyQueue->Front);
    19dc:	ac 81       	ldd	r26, Y+4	; 0x04
    19de:	bd 81       	ldd	r27, Y+5	; 0x05
    19e0:	ea 81       	ldd	r30, Y+2	; 0x02
    19e2:	fb 81       	ldd	r31, Y+3	; 0x03
    19e4:	83 81       	ldd	r24, Z+3	; 0x03
    19e6:	94 81       	ldd	r25, Z+4	; 0x04
    19e8:	9c 01       	movw	r18, r24
    19ea:	ea 81       	ldd	r30, Y+2	; 0x02
    19ec:	fb 81       	ldd	r31, Y+3	; 0x03
    19ee:	80 81       	ld	r24, Z
    19f0:	99 27       	eor	r25, r25
    19f2:	87 fd       	sbrc	r24, 7
    19f4:	90 95       	com	r25
    19f6:	88 0f       	add	r24, r24
    19f8:	99 1f       	adc	r25, r25
    19fa:	f9 01       	movw	r30, r18
    19fc:	e8 0f       	add	r30, r24
    19fe:	f9 1f       	adc	r31, r25
    1a00:	80 81       	ld	r24, Z
    1a02:	91 81       	ldd	r25, Z+1	; 0x01
    1a04:	11 96       	adiw	r26, 0x01	; 1
    1a06:	9c 93       	st	X, r25
    1a08:	8e 93       	st	-X, r24
        	break;
        default:
            break;
        }
        /*Check if queue has only one object*/
        if(MyQueue->Front==MyQueue->Rear)
    1a0a:	ea 81       	ldd	r30, Y+2	; 0x02
    1a0c:	fb 81       	ldd	r31, Y+3	; 0x03
    1a0e:	90 81       	ld	r25, Z
    1a10:	ea 81       	ldd	r30, Y+2	; 0x02
    1a12:	fb 81       	ldd	r31, Y+3	; 0x03
    1a14:	81 81       	ldd	r24, Z+1	; 0x01
    1a16:	98 17       	cp	r25, r24
    1a18:	49 f4       	brne	.+18     	; 0x1a2c <Dequeue+0x35a>
        {
            MyQueue->Front=-1;
    1a1a:	ea 81       	ldd	r30, Y+2	; 0x02
    1a1c:	fb 81       	ldd	r31, Y+3	; 0x03
    1a1e:	8f ef       	ldi	r24, 0xFF	; 255
    1a20:	80 83       	st	Z, r24
            MyQueue->Rear=-1;
    1a22:	ea 81       	ldd	r30, Y+2	; 0x02
    1a24:	fb 81       	ldd	r31, Y+3	; 0x03
    1a26:	8f ef       	ldi	r24, 0xFF	; 255
    1a28:	81 83       	std	Z+1, r24	; 0x01
    1a2a:	17 c0       	rjmp	.+46     	; 0x1a5a <Dequeue+0x388>
        }
        else
        {
            MyQueue->Front=(1+MyQueue->Front)%MyQueue->Size;
    1a2c:	ea 81       	ldd	r30, Y+2	; 0x02
    1a2e:	fb 81       	ldd	r31, Y+3	; 0x03
    1a30:	80 81       	ld	r24, Z
    1a32:	99 27       	eor	r25, r25
    1a34:	87 fd       	sbrc	r24, 7
    1a36:	90 95       	com	r25
    1a38:	ac 01       	movw	r20, r24
    1a3a:	4f 5f       	subi	r20, 0xFF	; 255
    1a3c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a3e:	ea 81       	ldd	r30, Y+2	; 0x02
    1a40:	fb 81       	ldd	r31, Y+3	; 0x03
    1a42:	82 81       	ldd	r24, Z+2	; 0x02
    1a44:	28 2f       	mov	r18, r24
    1a46:	33 27       	eor	r19, r19
    1a48:	27 fd       	sbrc	r18, 7
    1a4a:	30 95       	com	r19
    1a4c:	ca 01       	movw	r24, r20
    1a4e:	b9 01       	movw	r22, r18
    1a50:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__divmodhi4>
    1a54:	ea 81       	ldd	r30, Y+2	; 0x02
    1a56:	fb 81       	ldd	r31, Y+3	; 0x03
    1a58:	80 83       	st	Z, r24
        }
    }
    return Ret;
    1a5a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a5c:	28 96       	adiw	r28, 0x08	; 8
    1a5e:	0f b6       	in	r0, 0x3f	; 63
    1a60:	f8 94       	cli
    1a62:	de bf       	out	0x3e, r29	; 62
    1a64:	0f be       	out	0x3f, r0	; 63
    1a66:	cd bf       	out	0x3d, r28	; 61
    1a68:	cf 91       	pop	r28
    1a6a:	df 91       	pop	r29
    1a6c:	08 95       	ret

00001a6e <TMP_Sensor_Init>:
#include "TMP_SENSOR.h"
/****************************************************************************/
volatile static BOOL_t ADC_Finished = FALSE;
static UINT32_t TMP_Reading;
/****************************************************************************/
void TMP_Sensor_Init(void){
    1a6e:	df 93       	push	r29
    1a70:	cf 93       	push	r28
    1a72:	cd b7       	in	r28, 0x3d	; 61
    1a74:	de b7       	in	r29, 0x3e	; 62
	ADC_Init();
    1a76:	0e 94 1a 01 	call	0x234	; 0x234 <ADC_Init>
	ADC_Set_Prescaler(DF128);
    1a7a:	87 e0       	ldi	r24, 0x07	; 7
    1a7c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <ADC_Set_Prescaler>
	ADC_Interrupt(ENABLE);
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	0e 94 b0 00 	call	0x160	; 0x160 <ADC_Interrupt>
	ADC(ENABLE);
    1a86:	80 e0       	ldi	r24, 0x00	; 0
    1a88:	0e 94 49 00 	call	0x92	; 0x92 <ADC>
	ADC_Conversion(START, TMP_SENSOR_CHANNEL);
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
    1a8e:	60 e0       	ldi	r22, 0x00	; 0
    1a90:	0e 94 74 00 	call	0xe8	; 0xe8 <ADC_Conversion>
}
    1a94:	cf 91       	pop	r28
    1a96:	df 91       	pop	r29
    1a98:	08 95       	ret

00001a9a <TMP_Sensor_Read>:
/****************************************************************************/
UINT32_t TMP_Sensor_Read(void){
    1a9a:	df 93       	push	r29
    1a9c:	cf 93       	push	r28
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
	return TMP_Reading;
    1aa2:	80 91 36 01 	lds	r24, 0x0136
    1aa6:	90 91 37 01 	lds	r25, 0x0137
    1aaa:	a0 91 38 01 	lds	r26, 0x0138
    1aae:	b0 91 39 01 	lds	r27, 0x0139
}
    1ab2:	bc 01       	movw	r22, r24
    1ab4:	cd 01       	movw	r24, r26
    1ab6:	cf 91       	pop	r28
    1ab8:	df 91       	pop	r29
    1aba:	08 95       	ret

00001abc <TMP_Sensor_Main>:
/****************************************************************************/
void TMP_Sensor_Main(void){
    1abc:	df 93       	push	r29
    1abe:	cf 93       	push	r28
    1ac0:	cd b7       	in	r28, 0x3d	; 61
    1ac2:	de b7       	in	r29, 0x3e	; 62
	if(TRUE == ADC_Finished){
    1ac4:	80 91 35 01 	lds	r24, 0x0135
    1ac8:	81 30       	cpi	r24, 0x01	; 1
    1aca:	b9 f5       	brne	.+110    	; 0x1b3a <TMP_Sensor_Main+0x7e>
		TMP_Reading = ADC_Read();
    1acc:	0e 94 28 01 	call	0x250	; 0x250 <ADC_Read>
    1ad0:	cc 01       	movw	r24, r24
    1ad2:	a0 e0       	ldi	r26, 0x00	; 0
    1ad4:	b0 e0       	ldi	r27, 0x00	; 0
    1ad6:	80 93 36 01 	sts	0x0136, r24
    1ada:	90 93 37 01 	sts	0x0137, r25
    1ade:	a0 93 38 01 	sts	0x0138, r26
    1ae2:	b0 93 39 01 	sts	0x0139, r27
		TMP_Reading = (((TMP_Reading * 5000) / 1024)) / 10;
    1ae6:	80 91 36 01 	lds	r24, 0x0136
    1aea:	90 91 37 01 	lds	r25, 0x0137
    1aee:	a0 91 38 01 	lds	r26, 0x0138
    1af2:	b0 91 39 01 	lds	r27, 0x0139
    1af6:	28 e8       	ldi	r18, 0x88	; 136
    1af8:	33 e1       	ldi	r19, 0x13	; 19
    1afa:	40 e0       	ldi	r20, 0x00	; 0
    1afc:	50 e0       	ldi	r21, 0x00	; 0
    1afe:	bc 01       	movw	r22, r24
    1b00:	cd 01       	movw	r24, r26
    1b02:	0e 94 bb 11 	call	0x2376	; 0x2376 <__mulsi3>
    1b06:	dc 01       	movw	r26, r24
    1b08:	cb 01       	movw	r24, r22
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	38 e2       	ldi	r19, 0x28	; 40
    1b0e:	40 e0       	ldi	r20, 0x00	; 0
    1b10:	50 e0       	ldi	r21, 0x00	; 0
    1b12:	bc 01       	movw	r22, r24
    1b14:	cd 01       	movw	r24, r26
    1b16:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <__udivmodsi4>
    1b1a:	da 01       	movw	r26, r20
    1b1c:	c9 01       	movw	r24, r18
    1b1e:	80 93 36 01 	sts	0x0136, r24
    1b22:	90 93 37 01 	sts	0x0137, r25
    1b26:	a0 93 38 01 	sts	0x0138, r26
    1b2a:	b0 93 39 01 	sts	0x0139, r27
		ADC_Conversion(START, TMP_SENSOR_CHANNEL);
    1b2e:	80 e0       	ldi	r24, 0x00	; 0
    1b30:	60 e0       	ldi	r22, 0x00	; 0
    1b32:	0e 94 74 00 	call	0xe8	; 0xe8 <ADC_Conversion>
		ADC_Finished = FALSE;
    1b36:	10 92 35 01 	sts	0x0135, r1
	}
}
    1b3a:	cf 91       	pop	r28
    1b3c:	df 91       	pop	r29
    1b3e:	08 95       	ret

00001b40 <__vector_16>:
/****************************************************************************/
ISR(ADC_VECT){
    1b40:	1f 92       	push	r1
    1b42:	0f 92       	push	r0
    1b44:	0f b6       	in	r0, 0x3f	; 63
    1b46:	0f 92       	push	r0
    1b48:	11 24       	eor	r1, r1
    1b4a:	8f 93       	push	r24
    1b4c:	df 93       	push	r29
    1b4e:	cf 93       	push	r28
    1b50:	cd b7       	in	r28, 0x3d	; 61
    1b52:	de b7       	in	r29, 0x3e	; 62
	ADC_Finished = TRUE;
    1b54:	81 e0       	ldi	r24, 0x01	; 1
    1b56:	80 93 35 01 	sts	0x0135, r24
}
    1b5a:	cf 91       	pop	r28
    1b5c:	df 91       	pop	r29
    1b5e:	8f 91       	pop	r24
    1b60:	0f 90       	pop	r0
    1b62:	0f be       	out	0x3f, r0	; 63
    1b64:	0f 90       	pop	r0
    1b66:	1f 90       	pop	r1
    1b68:	18 95       	reti

00001b6a <TMR0_Set_Prescaler>:
#include "STD_TYPES.h"
#include "STD_MEMORY_MAP.h"
#include "STD_BITS.h"
#include "TMR0.h"
/****************************************************************************/
void TMR0_Set_Prescaler(const TMR0_PRESCALER_t PRESCALER){
    1b6a:	df 93       	push	r29
    1b6c:	cf 93       	push	r28
    1b6e:	0f 92       	push	r0
    1b70:	cd b7       	in	r28, 0x3d	; 61
    1b72:	de b7       	in	r29, 0x3e	; 62
    1b74:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 &= 0XF8;
    1b76:	a3 e5       	ldi	r26, 0x53	; 83
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	e3 e5       	ldi	r30, 0x53	; 83
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	88 7f       	andi	r24, 0xF8	; 248
    1b82:	8c 93       	st	X, r24
	TCCR0 |= PRESCALER;
    1b84:	a3 e5       	ldi	r26, 0x53	; 83
    1b86:	b0 e0       	ldi	r27, 0x00	; 0
    1b88:	e3 e5       	ldi	r30, 0x53	; 83
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	90 81       	ld	r25, Z
    1b8e:	89 81       	ldd	r24, Y+1	; 0x01
    1b90:	89 2b       	or	r24, r25
    1b92:	8c 93       	st	X, r24
}
    1b94:	0f 90       	pop	r0
    1b96:	cf 91       	pop	r28
    1b98:	df 91       	pop	r29
    1b9a:	08 95       	ret

00001b9c <TMR0_Mode>:
/****************************************************************************/
void TMR0_Mode(const TMR0_MODE_t MODE){
    1b9c:	df 93       	push	r29
    1b9e:	cf 93       	push	r28
    1ba0:	00 d0       	rcall	.+0      	; 0x1ba2 <TMR0_Mode+0x6>
    1ba2:	0f 92       	push	r0
    1ba4:	cd b7       	in	r28, 0x3d	; 61
    1ba6:	de b7       	in	r29, 0x3e	; 62
    1ba8:	89 83       	std	Y+1, r24	; 0x01
	switch (MODE) {
    1baa:	89 81       	ldd	r24, Y+1	; 0x01
    1bac:	28 2f       	mov	r18, r24
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	3b 83       	std	Y+3, r19	; 0x03
    1bb2:	2a 83       	std	Y+2, r18	; 0x02
    1bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb6:	9b 81       	ldd	r25, Y+3	; 0x03
    1bb8:	81 30       	cpi	r24, 0x01	; 1
    1bba:	91 05       	cpc	r25, r1
    1bbc:	21 f1       	breq	.+72     	; 0x1c06 <TMR0_Mode+0x6a>
    1bbe:	2a 81       	ldd	r18, Y+2	; 0x02
    1bc0:	3b 81       	ldd	r19, Y+3	; 0x03
    1bc2:	22 30       	cpi	r18, 0x02	; 2
    1bc4:	31 05       	cpc	r19, r1
    1bc6:	2c f4       	brge	.+10     	; 0x1bd2 <TMR0_Mode+0x36>
    1bc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bca:	9b 81       	ldd	r25, Y+3	; 0x03
    1bcc:	00 97       	sbiw	r24, 0x00	; 0
    1bce:	61 f0       	breq	.+24     	; 0x1be8 <TMR0_Mode+0x4c>
    1bd0:	46 c0       	rjmp	.+140    	; 0x1c5e <TMR0_Mode+0xc2>
    1bd2:	2a 81       	ldd	r18, Y+2	; 0x02
    1bd4:	3b 81       	ldd	r19, Y+3	; 0x03
    1bd6:	22 30       	cpi	r18, 0x02	; 2
    1bd8:	31 05       	cpc	r19, r1
    1bda:	21 f1       	breq	.+72     	; 0x1c24 <TMR0_Mode+0x88>
    1bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bde:	9b 81       	ldd	r25, Y+3	; 0x03
    1be0:	83 30       	cpi	r24, 0x03	; 3
    1be2:	91 05       	cpc	r25, r1
    1be4:	71 f1       	breq	.+92     	; 0x1c42 <TMR0_Mode+0xa6>
    1be6:	3b c0       	rjmp	.+118    	; 0x1c5e <TMR0_Mode+0xc2>
	case TMR0_NORMAL:
		CLEAR_BIT(TCCR0, 3);
    1be8:	a3 e5       	ldi	r26, 0x53	; 83
    1bea:	b0 e0       	ldi	r27, 0x00	; 0
    1bec:	e3 e5       	ldi	r30, 0x53	; 83
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	87 7f       	andi	r24, 0xF7	; 247
    1bf4:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0, 6);
    1bf6:	a3 e5       	ldi	r26, 0x53	; 83
    1bf8:	b0 e0       	ldi	r27, 0x00	; 0
    1bfa:	e3 e5       	ldi	r30, 0x53	; 83
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 81       	ld	r24, Z
    1c00:	8f 7b       	andi	r24, 0xBF	; 191
    1c02:	8c 93       	st	X, r24
    1c04:	2c c0       	rjmp	.+88     	; 0x1c5e <TMR0_Mode+0xc2>
		break;
	case TMR0_PWM:
		SET_BIT(TCCR0, 6);
    1c06:	a3 e5       	ldi	r26, 0x53	; 83
    1c08:	b0 e0       	ldi	r27, 0x00	; 0
    1c0a:	e3 e5       	ldi	r30, 0x53	; 83
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	80 81       	ld	r24, Z
    1c10:	80 64       	ori	r24, 0x40	; 64
    1c12:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0, 3);
    1c14:	a3 e5       	ldi	r26, 0x53	; 83
    1c16:	b0 e0       	ldi	r27, 0x00	; 0
    1c18:	e3 e5       	ldi	r30, 0x53	; 83
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	87 7f       	andi	r24, 0xF7	; 247
    1c20:	8c 93       	st	X, r24
    1c22:	1d c0       	rjmp	.+58     	; 0x1c5e <TMR0_Mode+0xc2>
		break;
	case TMR0_CTC:
		SET_BIT(TCCR0, 3);
    1c24:	a3 e5       	ldi	r26, 0x53	; 83
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	e3 e5       	ldi	r30, 0x53	; 83
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	88 60       	ori	r24, 0x08	; 8
    1c30:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0, 6);
    1c32:	a3 e5       	ldi	r26, 0x53	; 83
    1c34:	b0 e0       	ldi	r27, 0x00	; 0
    1c36:	e3 e5       	ldi	r30, 0x53	; 83
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 81       	ld	r24, Z
    1c3c:	8f 7b       	andi	r24, 0xBF	; 191
    1c3e:	8c 93       	st	X, r24
    1c40:	0e c0       	rjmp	.+28     	; 0x1c5e <TMR0_Mode+0xc2>
		break;
	case TMR0_FAST_PWM:
		SET_BIT(TCCR0, 3);
    1c42:	a3 e5       	ldi	r26, 0x53	; 83
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	e3 e5       	ldi	r30, 0x53	; 83
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	88 60       	ori	r24, 0x08	; 8
    1c4e:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 6);
    1c50:	a3 e5       	ldi	r26, 0x53	; 83
    1c52:	b0 e0       	ldi	r27, 0x00	; 0
    1c54:	e3 e5       	ldi	r30, 0x53	; 83
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	80 81       	ld	r24, Z
    1c5a:	80 64       	ori	r24, 0x40	; 64
    1c5c:	8c 93       	st	X, r24
		break;
	}
}
    1c5e:	0f 90       	pop	r0
    1c60:	0f 90       	pop	r0
    1c62:	0f 90       	pop	r0
    1c64:	cf 91       	pop	r28
    1c66:	df 91       	pop	r29
    1c68:	08 95       	ret

00001c6a <TMR0_Init>:
/****************************************************************************/
void TMR0_Init(void){
    1c6a:	df 93       	push	r29
    1c6c:	cf 93       	push	r28
    1c6e:	cd b7       	in	r28, 0x3d	; 61
    1c70:	de b7       	in	r29, 0x3e	; 62
	TMR0_Set_Buffer(TMR0_TCNTR, 0);
    1c72:	80 e0       	ldi	r24, 0x00	; 0
    1c74:	60 e0       	ldi	r22, 0x00	; 0
    1c76:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <TMR0_Set_Buffer>
	TMR0_Set_Buffer(TMR0_OCR, 0);
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	60 e0       	ldi	r22, 0x00	; 0
    1c7e:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <TMR0_Set_Buffer>
}
    1c82:	cf 91       	pop	r28
    1c84:	df 91       	pop	r29
    1c86:	08 95       	ret

00001c88 <TMR0_INT>:
/****************************************************************************/
void TMR0_INT(const TMR0_INT_t INT){
    1c88:	df 93       	push	r29
    1c8a:	cf 93       	push	r28
    1c8c:	00 d0       	rcall	.+0      	; 0x1c8e <TMR0_INT+0x6>
    1c8e:	0f 92       	push	r0
    1c90:	cd b7       	in	r28, 0x3d	; 61
    1c92:	de b7       	in	r29, 0x3e	; 62
    1c94:	89 83       	std	Y+1, r24	; 0x01
	switch(INT){
    1c96:	89 81       	ldd	r24, Y+1	; 0x01
    1c98:	28 2f       	mov	r18, r24
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	3b 83       	std	Y+3, r19	; 0x03
    1c9e:	2a 83       	std	Y+2, r18	; 0x02
    1ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ca4:	81 30       	cpi	r24, 0x01	; 1
    1ca6:	91 05       	cpc	r25, r1
    1ca8:	e9 f0       	breq	.+58     	; 0x1ce4 <TMR0_INT+0x5c>
    1caa:	2a 81       	ldd	r18, Y+2	; 0x02
    1cac:	3b 81       	ldd	r19, Y+3	; 0x03
    1cae:	22 30       	cpi	r18, 0x02	; 2
    1cb0:	31 05       	cpc	r19, r1
    1cb2:	2c f4       	brge	.+10     	; 0x1cbe <TMR0_INT+0x36>
    1cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb6:	9b 81       	ldd	r25, Y+3	; 0x03
    1cb8:	00 97       	sbiw	r24, 0x00	; 0
    1cba:	61 f0       	breq	.+24     	; 0x1cd4 <TMR0_INT+0x4c>
    1cbc:	2a c0       	rjmp	.+84     	; 0x1d12 <TMR0_INT+0x8a>
    1cbe:	2a 81       	ldd	r18, Y+2	; 0x02
    1cc0:	3b 81       	ldd	r19, Y+3	; 0x03
    1cc2:	22 30       	cpi	r18, 0x02	; 2
    1cc4:	31 05       	cpc	r19, r1
    1cc6:	b1 f0       	breq	.+44     	; 0x1cf4 <TMR0_INT+0x6c>
    1cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cca:	9b 81       	ldd	r25, Y+3	; 0x03
    1ccc:	83 30       	cpi	r24, 0x03	; 3
    1cce:	91 05       	cpc	r25, r1
    1cd0:	c9 f0       	breq	.+50     	; 0x1d04 <TMR0_INT+0x7c>
    1cd2:	1f c0       	rjmp	.+62     	; 0x1d12 <TMR0_INT+0x8a>
	case TMR0_OV_INT_ENABLE:
		SET_BIT(TIMSK, 0);
    1cd4:	a9 e5       	ldi	r26, 0x59	; 89
    1cd6:	b0 e0       	ldi	r27, 0x00	; 0
    1cd8:	e9 e5       	ldi	r30, 0x59	; 89
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	80 81       	ld	r24, Z
    1cde:	81 60       	ori	r24, 0x01	; 1
    1ce0:	8c 93       	st	X, r24
    1ce2:	17 c0       	rjmp	.+46     	; 0x1d12 <TMR0_INT+0x8a>
		break;
	case TMR0_OV_INT_DISABLE:
		CLEAR_BIT(TIMSK, 0);
    1ce4:	a9 e5       	ldi	r26, 0x59	; 89
    1ce6:	b0 e0       	ldi	r27, 0x00	; 0
    1ce8:	e9 e5       	ldi	r30, 0x59	; 89
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	80 81       	ld	r24, Z
    1cee:	8e 7f       	andi	r24, 0xFE	; 254
    1cf0:	8c 93       	st	X, r24
    1cf2:	0f c0       	rjmp	.+30     	; 0x1d12 <TMR0_INT+0x8a>
		break;
	case TMR0_OC_INT_ENABLE:
		SET_BIT(TIMSK, 1);
    1cf4:	a9 e5       	ldi	r26, 0x59	; 89
    1cf6:	b0 e0       	ldi	r27, 0x00	; 0
    1cf8:	e9 e5       	ldi	r30, 0x59	; 89
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	80 81       	ld	r24, Z
    1cfe:	82 60       	ori	r24, 0x02	; 2
    1d00:	8c 93       	st	X, r24
    1d02:	07 c0       	rjmp	.+14     	; 0x1d12 <TMR0_INT+0x8a>
		break;
	case TMR0_OC_INT_DISABLE:
		CLEAR_BIT(TIMSK, 1);
    1d04:	a9 e5       	ldi	r26, 0x59	; 89
    1d06:	b0 e0       	ldi	r27, 0x00	; 0
    1d08:	e9 e5       	ldi	r30, 0x59	; 89
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	80 81       	ld	r24, Z
    1d0e:	8d 7f       	andi	r24, 0xFD	; 253
    1d10:	8c 93       	st	X, r24
		break;
	}
}
    1d12:	0f 90       	pop	r0
    1d14:	0f 90       	pop	r0
    1d16:	0f 90       	pop	r0
    1d18:	cf 91       	pop	r28
    1d1a:	df 91       	pop	r29
    1d1c:	08 95       	ret

00001d1e <TMR0_OC0>:
/****************************************************************************/
void TMR0_OC0(const TMR0_OC0_t STATE){
    1d1e:	df 93       	push	r29
    1d20:	cf 93       	push	r28
    1d22:	0f 92       	push	r0
    1d24:	cd b7       	in	r28, 0x3d	; 61
    1d26:	de b7       	in	r29, 0x3e	; 62
    1d28:	89 83       	std	Y+1, r24	; 0x01
	CLEAR_BIT(TCCR0, 4);
    1d2a:	a3 e5       	ldi	r26, 0x53	; 83
    1d2c:	b0 e0       	ldi	r27, 0x00	; 0
    1d2e:	e3 e5       	ldi	r30, 0x53	; 83
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	80 81       	ld	r24, Z
    1d34:	8f 7e       	andi	r24, 0xEF	; 239
    1d36:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0, 5);
    1d38:	a3 e5       	ldi	r26, 0x53	; 83
    1d3a:	b0 e0       	ldi	r27, 0x00	; 0
    1d3c:	e3 e5       	ldi	r30, 0x53	; 83
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	80 81       	ld	r24, Z
    1d42:	8f 7d       	andi	r24, 0xDF	; 223
    1d44:	8c 93       	st	X, r24
	TCCR0 |= (STATE << 4);
    1d46:	a3 e5       	ldi	r26, 0x53	; 83
    1d48:	b0 e0       	ldi	r27, 0x00	; 0
    1d4a:	e3 e5       	ldi	r30, 0x53	; 83
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	28 2f       	mov	r18, r24
    1d52:	89 81       	ldd	r24, Y+1	; 0x01
    1d54:	88 2f       	mov	r24, r24
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	82 95       	swap	r24
    1d5a:	92 95       	swap	r25
    1d5c:	90 7f       	andi	r25, 0xF0	; 240
    1d5e:	98 27       	eor	r25, r24
    1d60:	80 7f       	andi	r24, 0xF0	; 240
    1d62:	98 27       	eor	r25, r24
    1d64:	82 2b       	or	r24, r18
    1d66:	8c 93       	st	X, r24
}
    1d68:	0f 90       	pop	r0
    1d6a:	cf 91       	pop	r28
    1d6c:	df 91       	pop	r29
    1d6e:	08 95       	ret

00001d70 <TMR0_Set_Buffer>:
/****************************************************************************/
void TMR0_Set_Buffer(const TMR0_BFF_t BUFFER, const UINT8_t VALUE){
    1d70:	df 93       	push	r29
    1d72:	cf 93       	push	r28
    1d74:	00 d0       	rcall	.+0      	; 0x1d76 <TMR0_Set_Buffer+0x6>
    1d76:	00 d0       	rcall	.+0      	; 0x1d78 <TMR0_Set_Buffer+0x8>
    1d78:	cd b7       	in	r28, 0x3d	; 61
    1d7a:	de b7       	in	r29, 0x3e	; 62
    1d7c:	89 83       	std	Y+1, r24	; 0x01
    1d7e:	6a 83       	std	Y+2, r22	; 0x02
	switch (BUFFER) {
    1d80:	89 81       	ldd	r24, Y+1	; 0x01
    1d82:	28 2f       	mov	r18, r24
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	3c 83       	std	Y+4, r19	; 0x04
    1d88:	2b 83       	std	Y+3, r18	; 0x03
    1d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8e:	00 97       	sbiw	r24, 0x00	; 0
    1d90:	31 f0       	breq	.+12     	; 0x1d9e <TMR0_Set_Buffer+0x2e>
    1d92:	2b 81       	ldd	r18, Y+3	; 0x03
    1d94:	3c 81       	ldd	r19, Y+4	; 0x04
    1d96:	21 30       	cpi	r18, 0x01	; 1
    1d98:	31 05       	cpc	r19, r1
    1d9a:	31 f0       	breq	.+12     	; 0x1da8 <TMR0_Set_Buffer+0x38>
    1d9c:	09 c0       	rjmp	.+18     	; 0x1db0 <TMR0_Set_Buffer+0x40>
	case TMR0_TCNTR:
		TCNT0 = VALUE;
    1d9e:	e2 e5       	ldi	r30, 0x52	; 82
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	8a 81       	ldd	r24, Y+2	; 0x02
    1da4:	80 83       	st	Z, r24
    1da6:	04 c0       	rjmp	.+8      	; 0x1db0 <TMR0_Set_Buffer+0x40>
		break;
	case TMR0_OCR:
		OCR0 = VALUE;
    1da8:	ec e5       	ldi	r30, 0x5C	; 92
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	8a 81       	ldd	r24, Y+2	; 0x02
    1dae:	80 83       	st	Z, r24
		break;
	default:
		break;

	}
}
    1db0:	0f 90       	pop	r0
    1db2:	0f 90       	pop	r0
    1db4:	0f 90       	pop	r0
    1db6:	0f 90       	pop	r0
    1db8:	cf 91       	pop	r28
    1dba:	df 91       	pop	r29
    1dbc:	08 95       	ret

00001dbe <TMR0_Read_Buffer>:
/****************************************************************************/
UINT8_t TMR0_Read_Buffer(const TMR0_BFF_t BUFFER){
    1dbe:	df 93       	push	r29
    1dc0:	cf 93       	push	r28
    1dc2:	00 d0       	rcall	.+0      	; 0x1dc4 <TMR0_Read_Buffer+0x6>
    1dc4:	00 d0       	rcall	.+0      	; 0x1dc6 <TMR0_Read_Buffer+0x8>
    1dc6:	cd b7       	in	r28, 0x3d	; 61
    1dc8:	de b7       	in	r29, 0x3e	; 62
    1dca:	8a 83       	std	Y+2, r24	; 0x02
	UINT8_t Buffer = 0;
    1dcc:	19 82       	std	Y+1, r1	; 0x01
	switch (BUFFER) {
    1dce:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd0:	28 2f       	mov	r18, r24
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	3c 83       	std	Y+4, r19	; 0x04
    1dd6:	2b 83       	std	Y+3, r18	; 0x03
    1dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dda:	9c 81       	ldd	r25, Y+4	; 0x04
    1ddc:	00 97       	sbiw	r24, 0x00	; 0
    1dde:	31 f0       	breq	.+12     	; 0x1dec <TMR0_Read_Buffer+0x2e>
    1de0:	2b 81       	ldd	r18, Y+3	; 0x03
    1de2:	3c 81       	ldd	r19, Y+4	; 0x04
    1de4:	21 30       	cpi	r18, 0x01	; 1
    1de6:	31 05       	cpc	r19, r1
    1de8:	31 f0       	breq	.+12     	; 0x1df6 <TMR0_Read_Buffer+0x38>
    1dea:	09 c0       	rjmp	.+18     	; 0x1dfe <TMR0_Read_Buffer+0x40>
		case TMR0_TCNTR:
			Buffer = TCNT0;
    1dec:	e2 e5       	ldi	r30, 0x52	; 82
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	80 81       	ld	r24, Z
    1df2:	89 83       	std	Y+1, r24	; 0x01
    1df4:	04 c0       	rjmp	.+8      	; 0x1dfe <TMR0_Read_Buffer+0x40>
			break;
		case TMR0_OCR:
			Buffer = OCR0;
    1df6:	ec e5       	ldi	r30, 0x5C	; 92
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	80 81       	ld	r24, Z
    1dfc:	89 83       	std	Y+1, r24	; 0x01
			break;
		default:
			break;
		}
	return Buffer;
    1dfe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e00:	0f 90       	pop	r0
    1e02:	0f 90       	pop	r0
    1e04:	0f 90       	pop	r0
    1e06:	0f 90       	pop	r0
    1e08:	cf 91       	pop	r28
    1e0a:	df 91       	pop	r29
    1e0c:	08 95       	ret

00001e0e <URT_Rx_INT>:
static volatile UINT8_t URT_Tx_Curr_Char_Idx=0;
static volatile URT_MESSAGE_t URT_Tx_Curr_Message;
static volatile BOOL_t URT_Tx_Message_Finished=TRUE;

/****************************************************************************/
static void URT_Rx_INT(const URT_INT_t INT){
    1e0e:	df 93       	push	r29
    1e10:	cf 93       	push	r28
    1e12:	00 d0       	rcall	.+0      	; 0x1e14 <URT_Rx_INT+0x6>
    1e14:	0f 92       	push	r0
    1e16:	cd b7       	in	r28, 0x3d	; 61
    1e18:	de b7       	in	r29, 0x3e	; 62
    1e1a:	89 83       	std	Y+1, r24	; 0x01
	switch (INT) {
    1e1c:	89 81       	ldd	r24, Y+1	; 0x01
    1e1e:	28 2f       	mov	r18, r24
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	3b 83       	std	Y+3, r19	; 0x03
    1e24:	2a 83       	std	Y+2, r18	; 0x02
    1e26:	8a 81       	ldd	r24, Y+2	; 0x02
    1e28:	9b 81       	ldd	r25, Y+3	; 0x03
    1e2a:	00 97       	sbiw	r24, 0x00	; 0
    1e2c:	31 f0       	breq	.+12     	; 0x1e3a <URT_Rx_INT+0x2c>
    1e2e:	2a 81       	ldd	r18, Y+2	; 0x02
    1e30:	3b 81       	ldd	r19, Y+3	; 0x03
    1e32:	21 30       	cpi	r18, 0x01	; 1
    1e34:	31 05       	cpc	r19, r1
    1e36:	49 f0       	breq	.+18     	; 0x1e4a <URT_Rx_INT+0x3c>
    1e38:	0f c0       	rjmp	.+30     	; 0x1e58 <URT_Rx_INT+0x4a>
	case URT_IE:
		SET_BIT(UCSRB, 7);
    1e3a:	aa e2       	ldi	r26, 0x2A	; 42
    1e3c:	b0 e0       	ldi	r27, 0x00	; 0
    1e3e:	ea e2       	ldi	r30, 0x2A	; 42
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	80 81       	ld	r24, Z
    1e44:	80 68       	ori	r24, 0x80	; 128
    1e46:	8c 93       	st	X, r24
    1e48:	07 c0       	rjmp	.+14     	; 0x1e58 <URT_Rx_INT+0x4a>
		break;
	case URT_IC:
		CLEAR_BIT(UCSRB, 7);
    1e4a:	aa e2       	ldi	r26, 0x2A	; 42
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	ea e2       	ldi	r30, 0x2A	; 42
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	80 81       	ld	r24, Z
    1e54:	8f 77       	andi	r24, 0x7F	; 127
    1e56:	8c 93       	st	X, r24
		break;
	}
}
    1e58:	0f 90       	pop	r0
    1e5a:	0f 90       	pop	r0
    1e5c:	0f 90       	pop	r0
    1e5e:	cf 91       	pop	r28
    1e60:	df 91       	pop	r29
    1e62:	08 95       	ret

00001e64 <URT_Tx_INT>:
/****************************************************************************/
static void URT_Tx_INT(const URT_INT_t INT){
    1e64:	df 93       	push	r29
    1e66:	cf 93       	push	r28
    1e68:	00 d0       	rcall	.+0      	; 0x1e6a <URT_Tx_INT+0x6>
    1e6a:	0f 92       	push	r0
    1e6c:	cd b7       	in	r28, 0x3d	; 61
    1e6e:	de b7       	in	r29, 0x3e	; 62
    1e70:	89 83       	std	Y+1, r24	; 0x01
	switch (INT) {
    1e72:	89 81       	ldd	r24, Y+1	; 0x01
    1e74:	28 2f       	mov	r18, r24
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	3b 83       	std	Y+3, r19	; 0x03
    1e7a:	2a 83       	std	Y+2, r18	; 0x02
    1e7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e80:	00 97       	sbiw	r24, 0x00	; 0
    1e82:	31 f0       	breq	.+12     	; 0x1e90 <URT_Tx_INT+0x2c>
    1e84:	2a 81       	ldd	r18, Y+2	; 0x02
    1e86:	3b 81       	ldd	r19, Y+3	; 0x03
    1e88:	21 30       	cpi	r18, 0x01	; 1
    1e8a:	31 05       	cpc	r19, r1
    1e8c:	49 f0       	breq	.+18     	; 0x1ea0 <URT_Tx_INT+0x3c>
    1e8e:	0f c0       	rjmp	.+30     	; 0x1eae <URT_Tx_INT+0x4a>
	case URT_IE:
		SET_BIT(UCSRB, 6);
    1e90:	aa e2       	ldi	r26, 0x2A	; 42
    1e92:	b0 e0       	ldi	r27, 0x00	; 0
    1e94:	ea e2       	ldi	r30, 0x2A	; 42
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 81       	ld	r24, Z
    1e9a:	80 64       	ori	r24, 0x40	; 64
    1e9c:	8c 93       	st	X, r24
    1e9e:	07 c0       	rjmp	.+14     	; 0x1eae <URT_Tx_INT+0x4a>
		break;
	case URT_IC:
		CLEAR_BIT(UCSRB, 6);
    1ea0:	aa e2       	ldi	r26, 0x2A	; 42
    1ea2:	b0 e0       	ldi	r27, 0x00	; 0
    1ea4:	ea e2       	ldi	r30, 0x2A	; 42
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	80 81       	ld	r24, Z
    1eaa:	8f 7b       	andi	r24, 0xBF	; 191
    1eac:	8c 93       	st	X, r24
		break;
	}
}
    1eae:	0f 90       	pop	r0
    1eb0:	0f 90       	pop	r0
    1eb2:	0f 90       	pop	r0
    1eb4:	cf 91       	pop	r28
    1eb6:	df 91       	pop	r29
    1eb8:	08 95       	ret

00001eba <URT_Rx>:
/****************************************************************************/
static void URT_Rx(const URT_MODE_t MODE){
    1eba:	df 93       	push	r29
    1ebc:	cf 93       	push	r28
    1ebe:	00 d0       	rcall	.+0      	; 0x1ec0 <URT_Rx+0x6>
    1ec0:	0f 92       	push	r0
    1ec2:	cd b7       	in	r28, 0x3d	; 61
    1ec4:	de b7       	in	r29, 0x3e	; 62
    1ec6:	89 83       	std	Y+1, r24	; 0x01
	switch (MODE) {
    1ec8:	89 81       	ldd	r24, Y+1	; 0x01
    1eca:	28 2f       	mov	r18, r24
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	3b 83       	std	Y+3, r19	; 0x03
    1ed0:	2a 83       	std	Y+2, r18	; 0x02
    1ed2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed6:	00 97       	sbiw	r24, 0x00	; 0
    1ed8:	31 f0       	breq	.+12     	; 0x1ee6 <URT_Rx+0x2c>
    1eda:	2a 81       	ldd	r18, Y+2	; 0x02
    1edc:	3b 81       	ldd	r19, Y+3	; 0x03
    1ede:	21 30       	cpi	r18, 0x01	; 1
    1ee0:	31 05       	cpc	r19, r1
    1ee2:	49 f0       	breq	.+18     	; 0x1ef6 <URT_Rx+0x3c>
    1ee4:	0f c0       	rjmp	.+30     	; 0x1f04 <URT_Rx+0x4a>
	case URT_ENABLE:
		SET_BIT(UCSRB, 4);
    1ee6:	aa e2       	ldi	r26, 0x2A	; 42
    1ee8:	b0 e0       	ldi	r27, 0x00	; 0
    1eea:	ea e2       	ldi	r30, 0x2A	; 42
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	80 81       	ld	r24, Z
    1ef0:	80 61       	ori	r24, 0x10	; 16
    1ef2:	8c 93       	st	X, r24
    1ef4:	07 c0       	rjmp	.+14     	; 0x1f04 <URT_Rx+0x4a>
		break;
	case URT_DISABLE:
		CLEAR_BIT(UCSRB, 4);
    1ef6:	aa e2       	ldi	r26, 0x2A	; 42
    1ef8:	b0 e0       	ldi	r27, 0x00	; 0
    1efa:	ea e2       	ldi	r30, 0x2A	; 42
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	80 81       	ld	r24, Z
    1f00:	8f 7e       	andi	r24, 0xEF	; 239
    1f02:	8c 93       	st	X, r24
		break;
	}
}
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	0f 90       	pop	r0
    1f0a:	cf 91       	pop	r28
    1f0c:	df 91       	pop	r29
    1f0e:	08 95       	ret

00001f10 <URT_Tx>:
/****************************************************************************/
static void URT_Tx(const URT_MODE_t MODE){
    1f10:	df 93       	push	r29
    1f12:	cf 93       	push	r28
    1f14:	00 d0       	rcall	.+0      	; 0x1f16 <URT_Tx+0x6>
    1f16:	0f 92       	push	r0
    1f18:	cd b7       	in	r28, 0x3d	; 61
    1f1a:	de b7       	in	r29, 0x3e	; 62
    1f1c:	89 83       	std	Y+1, r24	; 0x01
	switch (MODE) {
    1f1e:	89 81       	ldd	r24, Y+1	; 0x01
    1f20:	28 2f       	mov	r18, r24
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	3b 83       	std	Y+3, r19	; 0x03
    1f26:	2a 83       	std	Y+2, r18	; 0x02
    1f28:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f2c:	00 97       	sbiw	r24, 0x00	; 0
    1f2e:	31 f0       	breq	.+12     	; 0x1f3c <URT_Tx+0x2c>
    1f30:	2a 81       	ldd	r18, Y+2	; 0x02
    1f32:	3b 81       	ldd	r19, Y+3	; 0x03
    1f34:	21 30       	cpi	r18, 0x01	; 1
    1f36:	31 05       	cpc	r19, r1
    1f38:	49 f0       	breq	.+18     	; 0x1f4c <URT_Tx+0x3c>
    1f3a:	0f c0       	rjmp	.+30     	; 0x1f5a <URT_Tx+0x4a>
	case URT_ENABLE:
		SET_BIT(UCSRB, 3);
    1f3c:	aa e2       	ldi	r26, 0x2A	; 42
    1f3e:	b0 e0       	ldi	r27, 0x00	; 0
    1f40:	ea e2       	ldi	r30, 0x2A	; 42
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	80 81       	ld	r24, Z
    1f46:	88 60       	ori	r24, 0x08	; 8
    1f48:	8c 93       	st	X, r24
    1f4a:	07 c0       	rjmp	.+14     	; 0x1f5a <URT_Tx+0x4a>
		break;
	case URT_DISABLE:
		CLEAR_BIT(UCSRB, 3);
    1f4c:	aa e2       	ldi	r26, 0x2A	; 42
    1f4e:	b0 e0       	ldi	r27, 0x00	; 0
    1f50:	ea e2       	ldi	r30, 0x2A	; 42
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	80 81       	ld	r24, Z
    1f56:	87 7f       	andi	r24, 0xF7	; 247
    1f58:	8c 93       	st	X, r24
		break;
	}
}
    1f5a:	0f 90       	pop	r0
    1f5c:	0f 90       	pop	r0
    1f5e:	0f 90       	pop	r0
    1f60:	cf 91       	pop	r28
    1f62:	df 91       	pop	r29
    1f64:	08 95       	ret

00001f66 <URT_Init>:
/****************************************************************************/
void URT_Init(void){
    1f66:	df 93       	push	r29
    1f68:	cf 93       	push	r28
    1f6a:	cd b7       	in	r28, 0x3d	; 61
    1f6c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRC, 1);
    1f6e:	a0 e4       	ldi	r26, 0x40	; 64
    1f70:	b0 e0       	ldi	r27, 0x00	; 0
    1f72:	e0 e4       	ldi	r30, 0x40	; 64
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	80 81       	ld	r24, Z
    1f78:	82 60       	ori	r24, 0x02	; 2
    1f7a:	8c 93       	st	X, r24
	SET_BIT(UCSRC, 2);
    1f7c:	a0 e4       	ldi	r26, 0x40	; 64
    1f7e:	b0 e0       	ldi	r27, 0x00	; 0
    1f80:	e0 e4       	ldi	r30, 0x40	; 64
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	80 81       	ld	r24, Z
    1f86:	84 60       	ori	r24, 0x04	; 4
    1f88:	8c 93       	st	X, r24
	UBRRH = URT_BAUD_RATE >> 8;
    1f8a:	e0 e4       	ldi	r30, 0x40	; 64
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	10 82       	st	Z, r1
	UBRRL = URT_BAUD_RATE;
    1f90:	e9 e2       	ldi	r30, 0x29	; 41
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	83 e3       	ldi	r24, 0x33	; 51
    1f96:	80 83       	st	Z, r24


	/*- init URT transmiter -*/
	URT_Tx_INT(URT_IE);
    1f98:	80 e0       	ldi	r24, 0x00	; 0
    1f9a:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <URT_Tx_INT>
	URT_Tx(URT_ENABLE);
    1f9e:	80 e0       	ldi	r24, 0x00	; 0
    1fa0:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <URT_Tx>
	/*- Create URT_Tx_Queue -*/
	Cqueue(&URT_Tx_Queue, URT_Tx_Arr, URT_TX_MAX_NO_OF_MESSAGES);
    1fa4:	85 e4       	ldi	r24, 0x45	; 69
    1fa6:	91 e0       	ldi	r25, 0x01	; 1
    1fa8:	2b e3       	ldi	r18, 0x3B	; 59
    1faa:	31 e0       	ldi	r19, 0x01	; 1
    1fac:	b9 01       	movw	r22, r18
    1fae:	43 e0       	ldi	r20, 0x03	; 3
    1fb0:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <Cqueue>
}
    1fb4:	cf 91       	pop	r28
    1fb6:	df 91       	pop	r29
    1fb8:	08 95       	ret

00001fba <Str_Cmp>:
/****************************************************************************/
BOOL_t Str_Cmp(const UINT8_t* Str1, const UINT8_t* Str2){
    1fba:	df 93       	push	r29
    1fbc:	cf 93       	push	r28
    1fbe:	00 d0       	rcall	.+0      	; 0x1fc0 <Str_Cmp+0x6>
    1fc0:	00 d0       	rcall	.+0      	; 0x1fc2 <Str_Cmp+0x8>
    1fc2:	0f 92       	push	r0
    1fc4:	cd b7       	in	r28, 0x3d	; 61
    1fc6:	de b7       	in	r29, 0x3e	; 62
    1fc8:	9b 83       	std	Y+3, r25	; 0x03
    1fca:	8a 83       	std	Y+2, r24	; 0x02
    1fcc:	7d 83       	std	Y+5, r23	; 0x05
    1fce:	6c 83       	std	Y+4, r22	; 0x04
	BOOL_t IsSame = FALSE;
    1fd0:	19 82       	std	Y+1, r1	; 0x01
    1fd2:	12 c0       	rjmp	.+36     	; 0x1ff8 <Str_Cmp+0x3e>
	while(*Str1 == *Str2){
		if(*Str1 == '\0'){
    1fd4:	ea 81       	ldd	r30, Y+2	; 0x02
    1fd6:	fb 81       	ldd	r31, Y+3	; 0x03
    1fd8:	80 81       	ld	r24, Z
    1fda:	88 23       	and	r24, r24
    1fdc:	19 f4       	brne	.+6      	; 0x1fe4 <Str_Cmp+0x2a>
			IsSame = TRUE;
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	89 83       	std	Y+1, r24	; 0x01
    1fe2:	12 c0       	rjmp	.+36     	; 0x2008 <Str_Cmp+0x4e>
			break;
		}
		++Str1;
    1fe4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe6:	9b 81       	ldd	r25, Y+3	; 0x03
    1fe8:	01 96       	adiw	r24, 0x01	; 1
    1fea:	9b 83       	std	Y+3, r25	; 0x03
    1fec:	8a 83       	std	Y+2, r24	; 0x02
		++Str2;
    1fee:	8c 81       	ldd	r24, Y+4	; 0x04
    1ff0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ff2:	01 96       	adiw	r24, 0x01	; 1
    1ff4:	9d 83       	std	Y+5, r25	; 0x05
    1ff6:	8c 83       	std	Y+4, r24	; 0x04
	Cqueue(&URT_Tx_Queue, URT_Tx_Arr, URT_TX_MAX_NO_OF_MESSAGES);
}
/****************************************************************************/
BOOL_t Str_Cmp(const UINT8_t* Str1, const UINT8_t* Str2){
	BOOL_t IsSame = FALSE;
	while(*Str1 == *Str2){
    1ff8:	ea 81       	ldd	r30, Y+2	; 0x02
    1ffa:	fb 81       	ldd	r31, Y+3	; 0x03
    1ffc:	90 81       	ld	r25, Z
    1ffe:	ec 81       	ldd	r30, Y+4	; 0x04
    2000:	fd 81       	ldd	r31, Y+5	; 0x05
    2002:	80 81       	ld	r24, Z
    2004:	98 17       	cp	r25, r24
    2006:	31 f3       	breq	.-52     	; 0x1fd4 <Str_Cmp+0x1a>
			break;
		}
		++Str1;
		++Str2;
	}
	return IsSame;
    2008:	89 81       	ldd	r24, Y+1	; 0x01
}
    200a:	0f 90       	pop	r0
    200c:	0f 90       	pop	r0
    200e:	0f 90       	pop	r0
    2010:	0f 90       	pop	r0
    2012:	0f 90       	pop	r0
    2014:	cf 91       	pop	r28
    2016:	df 91       	pop	r29
    2018:	08 95       	ret

0000201a <__vector_13>:
/****************************************************************************/
ISR(URT_RX_OVF_VECT){
    201a:	1f 92       	push	r1
    201c:	0f 92       	push	r0
    201e:	0f b6       	in	r0, 0x3f	; 63
    2020:	0f 92       	push	r0
    2022:	11 24       	eor	r1, r1
    2024:	df 93       	push	r29
    2026:	cf 93       	push	r28
    2028:	cd b7       	in	r28, 0x3d	; 61
    202a:	de b7       	in	r29, 0x3e	; 62

}
    202c:	cf 91       	pop	r28
    202e:	df 91       	pop	r29
    2030:	0f 90       	pop	r0
    2032:	0f be       	out	0x3f, r0	; 63
    2034:	0f 90       	pop	r0
    2036:	1f 90       	pop	r1
    2038:	18 95       	reti

0000203a <__vector_15>:
/****************************************************************************/
ISR(URT_TX_OVF_VECT){
    203a:	1f 92       	push	r1
    203c:	0f 92       	push	r0
    203e:	0f b6       	in	r0, 0x3f	; 63
    2040:	0f 92       	push	r0
    2042:	11 24       	eor	r1, r1
    2044:	2f 93       	push	r18
    2046:	3f 93       	push	r19
    2048:	8f 93       	push	r24
    204a:	9f 93       	push	r25
    204c:	af 93       	push	r26
    204e:	bf 93       	push	r27
    2050:	ef 93       	push	r30
    2052:	ff 93       	push	r31
    2054:	df 93       	push	r29
    2056:	cf 93       	push	r28
    2058:	cd b7       	in	r28, 0x3d	; 61
    205a:	de b7       	in	r29, 0x3e	; 62
	/*- increment the current index to the next character of the current message  -*/
	++URT_Tx_Curr_Char_Idx;
    205c:	80 91 3a 01 	lds	r24, 0x013A
    2060:	8f 5f       	subi	r24, 0xFF	; 255
    2062:	80 93 3a 01 	sts	0x013A, r24
	/*- check if this is the null character  -*/
	if(URT_Tx_Curr_Message.Message[URT_Tx_Curr_Char_Idx]==NULL_CHAR)
    2066:	20 91 41 01 	lds	r18, 0x0141
    206a:	30 91 42 01 	lds	r19, 0x0142
    206e:	80 91 3a 01 	lds	r24, 0x013A
    2072:	88 2f       	mov	r24, r24
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	f9 01       	movw	r30, r18
    2078:	e8 0f       	add	r30, r24
    207a:	f9 1f       	adc	r31, r25
    207c:	80 81       	ld	r24, Z
    207e:	88 23       	and	r24, r24
    2080:	21 f4       	brne	.+8      	; 0x208a <__vector_15+0x50>
	{
		/*- URT finished sending the message -*/
		URT_Tx_Message_Finished=TRUE;
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	80 93 d1 00 	sts	0x00D1, r24
    2088:	0f c0       	rjmp	.+30     	; 0x20a8 <__vector_15+0x6e>
	}else {
		/*- send the current character of the current message  -*/
		UDR=URT_Tx_Curr_Message.Message[URT_Tx_Curr_Char_Idx];
    208a:	ac e2       	ldi	r26, 0x2C	; 44
    208c:	b0 e0       	ldi	r27, 0x00	; 0
    208e:	20 91 41 01 	lds	r18, 0x0141
    2092:	30 91 42 01 	lds	r19, 0x0142
    2096:	80 91 3a 01 	lds	r24, 0x013A
    209a:	88 2f       	mov	r24, r24
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	f9 01       	movw	r30, r18
    20a0:	e8 0f       	add	r30, r24
    20a2:	f9 1f       	adc	r31, r25
    20a4:	80 81       	ld	r24, Z
    20a6:	8c 93       	st	X, r24
	}
}
    20a8:	cf 91       	pop	r28
    20aa:	df 91       	pop	r29
    20ac:	ff 91       	pop	r31
    20ae:	ef 91       	pop	r30
    20b0:	bf 91       	pop	r27
    20b2:	af 91       	pop	r26
    20b4:	9f 91       	pop	r25
    20b6:	8f 91       	pop	r24
    20b8:	3f 91       	pop	r19
    20ba:	2f 91       	pop	r18
    20bc:	0f 90       	pop	r0
    20be:	0f be       	out	0x3f, r0	; 63
    20c0:	0f 90       	pop	r0
    20c2:	1f 90       	pop	r1
    20c4:	18 95       	reti

000020c6 <URT_Tx_Main>:
/****************************************************************************/
void URT_Tx_Main(void)
{
    20c6:	df 93       	push	r29
    20c8:	cf 93       	push	r28
    20ca:	cd b7       	in	r28, 0x3d	; 61
    20cc:	de b7       	in	r29, 0x3e	; 62
	/*- check if URT transmitted the current message -*/
	if(TRUE==URT_Tx_Message_Finished)
    20ce:	80 91 d1 00 	lds	r24, 0x00D1
    20d2:	81 30       	cpi	r24, 0x01	; 1
    20d4:	e9 f4       	brne	.+58     	; 0x2110 <URT_Tx_Main+0x4a>
	{
		/*- dequeue a new message if queue is not empty -*/
		if(TRUE==Dequeue(&URT_Tx_Queue, &URT_Tx_Curr_Message, QUEUE_OBJ_TYPE_URT_MESSAGE))
    20d6:	85 e4       	ldi	r24, 0x45	; 69
    20d8:	91 e0       	ldi	r25, 0x01	; 1
    20da:	21 e4       	ldi	r18, 0x41	; 65
    20dc:	31 e0       	ldi	r19, 0x01	; 1
    20de:	b9 01       	movw	r22, r18
    20e0:	49 e0       	ldi	r20, 0x09	; 9
    20e2:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <Dequeue>
    20e6:	81 30       	cpi	r24, 0x01	; 1
    20e8:	99 f4       	brne	.+38     	; 0x2110 <URT_Tx_Main+0x4a>
		{
			/*- init the current index to the first character of the current message  -*/
			URT_Tx_Curr_Char_Idx=0;
    20ea:	10 92 3a 01 	sts	0x013A, r1
			URT_Tx_Message_Finished=FALSE;
    20ee:	10 92 d1 00 	sts	0x00D1, r1
			/*- send the first character -*/
			UDR=URT_Tx_Curr_Message.Message[URT_Tx_Curr_Char_Idx];
    20f2:	ac e2       	ldi	r26, 0x2C	; 44
    20f4:	b0 e0       	ldi	r27, 0x00	; 0
    20f6:	20 91 41 01 	lds	r18, 0x0141
    20fa:	30 91 42 01 	lds	r19, 0x0142
    20fe:	80 91 3a 01 	lds	r24, 0x013A
    2102:	88 2f       	mov	r24, r24
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	f9 01       	movw	r30, r18
    2108:	e8 0f       	add	r30, r24
    210a:	f9 1f       	adc	r31, r25
    210c:	80 81       	ld	r24, Z
    210e:	8c 93       	st	X, r24
		}
	}
}
    2110:	cf 91       	pop	r28
    2112:	df 91       	pop	r29
    2114:	08 95       	ret

00002116 <URT_Tx_Set_Request>:
/****************************************************************************/
BOOL_t URT_Tx_Set_Request(const URT_MESSAGE_t*const Data)
{
    2116:	df 93       	push	r29
    2118:	cf 93       	push	r28
    211a:	00 d0       	rcall	.+0      	; 0x211c <URT_Tx_Set_Request+0x6>
    211c:	0f 92       	push	r0
    211e:	cd b7       	in	r28, 0x3d	; 61
    2120:	de b7       	in	r29, 0x3e	; 62
    2122:	9b 83       	std	Y+3, r25	; 0x03
    2124:	8a 83       	std	Y+2, r24	; 0x02
	BOOL_t Ret=FALSE;
    2126:	19 82       	std	Y+1, r1	; 0x01
	/*- request to enqueue the new message -*/
	if(TRUE==Enqueue(&URT_Tx_Queue, Data, QUEUE_OBJ_TYPE_URT_MESSAGE))
    2128:	85 e4       	ldi	r24, 0x45	; 69
    212a:	91 e0       	ldi	r25, 0x01	; 1
    212c:	2a 81       	ldd	r18, Y+2	; 0x02
    212e:	3b 81       	ldd	r19, Y+3	; 0x03
    2130:	b9 01       	movw	r22, r18
    2132:	49 e0       	ldi	r20, 0x09	; 9
    2134:	0e 94 a2 09 	call	0x1344	; 0x1344 <Enqueue>
    2138:	81 30       	cpi	r24, 0x01	; 1
    213a:	11 f4       	brne	.+4      	; 0x2140 <URT_Tx_Set_Request+0x2a>
	{
		Ret=TRUE;
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Ret;
    2140:	89 81       	ldd	r24, Y+1	; 0x01
}
    2142:	0f 90       	pop	r0
    2144:	0f 90       	pop	r0
    2146:	0f 90       	pop	r0
    2148:	cf 91       	pop	r28
    214a:	df 91       	pop	r29
    214c:	08 95       	ret

0000214e <DISP_Update>:
#include "KEYPAD_CFG.h"
#include "KEYPAD.h"
#include "LCD.h"
#include "URT.h"
void DISP_Update(void)
{
    214e:	df 93       	push	r29
    2150:	cf 93       	push	r28
    2152:	cd b7       	in	r28, 0x3d	; 61
    2154:	de b7       	in	r29, 0x3e	; 62
    2156:	2b 97       	sbiw	r28, 0x0b	; 11
    2158:	0f b6       	in	r0, 0x3f	; 63
    215a:	f8 94       	cli
    215c:	de bf       	out	0x3e, r29	; 62
    215e:	0f be       	out	0x3f, r0	; 63
    2160:	cd bf       	out	0x3d, r28	; 61
	static LCD_COL_ID_t Curr_Col=COL1;
	static UINT8_t urt_mess_no=0;
	CHAR_t Curr_Char;
	LCD_MESSAGE_t Curr_Message;
	URT_MESSAGE_t URT_mess={ "ahmed" };
    2162:	80 e6       	ldi	r24, 0x60	; 96
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	9f 83       	std	Y+7, r25	; 0x07
    2168:	8e 83       	std	Y+6, r24	; 0x06
	if(TRUE==KEYPAD_Set_Request(&Curr_Char))
    216a:	ce 01       	movw	r24, r28
    216c:	01 96       	adiw	r24, 0x01	; 1
    216e:	0e 94 85 05 	call	0xb0a	; 0xb0a <KEYPAD_Set_Request>
    2172:	81 30       	cpi	r24, 0x01	; 1
    2174:	09 f0       	breq	.+2      	; 0x2178 <DISP_Update+0x2a>
    2176:	91 c0       	rjmp	.+290    	; 0x229a <DISP_Update+0x14c>
	{
		switch (Curr_Char) {
    2178:	89 81       	ldd	r24, Y+1	; 0x01
    217a:	28 2f       	mov	r18, r24
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	3b 87       	std	Y+11, r19	; 0x0b
    2180:	2a 87       	std	Y+10, r18	; 0x0a
    2182:	8a 85       	ldd	r24, Y+10	; 0x0a
    2184:	9b 85       	ldd	r25, Y+11	; 0x0b
    2186:	84 33       	cpi	r24, 0x34	; 52
    2188:	91 05       	cpc	r25, r1
    218a:	09 f4       	brne	.+2      	; 0x218e <DISP_Update+0x40>
    218c:	56 c0       	rjmp	.+172    	; 0x223a <DISP_Update+0xec>
    218e:	2a 85       	ldd	r18, Y+10	; 0x0a
    2190:	3b 85       	ldd	r19, Y+11	; 0x0b
    2192:	25 33       	cpi	r18, 0x35	; 53
    2194:	31 05       	cpc	r19, r1
    2196:	e4 f4       	brge	.+56     	; 0x21d0 <DISP_Update+0x82>
    2198:	8a 85       	ldd	r24, Y+10	; 0x0a
    219a:	9b 85       	ldd	r25, Y+11	; 0x0b
    219c:	81 33       	cpi	r24, 0x31	; 49
    219e:	91 05       	cpc	r25, r1
    21a0:	09 f4       	brne	.+2      	; 0x21a4 <DISP_Update+0x56>
    21a2:	3c c0       	rjmp	.+120    	; 0x221c <DISP_Update+0xce>
    21a4:	2a 85       	ldd	r18, Y+10	; 0x0a
    21a6:	3b 85       	ldd	r19, Y+11	; 0x0b
    21a8:	22 33       	cpi	r18, 0x32	; 50
    21aa:	31 05       	cpc	r19, r1
    21ac:	34 f4       	brge	.+12     	; 0x21ba <DISP_Update+0x6c>
    21ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    21b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    21b2:	80 33       	cpi	r24, 0x30	; 48
    21b4:	91 05       	cpc	r25, r1
    21b6:	69 f1       	breq	.+90     	; 0x2212 <DISP_Update+0xc4>
    21b8:	5d c0       	rjmp	.+186    	; 0x2274 <DISP_Update+0x126>
    21ba:	2a 85       	ldd	r18, Y+10	; 0x0a
    21bc:	3b 85       	ldd	r19, Y+11	; 0x0b
    21be:	22 33       	cpi	r18, 0x32	; 50
    21c0:	31 05       	cpc	r19, r1
    21c2:	89 f1       	breq	.+98     	; 0x2226 <DISP_Update+0xd8>
    21c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    21c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    21c8:	83 33       	cpi	r24, 0x33	; 51
    21ca:	91 05       	cpc	r25, r1
    21cc:	89 f1       	breq	.+98     	; 0x2230 <DISP_Update+0xe2>
    21ce:	52 c0       	rjmp	.+164    	; 0x2274 <DISP_Update+0x126>
    21d0:	2a 85       	ldd	r18, Y+10	; 0x0a
    21d2:	3b 85       	ldd	r19, Y+11	; 0x0b
    21d4:	27 33       	cpi	r18, 0x37	; 55
    21d6:	31 05       	cpc	r19, r1
    21d8:	09 f4       	brne	.+2      	; 0x21dc <DISP_Update+0x8e>
    21da:	3e c0       	rjmp	.+124    	; 0x2258 <DISP_Update+0x10a>
    21dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    21de:	9b 85       	ldd	r25, Y+11	; 0x0b
    21e0:	88 33       	cpi	r24, 0x38	; 56
    21e2:	91 05       	cpc	r25, r1
    21e4:	5c f4       	brge	.+22     	; 0x21fc <DISP_Update+0xae>
    21e6:	2a 85       	ldd	r18, Y+10	; 0x0a
    21e8:	3b 85       	ldd	r19, Y+11	; 0x0b
    21ea:	25 33       	cpi	r18, 0x35	; 53
    21ec:	31 05       	cpc	r19, r1
    21ee:	51 f1       	breq	.+84     	; 0x2244 <DISP_Update+0xf6>
    21f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    21f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    21f4:	86 33       	cpi	r24, 0x36	; 54
    21f6:	91 05       	cpc	r25, r1
    21f8:	51 f1       	breq	.+84     	; 0x224e <DISP_Update+0x100>
    21fa:	3c c0       	rjmp	.+120    	; 0x2274 <DISP_Update+0x126>
    21fc:	2a 85       	ldd	r18, Y+10	; 0x0a
    21fe:	3b 85       	ldd	r19, Y+11	; 0x0b
    2200:	28 33       	cpi	r18, 0x38	; 56
    2202:	31 05       	cpc	r19, r1
    2204:	71 f1       	breq	.+92     	; 0x2262 <DISP_Update+0x114>
    2206:	8a 85       	ldd	r24, Y+10	; 0x0a
    2208:	9b 85       	ldd	r25, Y+11	; 0x0b
    220a:	89 33       	cpi	r24, 0x39	; 57
    220c:	91 05       	cpc	r25, r1
    220e:	71 f1       	breq	.+92     	; 0x226c <DISP_Update+0x11e>
    2210:	31 c0       	rjmp	.+98     	; 0x2274 <DISP_Update+0x126>
		case '0':
			Curr_Message.Message = "0";
    2212:	86 e6       	ldi	r24, 0x66	; 102
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	9b 83       	std	Y+3, r25	; 0x03
    2218:	8a 83       	std	Y+2, r24	; 0x02
    221a:	2c c0       	rjmp	.+88     	; 0x2274 <DISP_Update+0x126>
			break;
		case '1':
			Curr_Message.Message = "1";
    221c:	88 e6       	ldi	r24, 0x68	; 104
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	9b 83       	std	Y+3, r25	; 0x03
    2222:	8a 83       	std	Y+2, r24	; 0x02
    2224:	27 c0       	rjmp	.+78     	; 0x2274 <DISP_Update+0x126>
			break;
		case '2':
			Curr_Message.Message = "2";
    2226:	8a e6       	ldi	r24, 0x6A	; 106
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	9b 83       	std	Y+3, r25	; 0x03
    222c:	8a 83       	std	Y+2, r24	; 0x02
    222e:	22 c0       	rjmp	.+68     	; 0x2274 <DISP_Update+0x126>
			break;
		case '3':
			Curr_Message.Message = "3";
    2230:	8c e6       	ldi	r24, 0x6C	; 108
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	9b 83       	std	Y+3, r25	; 0x03
    2236:	8a 83       	std	Y+2, r24	; 0x02
    2238:	1d c0       	rjmp	.+58     	; 0x2274 <DISP_Update+0x126>
			break;
		case '4':
			Curr_Message.Message = "4";
    223a:	8e e6       	ldi	r24, 0x6E	; 110
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	9b 83       	std	Y+3, r25	; 0x03
    2240:	8a 83       	std	Y+2, r24	; 0x02
    2242:	18 c0       	rjmp	.+48     	; 0x2274 <DISP_Update+0x126>
			break;
		case '5':
			Curr_Message.Message = "5";
    2244:	80 e7       	ldi	r24, 0x70	; 112
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	9b 83       	std	Y+3, r25	; 0x03
    224a:	8a 83       	std	Y+2, r24	; 0x02
    224c:	13 c0       	rjmp	.+38     	; 0x2274 <DISP_Update+0x126>
			break;
		case '6':
			Curr_Message.Message = "6";
    224e:	82 e7       	ldi	r24, 0x72	; 114
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	9b 83       	std	Y+3, r25	; 0x03
    2254:	8a 83       	std	Y+2, r24	; 0x02
    2256:	0e c0       	rjmp	.+28     	; 0x2274 <DISP_Update+0x126>
			break;
		case '7':
			Curr_Message.Message = "7";
    2258:	84 e7       	ldi	r24, 0x74	; 116
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	9b 83       	std	Y+3, r25	; 0x03
    225e:	8a 83       	std	Y+2, r24	; 0x02
    2260:	09 c0       	rjmp	.+18     	; 0x2274 <DISP_Update+0x126>
			break;
		case '8':
			Curr_Message.Message = "8";
    2262:	86 e7       	ldi	r24, 0x76	; 118
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	9b 83       	std	Y+3, r25	; 0x03
    2268:	8a 83       	std	Y+2, r24	; 0x02
    226a:	04 c0       	rjmp	.+8      	; 0x2274 <DISP_Update+0x126>
			break;
		case '9':
			Curr_Message.Message = "9";
    226c:	88 e7       	ldi	r24, 0x78	; 120
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	9b 83       	std	Y+3, r25	; 0x03
    2272:	8a 83       	std	Y+2, r24	; 0x02
			break;
		default:
			break;
		}
		Curr_Message.Row=ROW1;
    2274:	1c 82       	std	Y+4, r1	; 0x04
		Curr_Message.Col=Curr_Col;
    2276:	80 91 44 01 	lds	r24, 0x0144
    227a:	8d 83       	std	Y+5, r24	; 0x05
		LCD_Set_Request(&Curr_Message);
    227c:	ce 01       	movw	r24, r28
    227e:	02 96       	adiw	r24, 0x02	; 2
    2280:	0e 94 17 09 	call	0x122e	; 0x122e <LCD_Set_Request>
		++Curr_Col;
    2284:	80 91 44 01 	lds	r24, 0x0144
    2288:	8f 5f       	subi	r24, 0xFF	; 255
    228a:	80 93 44 01 	sts	0x0144, r24
		if(LCD_MAX_COLS==Curr_Col)
    228e:	80 91 44 01 	lds	r24, 0x0144
    2292:	80 31       	cpi	r24, 0x10	; 16
    2294:	11 f4       	brne	.+4      	; 0x229a <DISP_Update+0x14c>
		{
			Curr_Col=COL1;
    2296:	10 92 44 01 	sts	0x0144, r1
		}
	}


		switch (urt_mess_no) {
    229a:	80 91 43 01 	lds	r24, 0x0143
    229e:	28 2f       	mov	r18, r24
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	39 87       	std	Y+9, r19	; 0x09
    22a4:	28 87       	std	Y+8, r18	; 0x08
    22a6:	88 85       	ldd	r24, Y+8	; 0x08
    22a8:	99 85       	ldd	r25, Y+9	; 0x09
    22aa:	81 30       	cpi	r24, 0x01	; 1
    22ac:	91 05       	cpc	r25, r1
    22ae:	b9 f0       	breq	.+46     	; 0x22de <DISP_Update+0x190>
    22b0:	28 85       	ldd	r18, Y+8	; 0x08
    22b2:	39 85       	ldd	r19, Y+9	; 0x09
    22b4:	22 30       	cpi	r18, 0x02	; 2
    22b6:	31 05       	cpc	r19, r1
    22b8:	01 f1       	breq	.+64     	; 0x22fa <DISP_Update+0x1ac>
    22ba:	88 85       	ldd	r24, Y+8	; 0x08
    22bc:	99 85       	ldd	r25, Y+9	; 0x09
    22be:	00 97       	sbiw	r24, 0x00	; 0
    22c0:	41 f5       	brne	.+80     	; 0x2312 <DISP_Update+0x1c4>
	case 0:
		URT_mess.Message = "ahmed ";
    22c2:	8a e7       	ldi	r24, 0x7A	; 122
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	9f 83       	std	Y+7, r25	; 0x07
    22c8:	8e 83       	std	Y+6, r24	; 0x06
		if (TRUE == URT_Tx_Set_Request(&URT_mess)) {
    22ca:	ce 01       	movw	r24, r28
    22cc:	06 96       	adiw	r24, 0x06	; 6
    22ce:	0e 94 8b 10 	call	0x2116	; 0x2116 <URT_Tx_Set_Request>
    22d2:	81 30       	cpi	r24, 0x01	; 1
    22d4:	f1 f4       	brne	.+60     	; 0x2312 <DISP_Update+0x1c4>
			urt_mess_no = 1;
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	80 93 43 01 	sts	0x0143, r24
    22dc:	1a c0       	rjmp	.+52     	; 0x2312 <DISP_Update+0x1c4>
		}

		break;
	case 1:
		URT_mess.Message = "sayed ";
    22de:	81 e8       	ldi	r24, 0x81	; 129
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	9f 83       	std	Y+7, r25	; 0x07
    22e4:	8e 83       	std	Y+6, r24	; 0x06
		if (TRUE == URT_Tx_Set_Request(&URT_mess)) {
    22e6:	ce 01       	movw	r24, r28
    22e8:	06 96       	adiw	r24, 0x06	; 6
    22ea:	0e 94 8b 10 	call	0x2116	; 0x2116 <URT_Tx_Set_Request>
    22ee:	81 30       	cpi	r24, 0x01	; 1
    22f0:	81 f4       	brne	.+32     	; 0x2312 <DISP_Update+0x1c4>
			urt_mess_no = 2;
    22f2:	82 e0       	ldi	r24, 0x02	; 2
    22f4:	80 93 43 01 	sts	0x0143, r24
    22f8:	0c c0       	rjmp	.+24     	; 0x2312 <DISP_Update+0x1c4>
		}
		break;
	case 2:
		URT_mess.Message = "aelbanawi ";
    22fa:	88 e8       	ldi	r24, 0x88	; 136
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	9f 83       	std	Y+7, r25	; 0x07
    2300:	8e 83       	std	Y+6, r24	; 0x06
		if (TRUE == URT_Tx_Set_Request(&URT_mess)) {
    2302:	ce 01       	movw	r24, r28
    2304:	06 96       	adiw	r24, 0x06	; 6
    2306:	0e 94 8b 10 	call	0x2116	; 0x2116 <URT_Tx_Set_Request>
    230a:	81 30       	cpi	r24, 0x01	; 1
    230c:	11 f4       	brne	.+4      	; 0x2312 <DISP_Update+0x1c4>
			urt_mess_no = 0;
    230e:	10 92 43 01 	sts	0x0143, r1
	default:
			break;
		}


}
    2312:	2b 96       	adiw	r28, 0x0b	; 11
    2314:	0f b6       	in	r0, 0x3f	; 63
    2316:	f8 94       	cli
    2318:	de bf       	out	0x3e, r29	; 62
    231a:	0f be       	out	0x3f, r0	; 63
    231c:	cd bf       	out	0x3d, r28	; 61
    231e:	cf 91       	pop	r28
    2320:	df 91       	pop	r29
    2322:	08 95       	ret

00002324 <main>:
int main(void)
{
    2324:	df 93       	push	r29
    2326:	cf 93       	push	r28
    2328:	cd b7       	in	r28, 0x3d	; 61
    232a:	de b7       	in	r29, 0x3e	; 62
	DIO_INIT();
    232c:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <DIO_INIT>
	KEYPAD_Init();
    2330:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <KEYPAD_Init>
	URT_Init();
    2334:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <URT_Init>
	CO_SCH_Init();
    2338:	0e 94 a4 01 	call	0x348	; 0x348 <CO_SCH_Init>
	CO_SCH_Add_Task(KEYPAD_Main, 0, 100);
    233c:	88 e0       	ldi	r24, 0x08	; 8
    233e:	95 e0       	ldi	r25, 0x05	; 5
    2340:	60 e0       	ldi	r22, 0x00	; 0
    2342:	44 e6       	ldi	r20, 0x64	; 100
    2344:	0e 94 ce 01 	call	0x39c	; 0x39c <CO_SCH_Add_Task>
	CO_SCH_Add_Task(LCD_Main, 0, 20);
    2348:	8c e3       	ldi	r24, 0x3C	; 60
    234a:	98 e0       	ldi	r25, 0x08	; 8
    234c:	60 e0       	ldi	r22, 0x00	; 0
    234e:	44 e1       	ldi	r20, 0x14	; 20
    2350:	0e 94 ce 01 	call	0x39c	; 0x39c <CO_SCH_Add_Task>
	CO_SCH_Add_Task(DISP_Update, 0, 10);
    2354:	87 ea       	ldi	r24, 0xA7	; 167
    2356:	90 e1       	ldi	r25, 0x10	; 16
    2358:	60 e0       	ldi	r22, 0x00	; 0
    235a:	4a e0       	ldi	r20, 0x0A	; 10
    235c:	0e 94 ce 01 	call	0x39c	; 0x39c <CO_SCH_Add_Task>
	CO_SCH_Add_Task(URT_Tx_Main, 0, 5);
    2360:	83 e6       	ldi	r24, 0x63	; 99
    2362:	90 e1       	ldi	r25, 0x10	; 16
    2364:	60 e0       	ldi	r22, 0x00	; 0
    2366:	45 e0       	ldi	r20, 0x05	; 5
    2368:	0e 94 ce 01 	call	0x39c	; 0x39c <CO_SCH_Add_Task>
	CO_SCH_Start();
    236c:	0e 94 31 03 	call	0x662	; 0x662 <CO_SCH_Start>

	while(1)
	{
		CO_SCH_Dispatch_Tasks();
    2370:	0e 94 3e 02 	call	0x47c	; 0x47c <CO_SCH_Dispatch_Tasks>
    2374:	fd cf       	rjmp	.-6      	; 0x2370 <main+0x4c>

00002376 <__mulsi3>:
    2376:	62 9f       	mul	r22, r18
    2378:	d0 01       	movw	r26, r0
    237a:	73 9f       	mul	r23, r19
    237c:	f0 01       	movw	r30, r0
    237e:	82 9f       	mul	r24, r18
    2380:	e0 0d       	add	r30, r0
    2382:	f1 1d       	adc	r31, r1
    2384:	64 9f       	mul	r22, r20
    2386:	e0 0d       	add	r30, r0
    2388:	f1 1d       	adc	r31, r1
    238a:	92 9f       	mul	r25, r18
    238c:	f0 0d       	add	r31, r0
    238e:	83 9f       	mul	r24, r19
    2390:	f0 0d       	add	r31, r0
    2392:	74 9f       	mul	r23, r20
    2394:	f0 0d       	add	r31, r0
    2396:	65 9f       	mul	r22, r21
    2398:	f0 0d       	add	r31, r0
    239a:	99 27       	eor	r25, r25
    239c:	72 9f       	mul	r23, r18
    239e:	b0 0d       	add	r27, r0
    23a0:	e1 1d       	adc	r30, r1
    23a2:	f9 1f       	adc	r31, r25
    23a4:	63 9f       	mul	r22, r19
    23a6:	b0 0d       	add	r27, r0
    23a8:	e1 1d       	adc	r30, r1
    23aa:	f9 1f       	adc	r31, r25
    23ac:	bd 01       	movw	r22, r26
    23ae:	cf 01       	movw	r24, r30
    23b0:	11 24       	eor	r1, r1
    23b2:	08 95       	ret

000023b4 <__udivmodqi4>:
    23b4:	99 1b       	sub	r25, r25
    23b6:	79 e0       	ldi	r23, 0x09	; 9
    23b8:	04 c0       	rjmp	.+8      	; 0x23c2 <__udivmodqi4_ep>

000023ba <__udivmodqi4_loop>:
    23ba:	99 1f       	adc	r25, r25
    23bc:	96 17       	cp	r25, r22
    23be:	08 f0       	brcs	.+2      	; 0x23c2 <__udivmodqi4_ep>
    23c0:	96 1b       	sub	r25, r22

000023c2 <__udivmodqi4_ep>:
    23c2:	88 1f       	adc	r24, r24
    23c4:	7a 95       	dec	r23
    23c6:	c9 f7       	brne	.-14     	; 0x23ba <__udivmodqi4_loop>
    23c8:	80 95       	com	r24
    23ca:	08 95       	ret

000023cc <__divmodhi4>:
    23cc:	97 fb       	bst	r25, 7
    23ce:	09 2e       	mov	r0, r25
    23d0:	07 26       	eor	r0, r23
    23d2:	0a d0       	rcall	.+20     	; 0x23e8 <__divmodhi4_neg1>
    23d4:	77 fd       	sbrc	r23, 7
    23d6:	04 d0       	rcall	.+8      	; 0x23e0 <__divmodhi4_neg2>
    23d8:	2e d0       	rcall	.+92     	; 0x2436 <__udivmodhi4>
    23da:	06 d0       	rcall	.+12     	; 0x23e8 <__divmodhi4_neg1>
    23dc:	00 20       	and	r0, r0
    23de:	1a f4       	brpl	.+6      	; 0x23e6 <__divmodhi4_exit>

000023e0 <__divmodhi4_neg2>:
    23e0:	70 95       	com	r23
    23e2:	61 95       	neg	r22
    23e4:	7f 4f       	sbci	r23, 0xFF	; 255

000023e6 <__divmodhi4_exit>:
    23e6:	08 95       	ret

000023e8 <__divmodhi4_neg1>:
    23e8:	f6 f7       	brtc	.-4      	; 0x23e6 <__divmodhi4_exit>
    23ea:	90 95       	com	r25
    23ec:	81 95       	neg	r24
    23ee:	9f 4f       	sbci	r25, 0xFF	; 255
    23f0:	08 95       	ret

000023f2 <__udivmodsi4>:
    23f2:	a1 e2       	ldi	r26, 0x21	; 33
    23f4:	1a 2e       	mov	r1, r26
    23f6:	aa 1b       	sub	r26, r26
    23f8:	bb 1b       	sub	r27, r27
    23fa:	fd 01       	movw	r30, r26
    23fc:	0d c0       	rjmp	.+26     	; 0x2418 <__udivmodsi4_ep>

000023fe <__udivmodsi4_loop>:
    23fe:	aa 1f       	adc	r26, r26
    2400:	bb 1f       	adc	r27, r27
    2402:	ee 1f       	adc	r30, r30
    2404:	ff 1f       	adc	r31, r31
    2406:	a2 17       	cp	r26, r18
    2408:	b3 07       	cpc	r27, r19
    240a:	e4 07       	cpc	r30, r20
    240c:	f5 07       	cpc	r31, r21
    240e:	20 f0       	brcs	.+8      	; 0x2418 <__udivmodsi4_ep>
    2410:	a2 1b       	sub	r26, r18
    2412:	b3 0b       	sbc	r27, r19
    2414:	e4 0b       	sbc	r30, r20
    2416:	f5 0b       	sbc	r31, r21

00002418 <__udivmodsi4_ep>:
    2418:	66 1f       	adc	r22, r22
    241a:	77 1f       	adc	r23, r23
    241c:	88 1f       	adc	r24, r24
    241e:	99 1f       	adc	r25, r25
    2420:	1a 94       	dec	r1
    2422:	69 f7       	brne	.-38     	; 0x23fe <__udivmodsi4_loop>
    2424:	60 95       	com	r22
    2426:	70 95       	com	r23
    2428:	80 95       	com	r24
    242a:	90 95       	com	r25
    242c:	9b 01       	movw	r18, r22
    242e:	ac 01       	movw	r20, r24
    2430:	bd 01       	movw	r22, r26
    2432:	cf 01       	movw	r24, r30
    2434:	08 95       	ret

00002436 <__udivmodhi4>:
    2436:	aa 1b       	sub	r26, r26
    2438:	bb 1b       	sub	r27, r27
    243a:	51 e1       	ldi	r21, 0x11	; 17
    243c:	07 c0       	rjmp	.+14     	; 0x244c <__udivmodhi4_ep>

0000243e <__udivmodhi4_loop>:
    243e:	aa 1f       	adc	r26, r26
    2440:	bb 1f       	adc	r27, r27
    2442:	a6 17       	cp	r26, r22
    2444:	b7 07       	cpc	r27, r23
    2446:	10 f0       	brcs	.+4      	; 0x244c <__udivmodhi4_ep>
    2448:	a6 1b       	sub	r26, r22
    244a:	b7 0b       	sbc	r27, r23

0000244c <__udivmodhi4_ep>:
    244c:	88 1f       	adc	r24, r24
    244e:	99 1f       	adc	r25, r25
    2450:	5a 95       	dec	r21
    2452:	a9 f7       	brne	.-22     	; 0x243e <__udivmodhi4_loop>
    2454:	80 95       	com	r24
    2456:	90 95       	com	r25
    2458:	bc 01       	movw	r22, r24
    245a:	cd 01       	movw	r24, r26
    245c:	08 95       	ret

0000245e <_exit>:
    245e:	f8 94       	cli

00002460 <__stop_program>:
    2460:	ff cf       	rjmp	.-2      	; 0x2460 <__stop_program>
